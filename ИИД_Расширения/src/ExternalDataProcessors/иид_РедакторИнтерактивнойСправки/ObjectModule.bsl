//////////////////////////////////////////////////////////////////
// Код конвертора

Функция СконвертироватьТекстПерепискиВHtml(ДокументЗадача, ФильтрСообщений, КомпактныйРежим = Истина) Экспорт
	
	//СписокКартинок = СписокФайловДокумента(ДокументЗадача.Ссылка);
	//ЗагрузитьИконкиЧата(СписокКартинок);
	//
	//ТекстСообщенияHtml = ШапкаHtmlТекста(Истина);
	//
	//// Добавляем сообщения из ТЧ Переписка
	//ТаблицаПереписки = ТаблицаПерепискиИнформационногоЧата(ДокументЗадача);
	//ТаблицаХронологии = ТаблицаХронологииРаботПоЗадаче(ДокументЗадача);
	//СообщенияЧата = СообщенияИнформационногоЧатаЗадачи(ТаблицаПереписки, ТаблицаХронологии, ФильтрСообщений);
	//
	//СписокСотрудников = СообщенияЧата.ВыгрузитьКолонку("Сотрудник");
	//ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СписокСотрудников);
	//ЗагрузитьАватарыСотрудников(СписокСотрудников, СписокКартинок);
	//
	//Для Каждого СтрПереписки Из СообщенияЧата Цикл
	//	
	//	Если СтрПереписки.ТипДанных = "Переписка" Тогда
	//		ТекстСообщения = ТаблицаПереписки.Найти(СтрПереписки.НомерСтроки, "НомерСтроки").Текст;
	//	ИначеЕсли СтрПереписки.ТипДанных = "Хронология" Тогда
	//		Если Не СтрПереписки.Этап = СтрПереписки.ПредыдущийЭтап Тогда
	//			
	//			Если Не ЗначениеЗаполнено(СтрПереписки.ПредыдущийЭтап) Тогда
	//				
	//				ТекстСообщения = "~~РегистрацияЗадачи" + Символ(10)
	//				+ "Задача зарегистрирована";
	//				
	//			Иначе
	//				ТекстСообщения = "~~НовыйЭтапаЗадачи" + Символ(10)
	//				+ "Переход на этап - **" + СтрПереписки.Этап + "**, предыдущий этап **" + СтрПереписки.ПредыдущийЭтап + "**";							
	//			КонецЕсли;
	//			
	//		ИначеЕсли Не СтрПереписки.Сотрудник = СтрПереписки.ПредыдущийСотрудник Тогда
	//			ТекстСообщения = "~~НовыйИсполнительЗадачи" + Символ(10)
	//			+ "Новый исполнитель - **" + СтрПереписки.Сотрудник + "**, предыдущий **" + СтрПереписки.ПредыдущийСотрудник + "**";		
	//		КонецЕсли; 
	//		
	//	КонецЕсли; 
	//	
	//	ТекстСообщенияHtml = ТекстСообщенияHtml + ЗаголовокСообщения(СтрПереписки.Сотрудник, 
	//	СтрПереписки.ДатаСобытия, СтрПереписки.НомерСтроки, СписокКартинок);
	//	МаркерБлока = "";
	//	
	//	Если Не ЗначениеЗаполнено(СтрПереписки.ТипСообщения) 
	//		Или СтрПереписки.ТипСообщения = Перечисления.рдс_ТипыСообщенийЧата.Комментарий Тогда
	//		
	//		Если СтрПереписки.Сотрудник = ПараметрыСеанса.ТекущийПользователь Тогда
	//			МаркерБлока = "~~Комментарий" + Символ(10);
	//		Иначе
	//			МаркерБлока = "~~Комментарий_Правый" + Символ(10);
	//		КонецЕсли; 
	//		
	//	ИначеЕсли СтрПереписки.ТипСообщения = Перечисления.рдс_ТипыСообщенийЧата.ТехническоеОписание Тогда
	//		МаркерБлока = "~~ТехническоеОписание" + Символ(10);
	//	ИначеЕсли СтрПереписки.ТипСообщения = Перечисления.рдс_ТипыСообщенийЧата.СписокЗадач Тогда
	//		МаркерБлока = "~~СписокЗадач" + Символ(10);
	//	КонецЕсли; 
	//	
	//	ТекстСообщенияHtml = ТекстСообщенияHtml 
	//	+ СодержаниеСообщения(МаркерБлока + ТекстСообщения, СписокКартинок, КомпактныйРежим);	
	//	
	//КонецЦикла;
	//
	//ТекстСообщенияHtml = ТекстСообщенияHtml + ПодвалHtmlТекста();
	//
	//Возврат ТекстСообщенияHtml;		
	
КонецФункции // СконвертироватьТекстПерепискиВHtml()

Функция СконвертироватьТекстИнформационногоЧата(СообщенияПользователя) Экспорт
	
	ТекстСообщения = ШапкаHtmlТекста();
	
	// Добавляем сообщения из ТЧ Переписка
	НомерСообщения = 0;
	Для Каждого СтрСообщения Из СообщенияПользователя Цикл
		НомерСообщения = НомерСообщения + 1;
		
		ТекстСообщения = ТекстСообщения + ЗаголовокСообщения(СтрСообщения.Отправитель, СтрСообщения.ДатаСообщения, НомерСообщения);
		ТекстСообщения = ТекстСообщения + СодержаниеСообщения(СтрСообщения.ТекстСообщения, Неопределено, Истина);
		
	КонецЦикла;
	
	ТекстСообщения = ТекстСообщения + ПодвалHtmlТекста();
	
	Возврат ТекстСообщения;		
	
КонецФункции // СконвертироватьТекстИнформационногоЧата()

Функция СконвертироватьТекстВHtml(Текст, СписокКартинок, Расшифровки) Экспорт
	
	ТекстHtml = ШапкаHtmlТекста()
		+ СконвертироватьТекстМаркдаунВHtml(Текст, СписокКартинок, Расшифровки, Ложь)
		+ ПодвалHtmlТекста();
	
	Возврат ТекстHtml;
	
КонецФункции // СконвертироватьТекстВHtml()

Функция СписокФайловДокумента(ДокументЗадача, ВыводНаФорму = Ложь) Экспорт
	
	//СписокФайлов = Новый СписокЗначений(); 
	//
	//Если ДокументЗадача = Неопределено Тогда
	//	Возврат СписокФайлов;
	//КонецЕсли; 
	//
	//СвязанныеДокументы = Новый СписокЗначений();
	//СвязанныеДокументы.Добавить(ДокументЗадача);
	//
	//Если Не ДокументЗадача.Метаданные().Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
	//	Если ЗначениеЗаполнено(ДокументЗадача.ДокументОснование) Тогда
	//		СвязанныеДокументы.Добавить(ДокументЗадача.ДокументОснование);			
	//	КонецЕсли; 
	//КонецЕсли; 
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|   Файлы.Наименование Имя,
	//|	Файлы.Ссылка
	//|ИЗ
	//|	Справочник.Файлы КАК Файлы
	//|ГДЕ
	//|	Файлы.ВладелецФайла В (&ВладельцыКартинок)
	//|   И НЕ Файлы.ПометкаУдаления";
	//
	//Запрос.УстановитьПараметр("ВладельцыКартинок", ДокументЗадача);
	//
	//ФайлыДокумента = Запрос.Выполнить().Выгрузить();
	//Для Каждого ФайлДокумента Из ФайлыДокумента Цикл
	//	
	//	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайлаДляОткрытия(ФайлДокумента.Ссылка);
	//	Если ВыводНаФорму Тогда
	//		СписокФайлов.Добавить(ДанныеФайла, ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
	//	Иначе            
	//		СписокФайлов.Добавить(Строка(ФайлДокумента.Ссылка.УникальныйИдентификатор()), ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
	//	КонецЕсли; 
	//	
	//КонецЦикла; 
	//
	//Возврат СписокФайлов;
	
КонецФункции // СписокКартинокДокумента()

Функция КомпонентаЧтенияКартинкиИзБуфера() Экспорт
	
	Возврат ПолучитьОбщийМакет("ИнструментЧтенияКартинкиИзБуфера_Cbtojpeg");
	
КонецФункции // КомпонентаЧтенияКартинкиИзБуфера()

Функция ТекстHtmlВКомпактномРежиме(ТекстHtml)
	
	ПостроительDom = Новый ПостроительDOM();
	ЧтениеHtml = Новый ЧтениеHTML();
	ЧтениеHtml.УстановитьСтроку(ТекстHtml);
	
	ДокументHtml = ПостроительDom.Прочитать(ЧтениеHtml);
	ЧтениеHtml.Закрыть();
	
	Для Каждого ЭлементКартинка Из ДокументHtml.Картинки Цикл
		
		Если ЭлементКартинка.ЕстьАтрибут("width") Тогда
			ЭлементКартинка.УстановитьАтрибут("width", "100%");
		КонецЕсли; 
		
		Если ЭлементКартинка.ЕстьАтрибут("height") Тогда
			ЭлементКартинка.УдалитьАтрибут("height");
		КонецЕсли; 
		
	КонецЦикла;
	
	ЗаписьHtml = Новый ЗаписьHTML();
	ЗаписьHtml.УстановитьСтроку();
	
	ЗаписьDom = Новый ЗаписьDOM();
	ЗаписьDom.Записать(ДокументHtml, ЗаписьHtml);
	
	Возврат ЗаписьHtml.Закрыть();
	
КонецФункции // ТекстHtmlВКомпактномРежиме()

#Область Yandex_speller 
// ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~
//						Yandex speller 
// ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~
// Проверка орфографии средствами Yandex speller через HTTP GET
// https://tech.yandex.ru/speller/doc/dg/concepts/speller-overview-docpage/
//
// Функция возвращает структуру со следующими парами Ключ-Значение:
//	БезОшибок, КоличествоОшибок, ИсходныйТекст, ИсправленныйТекст, ШаблонТекста, Ошибки
//	БезОшибок (булево)			- Текст не содержит/содержит ошибки.
//	КоличествоОшибок (число)	- Количество ошибок в тексте
//	ИсходныйТекст (строка)		- Текст переданый в функцию
//	ИсправленныйТекст (строка)	- Текст с исправленными ошибками (ошибки заменены на первую подсказку)
//	ШаблонТекста				- Текст в котором места ошибок обрамлены в "ИндексОшибки" 
//	Ошибки (массив структур)	- Состоит из КодОшибки (число), 
//									ОписаниеОшибки (строка), ПозицияСлова (число), НомерСтроки (число), 
//									НомерСтолбца (число), ДлинаСлова (число), Подсказки (массив строк) 
// В случае неудачи функция возвращает "Неопределено" и выводит сообщение об ошибке.
//
// Параметры:
//	Текст						- [обязательный](строка)
//								параметром передается текст на проверку
//	Язык						- [необязательный](строка)
//								Языки проверки (перечисляются через запятую).
//								Возможные значения:
//									ru – русский;
//									uk – украинский;
//									en – английский.
//								По умолчанию: "ru,en".
//	Опции						- [необязательный](число)
//								Опции Яндекс.Спеллера.
//								Значением параметра является сумма значений требуемых опций,
//								см. https://tech.yandex.ru/speller/doc/dg/reference/speller-options-docpage/
//								Например, Опции = 5 - это сумма опций IGNORE_UPPERCASE и IGNORE_URLS.
//								По умолчанию Опции = 31 (IGNORE_UPPERCASE, IGNORE_DIGITS, IGNORE_URLS, FIND_REPEAT_WORDS, IGNORE_LATIN).								
//	Формат						- [необязательный](строка)
//								Формат проверяемого текста.
//								Возможные значения:
//									plain - текст без разметки (значение по умолчанию)
//								    html - HTML-текст.
//	ИсправлятьИсходныйТекст		- [необязательный](булево) 
//								если Истина, то исходный текст исправляется
//								может быть полезно, если использовать как процедуру и возвращать первый параметр "Текст".
//								По умолчанию Ложь.
//	СообщатьОбОшибках			- [необязательный](булево) 
//								если Истина (значение по умолчанию), то будут выводиться сообщения об ошибках
//	Словарь						- [необязательный](строка) 
//								если заданы метаданные словаря (вида: "Справочник.Словарь"), 
//								то будут исключаться из ошибочных слова содержащиеся в наименованиях справочника "Словарь".
//								Если передана строка с разделителями ";", 
//								то вместо справочника словаря будет использоваться она.
//								По умолчанию пустая строка.
//	МинДлинаСлова				- [необязательный](число) 
//								минимальная длина слова подлежащего проверке
//								По умолчанию 0 (проверять все слова).
//Функция YandexSpeller(	Текст, 
//						Знач Язык						= "ru,en", 
//						Знач Опции						= 31, 
//						Знач Формат						= "plain", 
//						Знач ИсправлятьИсходныйТекст	= Ложь, 
//						Знач СообщатьОбОшибках			= Истина,
//						Знач Словарь					= "",
//						Знач МинДлинаСлова				= 0) Экспорт
//	// Откидываю все лишнее
//	// и не мучаю веб сервис по напрасну.
//	Если ТипЗнч(Текст) <> Тип("Строка") Или СтрДлина(Текст)>10000 Тогда
//		Сообщение		= Новый СообщениеПользователю;
//		Сообщение.Текст	= "Проверьте передаваемый на проверку текст. Он "
//		+ ?(ТипЗнч(Текст)<>Тип("Строка"), "не является строкой.", "слишком длинный.");
//		Сообщение.Сообщить();
//		Возврат Неопределено;
//	ИначеЕсли ТипЗнч(Текст) = Тип("Строка") И ПустаяСтрока(Текст) Тогда
//		Возврат Новый Структура("БезОшибок,КоличествоОшибок,Ошибки,ИсходныйТекст,ИсправленныйТекст,ШаблонТекста",
//		Истина, 0, Новый Массив, Текст, Текст, Текст);
//	КонецЕсли;
//	
//	Попытка
//		// Задаю соответсвие для расшифровки кодов ошибок
//		КодыОшибок	= Новый Соответствие;
//		КодыОшибок.Вставить(1, "Слова нет в словаре");
//		КодыОшибок.Вставить(2, "Повтор слова");
//		КодыОшибок.Вставить(3, "Неверное употребление прописных и строчных букв");
//		КодыОшибок.Вставить(4, "Текст содержит слишком много ошибок");

//		// Подключение к Web сервису через SOAP-интерфейс 
//		// !!! НЕ ИСПОЛЬЗУЮ, ТК НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ ВСЕ ПАРАМЕТРЫ ЗАПРОСА ИЗ ЗА ОГРАНИЧЕНИЯ ПЛАТФОРМЫ!!!
//		//Определения	= Новый WSОпределения("http://speller.yandex.net/services/spellservice?WSDL",,,Неопределено,300);	
//		//Прокси		= Новый WSПрокси(Определения, "http://speller.yandex.net/services/spellservice", 
//		//									"SpellService", "SpellServiceSoap", Неопределено, 300);
//		//Данные		= Прокси.checkText(Текст);
//		
//		// Долблю 10 раз HTTP Get запрос в надежде получить ответ
//		Для Счетчик = 1 По 10 Цикл
//			ТекстНаПроверку	= СтрЗаменить(Текст, Символы.Таб,	"%20");
//			ТекстНаПроверку	= СтрЗаменить(ТекстНаПроверку, " ", "%20");
//			
//			URL			= СтрШаблон("services/spellservice/checkText?text=%1&lang=%2&options=%3&format=%4", ТекстНаПроверку, СокрЛП(Язык), СокрЛП(Опции), СокрЛП(Формат));
//			//Заголовки	= Новый Соответствие();
//			//Заголовки.Вставить("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8");
//			//Заголовки.Вставить("Accept-Encoding", "gzip, deflate");
//			//Заголовки.Вставить("Accept-Language", "en-US,en;q=0.8,ru;q=0.6");
//			//Заголовки.Вставить("Cache-Control", "max-age=0");
//			//Заголовки.Вставить("Connection", "keep-alive");
//			//Заголовки.Вставить("Host", "speller.yandex.net");
//			//Заголовки.Вставить("Upgrade-Insecure-Requests", "1");			
//			//Заголовки.Вставить("User-Agent", "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36");
//			//Заголовки.Вставить("X-Compress", "null");			
//			
//			HTTPСоединение	= Новый HTTPСоединение("speller.yandex.net", 80, , , , Счетчик*10);
//			//HTTPСоединение= Новый HTTPСоединение("speller.yandex.net", 443,,,, Счетчик*10, Новый ЗащищенноеСоединениеOpenSSL());
//			HTTPЗапрос		= Новый HTTPЗапрос(URL); //, Заголовки);		
//			HTTPОтвет		= HTTPСоединение.Получить(HTTPЗапрос);
//			Если HTTPОтвет.КодСостояния	= 200 Тогда Прервать КонецЕсли;			
//		КонецЦикла; // Для Счетчик = 1 По 10 
//		Если HTTPОтвет.КодСостояния <> 200 Тогда
//			Сообщение		= Новый СообщениеПользователю;
//			Сообщение.Текст	= "Не удалось соединиться с сервисом yandex.speller.
//							|Проверьте подключение к интернету.";
//			Сообщение.Сообщить();
//			Возврат Неопределено;			
//		КонецЕсли; // Если HTTPОтвет.КодСостояния <> 200
//		
//		// Перебираю XML ответ
//		ЧтениеXML		= Новый ЧтениеXML();    
//		ЧтениеXML.УстановитьСтроку(HttpОтвет.ПолучитьТелоКакСтроку());     
//		ПостроительDOM	= Новый ПостроительDOM;
//		Попытка 
//	    	ДокументDOM		= ПостроительDOM.Прочитать(ЧтениеXML);
//		Исключение
//			Сообщение		= Новый СообщениеПользователю;
//			Сообщение.Текст	= "Не возможно прочитать ответ сервиса Yandex Speller.
//							|Возможно битая кодировка." + Символы.ПС + ОписаниеОшибки();
//			Сообщение.Сообщить();
//			Возврат Неопределено;						
//		КонецПопытки;
//		Ошибки			= Новый Массив;
//		ОшибкиСтрокой	= "";    
//		ЭлементыError	= ДокументDOM.ПолучитьЭлементыПоИмени("Error");
//		сАтрибутов		= Новый Соответствие;
//		Для Каждого Атрибут Из СтрРазделить("cod:КодОшибки;pos:ПозицияСлова;row:НомерСтроки;col:НомерСтолбца;len:ДлинаСлова", ";", Ложь) Цикл
//			сАтрибутов.Вставить(Лев(Атрибут, 3), Сред(Атрибут, 5));	
//		КонецЦикла; // Для Каждого Атрибут Из СтрРазделить()
//		ДЛЯ КАЖДОГО ЭлементError ИЗ ЭлементыError ЦИКЛ
//			Попытка
//				Ошибка		= Новый Структура("Подсказки", Новый Массив);
//				Для Каждого Атрибут Из ЭлементError.Атрибуты Цикл
//				Ошибка.Вставить(сАтрибутов.Получить(Лев(Атрибут.Имя, 3)), Число(Атрибут.Значение));
//				КонецЦикла; // Для Каждого Атрибут Из ЭлементError.Атрибуты
//				Ошибка.Вставить("ОписаниеОшибки",	КодыОшибок.Получить(Ошибка.КодОшибки)); 
//				Слова		= ЭлементError.ПолучитьЭлементыПоИмени("word");
//				Если Не Слова.Количество() Тогда Продолжить КонецЕсли;
//				Ошибка.Вставить("Слово", Слова[0].ТекстовоеСодержимое);
//				ОшибкиСтрокой	= СтрШаблон("%1,""%2""", ОшибкиСтрокой, СтрЗаменить(Ошибка.Слово, """", ""));
//				Подсказки	= ЭлементError.ПолучитьЭлементыПоИмени("s");
//				Для Каждого Подсказка Из Подсказки Цикл
//				Ошибка.Подсказки.Добавить(Подсказка.ТекстовоеСодержимое);
//				КонецЦикла; // Для Каждого Подсказка Из Подсказки    
//				Ошибки.Добавить(Ошибка);
//			Исключение
//				Сообщение		= Новый СообщениеПользователю;
//				Сообщение.Текст	= "Ошибка при разборе ответа от сервера. Итерация будет пропущена." + Символы.ПС + ОписаниеОшибки();
//				Сообщение.Сообщить();
//			КонецПопытки;
//		КОНЕЦЦИКЛА; // ДЛЯ КАЖДОГО ЭлементError ИЗ ЭлементыError
//		ОшибкиСтрокой	= Сред(ОшибкиСтрокой, 2);
//		
//		// Немного прибираюсь за собой
//		Заголовки = Неопределено; HTTPСоединение = Неопределено; 
//		HTTPЗапрос = Неопределено; HTTPОтвет = Неопределено;
//		ЧтениеXML.Закрыть(); ЧтениеXML = Неопределено; ДокументDOM = Неопределено; 
//		ПостроительDOM = Неопределено; сАтрибутов = Неопределено;
//				
//		// Если надо найти слова-исключения из справочника
//		ЕСЛИ ТипЗнч(Словарь) = Тип("Строка") И СтрДлина(ОшибкиСтрокой) И СтрДлина(Словарь) И СтрНачинаетсяС(Словарь, "Справочник.") ТОГДА 		
//			#Если НаСервере Тогда				
//			Если Метаданные.Справочники.Найти(Сред(Словарь, 12)) <> Неопределено Тогда				
//				Запрос	= Новый Запрос("
//				|ВЫБРАТЬ Наименование
//				|ИЗ "+Словарь+"
//				|ГДЕ Наименование В("+ОшибкиСтрокой+")");
//				Словарь	= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
//			КонецЕсли;
//			#КонецЕсли
//		ИНАЧЕЕСЛИ ТипЗнч(Словарь) = Тип("Строка") ТОГДА // Если словарь передан строкой 
//			Словарь = СтрРазделить(Словарь, ";", Ложь);
//		КОНЕЦЕСЛИ; // ЕСЛИ ТипЗнч(Словарь) = Тип("Булево") И Словарь
//		
//		// Удаляю из ошибок короткие и словарные слова
//		КолвоЭлтовКоллекции	= Ошибки.Количество(); 
//		ДЛЯ оИндекс = 1 ПО КолвоЭлтовКоллекции ЦИКЛ
//			Индекс		= КолвоЭлтовКоллекции - оИндекс;
//			Ошибка		= Ошибки[Индекс];
//			// Если слово слишком короткое, чтоб быть ошибкой
//			Если МинДлинаСлова И Ошибка.ДлинаСлова < МинДлинаСлова Тогда 
//				Ошибки.Удалить(Индекс);					
//			ИначеЕсли ТипЗнч(Словарь) = Тип("Массив") Тогда
//				// Если слово является словарным (исключением)
//	
//				Для Каждого Слово Из Словарь Цикл
//					Если СокрЛП(Нрег(Ошибка.Слово)) = СокрЛП(Нрег(Слово)) Тогда
//						Ошибки.Удалить(Индекс); Прервать; 
//					КонецЕсли; // Если СокрЛП(Нрег(Ошибка.word)) = СокрЛП(Нрег(Слово))
//				КонецЦикла; // Для Каждого Слово Из Словарь 		
//			КонецЕсли; // Если Не МинДлинаСлова И Ошибка.len < МинДлинаСлова
//		КОНЕЦЦИКЛА; // ДЛЯ оИндекс = 1 ПО КолвоЭлтовКоллекции
//		
//		// Перебираю все ошибки
//		ИсходныйТекст		= Текст;
//		ИсправленныйТекст	= Текст;
//		ДЛЯ КАЖДОГО Ошибка ИЗ Ошибки ЦИКЛ
//			Подсказки	= "";
//			// Перебираю все доступные подсказки 
//			// для уведомления пользователя о доступных вариантах
//			Для Каждого Подсказка Из Ошибка.Подсказки Цикл
//				Подсказки	= Подсказки + Подсказка + ", ";
//			КонецЦикла;
//			Подсказки	= Лев(Подсказки, СтрДлина(Подсказки)-2);
//			Если Ошибка.Подсказки.Количество() Тогда
//				ИсправленныйТекст	= СтрЗаменить(ИсправленныйТекст, Ошибка.Слово, Ошибка.Подсказки[0]); 	
//			КонецЕсли; // Если Ошибка.Подсказки.Количество()			
//			Если СообщатьОбОшибках Тогда
//				// Непосредственно вывод по ошибке
//				Сообщение		= Новый СообщениеПользователю;
//				Сообщение.Текст	= СтрШаблон("Ошибка в слове: ""%1"". %2. %3", 
//									Ошибка.Слово, 
//									Ошибка.ОписаниеОшибки,
//									?(Ошибка.Подсказки.Количество(), 
//										Символы.ПС + "Возможно Вы хотели написать: " + Подсказки, ""));
//				Сообщение.Сообщить();
//			КонецЕсли; // Если СообщатьОбОшибках
//		КОНЕЦЦИКЛА; // ДЛЯ КАЖДОГО Ошибка ИЗ Данные.error
//		
//		Если ИсправлятьИсходныйТекст Тогда Текст = ИсправленныйТекст КонецЕсли;
//		
//		// Создаю шаблон строки с ошибками
//		// где индекс массива ошибок соответсвует тегу Индекс
//		ШаблонТекста	= ИсходныйТекст;
//		КолвоЭлтовКоллекции	= Ошибки.Количество(); 
//		Для оИндекс = 1 По КолвоЭлтовКоллекции Цикл
//			Индекс			= КолвоЭлтовКоллекции - оИндекс;
//			Ошибка			= Ошибки[Индекс];
//			ШаблонТекста	= СтрШаблон("%1%2%3",
//							Лев(ШаблонТекста, Ошибка.ПозицияСлова), Индекс, Сред(ШаблонТекста, Ошибка.ПозицияСлова+Ошибка.ДлинаСлова+1));			
//		КонецЦикла; // Для оИндекс = 1 По КолвоЭлтовКоллекции
//		
//		Возврат Новый Структура("БезОшибок,КоличествоОшибок,Ошибки,ИсходныйТекст,ИсправленныйТекст,ШаблонТекста",
//								Не Булево(Ошибки.Количество()), Ошибки.Количество(), Ошибки, ИсходныйТекст, ИсправленныйТекст, ШаблонТекста);			
//	Исключение
//		Сообщение		= Новый СообщениеПользователю;
//		Сообщение.Текст	= "Не удалось проверить орфографию." + Символы.ПС + ОписаниеОшибки();
//		Сообщение.Сообщить();
//		Возврат Неопределено;
//	КонецПопытки;
//КонецФункции // YandexSpeller()
//// ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~
#КонецОбласти

#Область Информационный_чат

Функция ТаблицаПерепискиИнформационногоЧата(ДокументЗадачи)
	
	ТаблицаПереписки = ДокументЗадачи.Переписка.Выгрузить();
	
	ТипыКолонки = Новый Массив();
	ТипыКолонки.Добавить(Тип("ДокументСсылка.itilprofЗапросы"));
	ТипыКолонки.Добавить(Тип("ДокументСсылка.itilprofЗапросыНаИзменения"));
	
	ТаблицаПереписки.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(ТипыКолонки));
	
	ТаблицаПереписки.ЗаполнитьЗначения(ДокументЗадачи.Ссылка, "Ссылка");
	
	Если ЗначениеЗаполнено(ДокументЗадачи.ДокументОснование) Тогда
		
		Для Каждого СтрокаПереписки Из ДокументЗадачи.ДокументОснование.Переписка Цикл
			
			НомерСтроки = ТаблицаПереписки.Количество() + 1;
			НоваяСтрока = ТаблицаПереписки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПереписки);
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НоваяСтрока.Ссылка = ДокументЗадачи.ДокументОснование;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ТаблицаПереписки;
	
КонецФункции // ТаблицаПерепискиИнформационногоЧата()

Функция ТаблицаХронологииРаботПоЗадаче(ДокументЗадачи)
	
	ТаблицаХронологии = ДокументЗадачи.Исполнители.Выгрузить();
	ТаблицаХронологии.Очистить();
	
	ТипыКолонки = Новый Массив();
	ТипыКолонки.Добавить(Тип("ДокументСсылка.itilprofЗапросы"));
	ТипыКолонки.Добавить(Тип("ДокументСсылка.itilprofЗапросыНаИзменения"));
	ТаблицаХронологии.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(ТипыКолонки));
	
	Если ЗначениеЗаполнено(ДокументЗадачи.ДокументОснование) Тогда
		
		Для Каждого СтрокаХронологии Из ДокументЗадачи.ДокументОснование.Исполнители Цикл
			
			НомерСтроки = ТаблицаХронологии.Количество() + 1;
			НоваяСтрока = ТаблицаХронологии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХронологии);
			НоваяСтрока.НомерСтроки = НомерСтроки;
			
		КонецЦикла;
		
		ТаблицаХронологии.ЗаполнитьЗначения(ДокументЗадачи.ДокументОснование, "Ссылка");
		
	КонецЕсли; 
	
	Для Каждого СтрокаХронологии Из ДокументЗадачи.Исполнители Цикл
		
		НомерСтроки = ТаблицаХронологии.Количество() + 1;
		НоваяСтрока = ТаблицаХронологии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХронологии);
		НоваяСтрока.НомерСтроки = НомерСтроки;
		НоваяСтрока.Ссылка = ДокументЗадачи.Ссылка;
		
	КонецЦикла;
	
	Возврат ТаблицаХронологии;
	
КонецФункции // ТаблицаХронологииРаботПоЗадаче()

Функция СообщенияИнформационногоЧатаЗадачи(Переписка, Хронология, ФильтрСообщений)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаПереписки", Переписка); 
	Запрос.УстановитьПараметр("ТаблицаХронологии", Хронология); 
	Запрос.УстановитьПараметр("ФильтрСообщений", ФильтрСообщений); 
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Переписка.Ссылка,
	|	Переписка.НомерСтроки,
	|	Переписка.Пользователь,
	|	Переписка.Дата,
	|	Переписка.СкрытьОтПользователя,
	|	Переписка.ТипСообщения
	|ПОМЕСТИТЬ вт_ПерепискаЧата
	|ИЗ
	|	&ТаблицаПереписки КАК Переписка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хронология.Ссылка,
	|	Хронология.НомерСтроки,
	|	Хронология.Этап,
	|	Хронология.Исполнитель,
	|	Хронология.МоментПередачи,
	|	Хронология.ДатаНачала,
	|	Хронология.ДатаОкончание
	|ПОМЕСТИТЬ вт_ХронологияЗадачи
	|ИЗ
	|	&ТаблицаХронологии КАК Хронология
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исполнители.Ссылка,
	|	Исполнители.НомерСтроки,
	|	Исполнители.Этап,
	|	Исполнители.Исполнитель,
	|	Исполнители.МоментПередачи КАК ДатаНачала,
	|	ЗНАЧЕНИЕ(Перечисление.рдс_ТипыСообщенийЧата.ХронологияСобытий) КАК ТипСообщения
	|ПОМЕСТИТЬ вт_Хронология
	|ИЗ
	|	вт_ХронологияЗадачи КАК Исполнители
	|ГДЕ
	|	ЗНАЧЕНИЕ(Перечисление.рдс_ТипыСообщенийЧата.ХронологияСобытий) В (&ФильтрСообщений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Переписка.Ссылка,
	|	""Переписка"" КАК ТипДанных,
	|	Переписка.Пользователь,
	|	Переписка.Дата,
	|	Переписка.НомерСтроки,
	|	Переписка.ТипСообщения
	|ПОМЕСТИТЬ вт_ДанныеПереписки
	|ИЗ
	|	вт_ПерепискаЧата КАК Переписка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.рдс_ТипыСообщенийЧата.ПустаяСсылка) = Переписка.ТипСообщения
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.рдс_ТипыСообщенийЧата.Комментарий)
	|			ИНАЧЕ Переписка.ТипСообщения
	|		КОНЕЦ В (&ФильтрСообщений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновнаяТаблица.Ссылка,
	|	""Хронология"" КАК ТипДанных,
	|	ОсновнаяТаблица.НомерСтроки,
	|	ОсновнаяТаблица.ДатаНачала КАК ДатаСобытия,
	|	ОсновнаяТаблица.Исполнитель КАК Сотрудник,
	|	ОсновнаяТаблица.ТипСообщения,
	|	ОсновнаяТаблица.Этап,
	|	ДополнительнаяТаблица.Исполнитель КАК ПредыдущийСотрудник,
	|	ДополнительнаяТаблица.Этап КАК ПредыдущийЭтап
	|ПОМЕСТИТЬ вт_ДанныеДокумента
	|ИЗ
	|	вт_Хронология КАК ОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Хронология КАК ДополнительнаяТаблица
	|		ПО (ОсновнаяТаблица.НомерСтроки - 1 = ДополнительнаяТаблица.НомерСтроки)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Переписка.Ссылка,
	|	Переписка.ТипДанных,
	|	Переписка.НомерСтроки,
	|	Переписка.Дата,
	|	Переписка.Пользователь,
	|	Переписка.ТипСообщения,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	вт_ДанныеПереписки КАК Переписка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Ссылка,
	|	вт_ДанныеДокумента.ТипДанных,
	|	вт_ДанныеДокумента.НомерСтроки,
	|	вт_ДанныеДокумента.ДатаСобытия КАК ДатаСобытия,
	|	вт_ДанныеДокумента.Сотрудник,
	|	вт_ДанныеДокумента.ТипСообщения,
	|	вт_ДанныеДокумента.Этап,
	|	вт_ДанныеДокумента.ПредыдущийСотрудник,
	|	вт_ДанныеДокумента.ПредыдущийЭтап
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия УБЫВ";
	
	ДанныеПереписки = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеПереписки;
	
КонецФункции // СообщенияИнформационногоЧатаЗадачи()

Процедура ЗагрузитьАватарыСотрудников(СписокСотрудников, СписокКартинок)
	
	АдресАватараПоУмолчанию = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.рдс_АватарСотрудникаПоУмолчанию.ПолучитьДвоичныеДанные(), "");
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл
		
		Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Пользователи") И Не Сотрудник.ЭтоГруппа Тогда
			Данные = Сотрудник.Аватар.Получить();
			Если Не Данные = Неопределено Тогда
				АдресАватара = ПолучитьНавигационнуюСсылку(Сотрудник, "Аватар");
				СписокКартинок.Добавить(Сотрудник, АдресАватара);		
			Иначе
				СписокКартинок.Добавить(Сотрудник, АдресАватараПоУмолчанию);
			КонецЕсли; 
		Иначе
			СписокКартинок.Добавить(Сотрудник, АдресАватараПоУмолчанию);
		КонецЕсли; 
		
	КонецЦикла;
	
	
КонецПроцедуры // ЗагрузитьАватарыСотрудников()

Процедура ЗагрузитьИконкиЧата(СписокКартинок)
	
	АдресИконки = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.рдс_ЗадачаЗарегистрирована.ПолучитьДвоичныеДанные(), "");	
	СписокКартинок.Добавить("Иконка_ЗадачаЗарегистрирована", АдресИконки);
	
	АдресИконки = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.рдс_СменаЭтапаМаршрута.ПолучитьДвоичныеДанные(), "");	
	СписокКартинок.Добавить("Иконка_СменаЭтапаМаршрута", АдресИконки);
	
	АдресИконки = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.рдс_СменаИсполнителяЗадачи.ПолучитьДвоичныеДанные(), "");	
	СписокКартинок.Добавить("Иконка_СменаИсполнителяЗадачи", АдресИконки);
	
	АдресИконки = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.рдс_РедакторСообщенияЧата.ПолучитьДвоичныеДанные(), "");	
	СписокКартинок.Добавить("Иконка_РедакторСообщения", АдресИконки);
	
	АдресИконки = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.рдс_ПолныйЭкранПросмотра.ПолучитьДвоичныеДанные(), "");	
	СписокКартинок.Добавить("Иконка_ПросмотраСообщения", АдресИконки);
	
	АдресИконки = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.рдс_ПереносСрокаЗадачиСообщениеЧата.ПолучитьДвоичныеДанные(), "");	
	СписокКартинок.Добавить("Иконка_ПереносСрокаЗадачиСообщениеЧата", АдресИконки);
	
КонецПроцедуры // ЗагрузитьИконкиЧата()

#КонецОбласти // Информационный_чат

#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ_Markdown_to_Html

Функция ШапкаHtmlТекста(ВыводитьФонЧата = Ложь)
	
	Если ВыводитьФонЧата Тогда
		АдресКартинкиФона = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.рдс_ТекстураЧаста.ПолучитьДвоичныеДанные(), "");
	Иначе
		АдресКартинкиФона = "#";
	КонецЕсли; 
	
	ШапкаТекстаHtlm = "<html>
	|<head>
	|    <meta http-equiv="" Content-Type "" content="" text/html; charset=utf-8 "">
	|<script type=""text/javascript"">
	|
	|function goTo(where)
	|{
	|	document.location.replace(where);
	|	 return false;
	|} 
	|
	|</script>
	|    <title></title>
	
	|	 <style>
	
	|body{
	|	background-image: url(" + АдресКартинкиФона + ")
	|}
	
	|pre {
	|	background: #f5f2f0;
	|	padding: 5px;
	|	margin-bottom: 5px;
	|	overflow: auto;
	|	text-shadow: 0 1px white;
	|	font-family: Courier New;
	|	font-size: 12px;
	|	white-space: pre;
	|	word-spacing: normal;
	|	word-break: normal;
	|	word-wrap: normal;
	|	-moz-tab-size: 4;
	|	-o-tab-size: 4;
	|	tab-size: 4;
	|	border: 1px solid #e8e8e8;
	|	border-radius: 3px;
	|}
	
	|table,
	|th,
	|td {
	|	border: 1px solid black;
	|	border-collapse: collapse;
	|	font-family: Arial, Helvetica, sans-serif;
	|	font-size: 10pt;
	|}
	
	|th,
	|td {
	|	padding: 5px;
	|	text-align: left;
	|	background: white;
	|}
	
	|th {
	|	background: #f5edcc;
	|	padding: 5px 10px;
	|}
	
	|.nameObject {
	|	font-family: Courier New, Courier, monospace;
	|	font-size: 11pt;
	|	/*font-weight: bold;*/
	|	color: darkblue;
	|}
	
	|blockquote {
	|	border: dotted #666 1px;
	|	border-left: solid olive 7px;
	|	margin: 10px 20px;
	|	padding: 10px;
	|	color: #333;
	|	font-style: normal;
	|	font-size: 14px;
	|	background: #fcfcfc;
	|}
	
	|.formula {
	|	background-color: #FFFFFF;
	|	padding: 2px;
	|	border: solid #CCCCCC 1px;
	|	border-radius: 7px;
	|	text-align: center;
	|	box-shadow: 0 0 8px #ccc;
	|	font-size: 12px;
	|}
	
	|ul,
	|ol {
	|	font-size: 10pt;
	|	font-family: Courier New, Courier, monospace;
	|	margin-top: 5px;
	|}
	
	|h {
	|	font-family: Courier New, Courier, monospace;
	|}
	
	|p {
	|	font-family: Courier New, Courier, monospace;
	|	font-size: 10pt;
	|	margin-top: 5px;
	|	margin-bottom: 5px' 
	
	|}
	
	|.refDoc {
	|	font-family: Courier New, Courier, monospace;
	|	font-size: 10pt;
	|	margin-top: 5px;
	|	margin-bottom: 5px'
	
	|}
	
	|.message-data {
	|	margin-bottom: 5px;
	|}
	
	|.message-data-time {
	|	color: #a8aab1;
	|	padding-left: 6px;
	|	font-size: 12px;
	|}
	
	|.message-data-name {
	|	font-size: 13px;
	|}
	
	|.message {
	|	/* color: #282242; */
	|	padding: 5px 10px 1px;
	|	/* line-height: 26px; */
	|	font-size: 16px;
	|	margin-bottom: 10px;
	|	/* width: 97%; */
	|	/* border: #333 solid 1px; */
	
	|}
	
	|.my-message {
	|	background: #efece9;
	|	/* margin-right: 10px; */
	|	margin-left: 55px;
	|}
	
	|.other-message {
	|	background: #eceae0;
	|	margin-right: 55px;
	|	/*margin-left: 5%;*/
	|	/* float: right; */
	|	/* width: 80%; */
	|}
	
	|.align-right {
	|	text-align: right;
	|}
	
	|.technical-description {
	|	background: #fffdf6;
	|	padding: 5px;
	|	margin-bottom: 10px;
	|}
	
	|.technical-description h1,
	|.technical-description h2,
	|.technical-description h3,
	|.technical-description h4 {
	|	letter-spacing: 1px;
	|	width: 100%;
	|	position: relative;
	|	display: inline-block;
	|	color: #393c3d;
	|	text-align: left;
	|	padding-bottom: 5px;
	|	border-bottom: 2px solid #393c3d;
	|}
	
	|.technical-description h5 {
	|	letter-spacing: 1px;
	|	width: 50%;
	|	position: relative;
	|	display: inline-block;
	|	color: #393c3d;
	|	text-align: left;
	|	padding-bottom: 5px;
	|	border-bottom: 2px solid #393c3d;
	|}
	
	|.technical-description h1,
	|.technical-description h2,
	|.technical-description h3,
	|.technical-description h4:after {
	|	content: '';
	|	position: absolute;
	|	bottom: -6px;
	|	left: 0;
	|	width: 30%;
	|	height: 4px;
	|	background: #393c3d;
	|}
	
	|.task_list {
	|	/* border: #333 2px solid; */
	|	/* background: #F8E1DB; */
	|	margin: 10px;
	|	padding: 5px;
	|	/* width: 75%; */
	|}
	
	|.task_list input {
	|	height: 20px;
	|}
	
	|.task_list p {
	|	font-size: 14px;
	|}
	
	|.stage {
	|	margin-left: 5px;
	|	padding-left: 10px;
	|}
	
	|.avatar {
	|	width: 40px;
	|	height: 50px;
	|	float: left;
	|	text-align: center;
	|}
	
	|.avatar img {
	|	width: auto;
	|	height: 97%;
	|}
	
	|.avatar_right{
	
	|	width: 40px;
	|	height: 50px;
	|	float: right;
	|	text-align: center;
	|}
	
	|.avatar_right img {
	|	width: auto;
	|	height: 97%;
	|}
	
	|		#header {
	|	height: 40px;
	|	padding-left: 15px;
	|	padding-bottom: 5px;
	|	padding-top: 10px;
	|	background-color: #494949;
	|	color: #ece8d9;
	|	font-size: large;
	|}
	|#header p{
	|	font-size: 30px;
	|}
	|#wrapper {
	|	background-color: #faf6e9;
	|}
	|#menu {
	|	float: left;
	|	width: 300px;
	|}
	|#header_menu{
	|	margin-top: 10px;
	|	margin-left: 10px;			
	|	border: none;	
	|}
	|#listen_menu{
	|	list-style-type: none;
	|	margin-left: 10px;
	|	
	|}
	|#main {
	|	background-color: #fffdf6;
	|	border-left: 1px solid #ccc;
	|	margin-left: 300px;
	|	padding: 10px;
	|}
	
	|#history {
	|	margin-top: 15px;	
	|}

	|.article {
	|	margin-top: 10px;
	|	margin-bottom: 10px;
	|	border-bottom: 1px solid #494949;
	|}

	|.article h1,
	|h2,
	|h3,
	|h4,
	|h5 {
	|	margin-top: 2px;
	|	color: #494949;
	|}

	|.date_article {
	|	font-size: 11px;
	|	color: rgb(175, 171, 171);
	|}

	|.date_article p {
	|	margin-bottom: 2px;
	|}
	
	|</style>
	|</head>
	|<body>";
	
	Возврат ШапкаТекстаHtlm;
	
КонецФункции // ШапкаHtmlТекста()

Функция ПодвалHtmlТекста()
	
	ПодвалТекстHtml	= "
	|</body>
	|</html>";
	
	Возврат ПодвалТекстHtml;
	
КонецФункции // ПодвалHtmlТекста()

Функция ЗаголовокСообщения(Автор, ДатаСообщения, НомерСообщения, СписокКартинок =  Неопределено)
	
	АватаркаПользователя = АдресФайлаКартинки(СписокКартинок, Автор);
	ИконкаПросмотра = АдресФайлаКартинки(СписокКартинок, "Иконка_ПросмотраСообщения");
	
	Если Автор = ПараметрыСеанса.ТекущийПользователь Тогда
		
		ИконкаРедактор = АдресФайлаКартинки(СписокКартинок, "Иконка_РедакторСообщения");
		
		ТекстЗаголовка = 
		"<div class='message-data'>
		
		|<span class='message-data-time'>" + Формат(ДатаСообщения, "ДФ='dd.MM.yy ЧЧ:мм'") + "</span> &nbsp; &nbsp;
		|<span class='message-data-name'><a href='" + НомерСообщения + "'>" + Автор 
		+ " <img src='" + ИконкаРедактор + "' style='width:14px; height:14px; border: 0px;'>" + "</a> " + "</span>"
		+ "<a name='OpenForm' href='" + НомерСообщения + "'>"
		+ " <img src='" + ИконкаПросмотра + "' style='width:14px; height:14px; border: 0px;'>" 
		+ "</a> "
		+ "</div>
		|<div class='avatar'>
		|	<img src='" + АватаркаПользователя + "'>
		|</div>
		|";	
		
	Иначе
		
		ТекстЗаголовка = 
		"<div class='message-data align-right'>"
		+ "<a name='OpenForm' href='" + НомерСообщения + "'>"
		+ " <img src='" + ИконкаПросмотра + "' style='width:14px; height:14px; border: 0px;'>" 
		+ "</a> "
		+ "<span class='message-data-time'>" + Формат(ДатаСообщения, "ДФ='dd.MM.yy ЧЧ:мм'") + "</span> &nbsp; &nbsp;
		|<span class='message-data-name'>" + Автор + "</span>
		|</div>
		| <div class='avatar_right'>
		|	<img src='" + АватаркаПользователя + "'>
		|</div>
		|";	
		
	КонецЕсли; 
	
	Возврат ТекстЗаголовка;
	
КонецФункции // ЗаголовокСообщения()

Функция СодержаниеСообщения(ТекстСообщения, СписокКартинок, КомпактныйРежим)
	
	Возврат СконвертироватьТекстМаркдаунВHtml(ТекстСообщения, СписокКартинок, Неопределено, КомпактныйРежим);
	
КонецФункции // СодержаниеСообщения()

Функция СконвертироватьТекстМаркдаунВHtml(Знач Текст, СписокКартинок, Расшифровки, КомпактныйРежим)
	
	Конвертер = КонвертерТекста(Текст, СписокКартинок, Расшифровки, КомпактныйРежим);
	
	СконвертироватьБлокиТекстаВHtml(Конвертер);
	
	ТекстMarkdownToHtml = Символ(10) + ТекущийТег(Конвертер.СтекТегов).Содержание + Символ(10);
	
	Возврат ТекстMarkdownToHtml;
	
КонецФункции // СконвертироватьТекстМаркдаунВHtml()

Функция КонвертерТекста(Текст, СписокКартинок, Расшифровки, КомпактныйРежим)
	
	Конвертер = Новый Структура("ИсходныйТекст, СписокКартинок, СтекТегов, 
	|КомпактныйРежим, УровеньРазмещенияСписка,
	|ОбрабатываемыйТекст, НачалоНовойСтроки, ПоследняяСтрокаБлока, 
	|ТекущаяСтрока, КонецПрограммногоКода, ДополнительныеСвойства,
	|СписокКлассов, Расшифровки");
	
	Конвертер.ИсходныйТекст = Текст;
	Конвертер.КомпактныйРежим = КомпактныйРежим;
	Конвертер.СтекТегов 	= Новый Массив();
	Конвертер.УровеньРазмещенияСписка = 1;
	Если СписокКартинок = Неопределено Тогда
		Конвертер.СписокКартинок = Новый СписокЗначений();
	Иначе
		Конвертер.СписокКартинок = СписокКартинок;
	КонецЕсли; 
	Конвертер.ДополнительныеСвойства = Новый Структура();
	
	Конвертер.СписокКлассов = СписокКлассовОбъектов();
	
	Конвертер.Расшифровки = Расшифровки;
	
	// Открываем стек тегов
	ОткрытьТегHtml(Конвертер, "body");	
	
	Возврат Конвертер;
	
КонецФункции // КонвертерТекста()

Функция СписокКлассовОбъектов()
	
	СписокКлассов = Новый СписокЗначений();
	
	// Общие
	СписокКлассов.Добавить("подсистема.", "Подсистема");
	СписокКлассов.Добавить("общийМодуль.", "ОбщийМодуль");	
	СписокКлассов.Добавить("параметрСеанса.", "ПараметрСеанса");
	СписокКлассов.Добавить("роль.", "Роль");
	СписокКлассов.Добавить("общийреквизит.", "ОбщийРеквизит");
	СписокКлассов.Добавить("планобмена.", "ПланОбмена");
	СписокКлассов.Добавить("критерийотбора.", "КритерийОтбора");
	СписокКлассов.Добавить("подписканасобытие.", "ПодпискаНаСобытие");
	СписокКлассов.Добавить("регламентноезадание.", "РегламентноеЗадание");
	СписокКлассов.Добавить("функциональнаяопция.", "ФункциональнаяОпция");
	СписокКлассов.Добавить("параметрфункциональнойопции.", "ПараметрФункциональнойОпции");
	СписокКлассов.Добавить("хранилищенастроек.", "ХранилищеНастроек");
	СписокКлассов.Добавить("общаяформа.", "ОбщаяФорма");
	СписокКлассов.Добавить("общаякоманда.", "ОбщаяКоманда");
	СписокКлассов.Добавить("группакоманд.", "ГруппаКоманд");
	СписокКлассов.Добавить("общиймакет.", "ОбщийМакет");
	СписокКлассов.Добавить("общаякартинка.", "ОбщаяКартинка");
	СписокКлассов.Добавить("пакетxdto.", "ПакетXDTO");
	СписокКлассов.Добавить("httpсервис.", "HTTPСервис");
	СписокКлассов.Добавить("webсервис.", "WebСервис");
	СписокКлассов.Добавить("wsсервис.", "WSСервис");
	СписокКлассов.Добавить("wsссылка.", "WSСсылка");
	СписокКлассов.Добавить("элементстиля.", "ЭлементСтиля");
	СписокКлассов.Добавить("язык.", "Язык");
	СписокКлассов.Добавить("интерфейс.", "Интерфейс");
	СписокКлассов.Добавить("стиль.", "Стиль");
	
	// Прикладные объекты
	СписокКлассов.Добавить("константа.", "Константа");
	СписокКлассов.Добавить("справочник.", "Справочник");
	СписокКлассов.Добавить("документ.", "Документ");
	СписокКлассов.Добавить("последовательность.", "Последовательность");
	СписокКлассов.Добавить("журналдокументов.", "ЖурналДокументов");
	СписокКлассов.Добавить("перечисление.", "Перечисление");
	СписокКлассов.Добавить("отчет.", "Отчет");
	СписокКлассов.Добавить("обработка.", "Обработка");
	СписокКлассов.Добавить("планвидовхарактеристик.", "ПланВидовХарактеристик");
	СписокКлассов.Добавить("плансчетов.", "ПланСчетов");
	СписокКлассов.Добавить("планвидоврасчета.", "ПланВидовРасчета");
	СписокКлассов.Добавить("регистрсведений.", "РегистрСведений");
	СписокКлассов.Добавить("регистрнакопления.", "РегистрНакопления");
	СписокКлассов.Добавить("регистрбухгалтерии.", "РегистрБухгалтерии");
	СписокКлассов.Добавить("регистррасчета.", "РегистрРасчета");
	СписокКлассов.Добавить("бизнеспроцесс.", "БизнесПроцесс");
	СписокКлассов.Добавить("задача.", "Задача");
	СписокКлассов.Добавить("внешнийисточникданных.", "ВнешнийИсточникДанных");
	
	// Дополнительные классы
	СписокКлассов.Добавить("видрасчета.", "ВидРасчета");
	СписокКлассов.Добавить("видсубконто.", "ВидСубконто");
	СписокКлассов.Добавить("внешнийотчет.", "ВнешнийОтчет");
	СписокКлассов.Добавить("внешняяобработка.", "ВнешняяОбработка");
	СписокКлассов.Добавить("точкамаршрутабизнеспроцесса.", "ТочкаМаршрутаБизнесПроцесса");
	СписокКлассов.Добавить("уникальныйидентификатор.", "УникальныйИдентификатор");
	
	// Сокращенные варианты
	СписокКлассов.Добавить("конст.", "Константа");
	СписокКлассов.Добавить("спр.", "Справочник");
	СписокКлассов.Добавить("ждок.", "ЖурналДокументов");
	СписокКлассов.Добавить("док.", "Документ");
	СписокКлассов.Добавить("пер.", "Перечисление");
	СписокКлассов.Добавить("отч.", "Отчет");
	СписокКлассов.Добавить("обр.", "Обработка");
	СписокКлассов.Добавить("вотч.", "ВнешнийОтчет");
	СписокКлассов.Добавить("вобр.", "ВнешнаяОбработка");
	СписокКлассов.Добавить("пвх.", "ПланВидовХарактеристик");
	СписокКлассов.Добавить("псч.", "ПланСчетов");
	СписокКлассов.Добавить("регсвед.", "РегистрСведений");
	СписокКлассов.Добавить("регс.", "РегистрСведений");
	СписокКлассов.Добавить("регнак.", "РегистрНакопления");
	СписокКлассов.Добавить("регн.", "РегистрНакопления");
	СписокКлассов.Добавить("регб.", "РегистрБухгалтерии");
	
	Возврат СписокКлассов;
	
КонецФункции // СписокКлассовОбъектов()

// Блоками считаются набор текста разделенных пустой строкой
Процедура СконвертироватьБлокиТекстаВHtml(Конвертер)
	
	СтруктураБлоков = СтруктураБлоковТекста(Конвертер.ИсходныйТекст);
	Для Каждого ТекущийБлок Из СтруктураБлоков Цикл
		
		Если Конвертер.СтекТегов.Количество() = 1 Тогда
			Конвертер.ОбрабатываемыйТекст = ТекущийБлок.Содержание;
		Иначе
			Конвертер.ОбрабатываемыйТекст = Конвертер.ОбрабатываемыйТекст + ТекущийБлок.Содержание;
		КонецЕсли; 
		
		//Если ЭтоПустаяСтрока(ТекущийБлок.Содержание) Тогда
		//	
		//	Если ТекущийТег(Конвертер.СтекТегов).Имя = "pre" Тогда
		//		СконвертироватьБлокТекста(Конвертер, ТекущийБлок.Содержание);
		//	КонецЕсли; 
		//	
		//	Продолжить;
		//	
		//КонецЕсли; 
		
		// Последовательно перебираем строки блока
		НомерСтрокиБлока = 1;
		КоличествоСтрок = ТекущийБлок.Структура.Количество();
		Конвертер.ПоследняяСтрокаБлока = Ложь;
		
		Для Каждого ТекущаяСтрока Из ТекущийБлок.Структура Цикл
			
			Конвертер.НачалоНовойСтроки = Истина;
			Конвертер.ТекущаяСтрока = ТекущаяСтрока;
			Конвертер.КонецПрограммногоКода = Ложь;
			
			Если НомерСтрокиБлока = КоличествоСтрок Тогда
				Конвертер.ПоследняяСтрокаБлока = Истина;
			КонецЕсли; 
			
			Если СтрокаСодержитМаркерыТаблицы(ТекущаяСтрока) Тогда
				ВыделитьМаркерыТаблицы(ТекущаяСтрока);
			КонецЕсли; 
			
			СтруктураСтроки = РазложитьСтрокуВМассивПодстрок(ТекущаяСтрока, " ");
			
			// Добавляем в состав сочитание обозначающее окончание строки, если не последня строка блока
			Если ПоследниеСимволыСтроки(ТекущаяСтрока, 3) = "  " + Символ(10) 
				Или ПоследниеСимволыСтроки(ТекущаяСтрока, 2) = "	" + Символ(10) Тогда
				
				СтруктураСтроки.Добавить("<br>");
				
			КонецЕсли; 
			СтруктураСтроки.Добавить("%КСТ%");	
			
			Для Каждого Подстрока Из СтруктураСтроки Цикл
				
				Если (ЭтоСлужебныйСимвол(ПервыеСимволыСтроки(Подстрока, 1))Или ЭтоСлужебныйСимвол(ПоследниеСимволыСтроки(Подстрока, 1))) 
					И Не СтрДлина(Подстрока) = 1 И Не ПервыеСимволыСтроки(Подстрока, 6) = "ИДРис="
					И Не ПервыеСимволыСтроки(Подстрока, 2) = "!h"
					И Не СтроковоеПредставлениеЧисла(Подстрока) Тогда
					
					ОтделитьСлужебныеСимволыОтМаркерованногоТекста(Конвертер, Подстрока);
					
				Иначе
					СконвертироватьБлокТекста(Конвертер, Подстрока);
				КонецЕсли; 
				
				Конвертер.НачалоНовойСтроки = Ложь;
				
			КонецЦикла;
			
			НомерСтрокиБлока = НомерСтрокиБлока + 1;
			
		КонецЦикла; 
		
		// Закрываем блок если возможно
		ЗакрытьБлокТекстаHtml(Конвертер);
		
		// Возвращаем список на 1 уровень
		Конвертер.УровеньРазмещенияСписка = 1;
		
	КонецЦикла; 
	
	// Закрываем все блоки последовательно
	Пока Истина Цикл
		
		ТекущийТег = ТекущийТег(Конвертер.СтекТегов);
		
		Если ТекущийТег.Имя = "body" Тогда
			Прервать;
		КонецЕсли; 
		
		ЗакрытьТегHtm(Конвертер, ТекущийТег);
		
	КонецЦикла; 
	
КонецПроцедуры // СконвертироватьБлокиТекстаВHtml()

Процедура ОтделитьСлужебныеСимволыОтМаркерованногоТекста(Конвертер, Подстрока)
	
	Если ЭтоСлужебныйСимвол(ПервыеСимволыСтроки(Подстрока, 1))И ЭтоСлужебныйСимвол(ПоследниеСимволыСтроки(Подстрока, 1)) Тогда
		
		СконвертироватьБлокТекста(Конвертер, ПервыеСимволыСтроки(Подстрока, 1));
		СконвертироватьБлокТекста(Конвертер, Сред(Подстрока, 2, СтрДлина(Подстрока) - 2), "");
		СконвертироватьБлокТекста(Конвертер, ПоследниеСимволыСтроки(Подстрока, 1), "");
		
	ИначеЕсли ЭтоСлужебныйСимвол(ПервыеСимволыСтроки(Подстрока, 1)) Тогда	
		
		СконвертироватьБлокТекста(Конвертер, ПервыеСимволыСтроки(Подстрока, 1));
		СконвертироватьБлокТекста(Конвертер, Прав(Подстрока, СтрДлина(Подстрока) - 1), "");
		
	ИначеЕсли ЭтоСлужебныйСимвол(ПоследниеСимволыСтроки(Подстрока, 1)) Тогда	
		
		СконвертироватьБлокТекста(Конвертер, Лев(Подстрока, СтрДлина(Подстрока) - 1));
		СконвертироватьБлокТекста(Конвертер, ПоследниеСимволыСтроки(Подстрока, 1), "");
		
	КонецЕсли;
	
КонецПроцедуры // ОтделитьСлужебныеСимволыОтМаркерованногоТекста()

Процедура СконвертироватьБлокТекста(Конвертер, Подстрока, РазделительПодстрок = " ")
	
	//НачалоБлокаПрограммногоКода = Ложь;
	
	ТекущийТег = ТекущийТег(Конвертер.СтекТегов); 
	
	// Открываем теги блока
	Если ПервыеСимволыСтроки(Подстрока, 1) = "\" Тогда
		
		Если ТекущийТег.Имя = "body" Или ТекущийТег.Имя = "div" Тогда
			ТекущийТег = ОткрытьТегHtml(Конвертер, "p", Символ(10));
		КонецЕсли; 
		
		ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, РазделительПодстрок);
		Возврат;
	
	ИначеЕсли ПервыеСимволыСтроки(Подстрока, 2) = "**" Или ПоследниеСимволыСтроки(Подстрока, 2) = "**" Тогда
		
		// Жирный шрифт
		ИсходнаяПодстрока = Подстрока;
		МаркерФорматирования = УдалитьМаркерыИзСтроки(Подстрока, "**");
		
		// УстановитьСтроковыйМаркерВыделенияТекста(Подстрока, "**");
		Если ТегОткрыт(Конвертер, "strong") И ПоследниеСимволыСтроки(ИсходнаяПодстрока, 2) = "**" Тогда
			
			// Закрываем тег
			ЗакрытьТегВыделенияТекста(Конвертер, "strong", МаркерФорматирования, РазделительПодстрок);
			
		ИначеЕсли ПервыеСимволыСтроки(ИсходнаяПодстрока, 2) = "**" Тогда
			
			// Открываем тег
			ТекущийТег = ОткрытьТегHtml(Конвертер, "strong", РазделительПодстрок);
			ЗаполнитьСодержаниеТегаHtml(ТекущийТег, МаркерФорматирования, "");
			
		КонецЕсли; 
		
		// Повторно отправляем текст на конвертация пока не заменим все маркеры выделения
		Если Не ПустаяСтрока(Подстрока) Тогда
			СконвертироватьБлокТекста(Конвертер, Подстрока, "");
		КонецЕсли; 
		
		Возврат;
		
	ИначеЕсли ПервыеСимволыСтроки(Подстрока, 1) = "*" Или ПоследниеСимволыСтроки(Подстрока, 1) = "*" 
		И Не ПоследниеСимволыСтроки(Подстрока, 2) = "\*" Тогда
		
			// Наклонный шрифт
		ИсходнаяПодстрока = Подстрока;
		МаркерФорматирования = УдалитьМаркерыИзСтроки(Подстрока, "*");
		
		// УстановитьСтроковыйМаркерВыделенияТекста(Подстрока, "**");
		Если ТегОткрыт(Конвертер, "em") И ПоследниеСимволыСтроки(ИсходнаяПодстрока, 1) = "*" Тогда
			
			// Закрываем тег
			ЗакрытьТегВыделенияТекста(Конвертер, "em", МаркерФорматирования);
			
		ИначеЕсли ПервыеСимволыСтроки(ИсходнаяПодстрока, 1) = "*" Тогда
			
			// Открываем тег
			ТекущийТег = ОткрытьТегHtml(Конвертер, "em", РазделительПодстрок);
			ЗаполнитьСодержаниеТегаHtml(ТекущийТег, МаркерФорматирования, "");
			
		КонецЕсли; 
		
		// Повторно отправляем текст на конвертация пока не заменим все маркеры выделения
		Если Не ПустаяСтрока(Подстрока) Тогда
			СконвертироватьБлокТекста(Конвертер, Подстрока, "");
		КонецЕсли; 
		
		Возврат; 
	
	ИначеЕсли ПервыеСимволыСтроки(Подстрока, 2) = "//" 
		Или (ПоследниеСимволыСтроки(Подстрока, 2) = "//" И ТегОткрыт(Конвертер, "em")) Тогда
			
		// Наклонный шрифт
		ИсходнаяПодстрока = Подстрока;
		МаркерФорматирования = УдалитьМаркерыИзСтроки(Подстрока, "//");
		
		// УстановитьСтроковыйМаркерВыделенияТекста(Подстрока, "**");
		Если ТегОткрыт(Конвертер, "em") И ПоследниеСимволыСтроки(ИсходнаяПодстрока, 2) = "//" Тогда
			
			// Закрываем тег
			ЗакрытьТегВыделенияТекста(Конвертер, "em", МаркерФорматирования);
			
		ИначеЕсли ПервыеСимволыСтроки(ИсходнаяПодстрока, 2) = "//" Тогда
			
			// Открываем тег
			ТекущийТег = ОткрытьТегHtml(Конвертер, "em", РазделительПодстрок);
			ЗаполнитьСодержаниеТегаHtml(ТекущийТег, МаркерФорматирования, "");
			
		КонецЕсли; 
		
		// Повторно отправляем текст на конвертация пока не заменим все маркеры выделения
		Если Не ПустаяСтрока(Подстрока) Тогда
			СконвертироватьБлокТекста(Конвертер, Подстрока, "");
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СтрокаСодержитМаркерВыделенияТекста(Подстрока, "__") Тогда
		
		// Подчеркнутый шрифт
		ИсходнаяПодстрока = Подстрока;
		МаркерФорматирования = УдалитьМаркерыИзСтроки(Подстрока, "__");
		
		// УстановитьСтроковыйМаркерВыделенияТекста(Подстрока, "**");
		Если ТегОткрыт(Конвертер, "u") И ПоследниеСимволыСтроки(ИсходнаяПодстрока, 2) = "__" Тогда
			
			// Закрываем тег
			ЗакрытьТегВыделенияТекста(Конвертер, "u", МаркерФорматирования);
			
		ИначеЕсли ПервыеСимволыСтроки(ИсходнаяПодстрока, 2) = "__" Тогда
			
			// Открываем тег
			ТекущийТег = ОткрытьТегHtml(Конвертер, "u", РазделительПодстрок);
			ЗаполнитьСодержаниеТегаHtml(ТекущийТег, МаркерФорматирования, "");
			
		КонецЕсли; 
		
		// Повторно отправляем текст на конвертация пока не заменим все маркеры выделения
		Если Не ПустаяСтрока(Подстрока) Тогда
			СконвертироватьБлокТекста(Конвертер, Подстрока, "");
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СтрокаСодержитМаркерВыделенияТекста(Подстрока, "--") Тогда
		
		// Зачеркнутый шрифт
		ИсходнаяПодстрока = Подстрока;
		МаркерФорматирования = УдалитьМаркерыИзСтроки(Подстрока, "--");
		
		// УстановитьСтроковыйМаркерВыделенияТекста(Подстрока, "**");
		Если ТегОткрыт(Конвертер, "del") И ПоследниеСимволыСтроки(ИсходнаяПодстрока, 2) = "--" Тогда
			
			// Закрываем тег
			ЗакрытьТегВыделенияТекста(Конвертер, "del", МаркерФорматирования);
			
		ИначеЕсли ПервыеСимволыСтроки(ИсходнаяПодстрока, 2) = "--" Тогда
			
			// Открываем тег
			ТекущийТег = ОткрытьТегHtml(Конвертер, "del", РазделительПодстрок);
			ЗаполнитьСодержаниеТегаHtml(ТекущийТег, МаркерФорматирования, "");
			
		КонецЕсли; 
		
		// Повторно отправляем текст на конвертация пока не заменим все маркеры выделения
		Если Не ПустаяСтрока(Подстрока) Тогда
			СконвертироватьБлокТекста(Конвертер, Подстрока, "");
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СтрокаСодержитМаркерВыделенияТекста(Подстрока, "==") Тогда
		
		// Зачеркнутый шрифт
		//ТекущийТег = ОткрытьТегHtml(Конвертер, "del", " ");
		//УстановитьСтроковыйМаркерВыделенияТекста(Подстрока, "--");
		//СконвертироватьБлокТекста(Конвертер, Подстрока);
		//
		СтрокаСТегом = УдалитьМаркерыИзСтроки(Подстрока, "==");
		
		// УстановитьСтроковыйМаркерВыделенияТекста(Подстрока, "**");
		Если ТегОткрыт(Конвертер, "formula") Тогда
			
			// Закрываем тег
			ЗакрытьТегВыделенияТекста(Конвертер, "formula", СтрокаСТегом);
			
		Иначе
			
			// Открываем тег
			ТекущийТег = ОткрытьТегHtml(Конвертер, "formula", " ");
			ЗаполнитьСодержаниеТегаHtml(ТекущийТег, СтрокаСТегом, "");
			
		КонецЕсли; 
		
		Если Не ПустаяСтрока(Подстрока) Тогда
			СконвертироватьБлокТекста(Конвертер, Подстрока, "");
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СтрокаСодержитНомерЭлектронногоДокумента(Подстрока) Тогда
		
		ТекущийТег = ОткрытьТегHtml(Конвертер, "a", " ",,"СсылкаНаДокумент");	
		ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, "");
		ЗакрытьТегHtm(Конвертер, ТекущийТег);
		
	ИначеЕсли ПервыеСимволыСтроки(Подстрока, 2) = "-)" Или ПоследниеСимволыСтроки(Подстрока, 2) = "-)" Тогда
		
		Если ПоследниеСимволыСтроки(Подстрока, 2) = "-)" И ТекущийТег.Имя = "a" Тогда
			ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, "");
			ЗакрытьТегHtm(Конвертер, ТекущийТег);
		ИначеЕсли ПервыеСимволыСтроки(Подстрока, 2) = "-)" Тогда
			ТекущийТег = ОткрытьТегHtml(Конвертер, "a", " ");
			Если ПоследниеСимволыСтроки(Подстрока, 2) = "-)" Тогда
				
				ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, РазделительПодстрок);
				ЗакрытьТегHtm(Конвертер, ТекущийТег);
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПервыеСимволыСтроки(Подстрока, 2) = "@{" И ПоследниеСимволыСтроки(Подстрока, 1) = "}" Тогда
		
		ТекущийТег = ОткрытьТегHtml(Конвертер, "mailChat", " ");	
		ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, "");
		ЗакрытьТегHtm(Конвертер, ТекущийТег);

	ИначеЕсли ПервыеСимволыСтроки(Подстрока, 2) = "=)" Тогда
		
		// Якорь
		ТекущийТег = ОткрытьТегHtml(Конвертер, "a", " ", "name='" + СтрЗаменить(Подстрока, "=)", "") + "'", "Якорь");
		ЗакрытьТегHtm(Конвертер, ТекущийТег);
		Возврат;
		
	ИначеЕсли (ПервыеСимволыСтроки(Подстрока, 7) = "Форма=[" Или ПервыеСимволыСтроки(Подстрока, 7) = "Форма=Х")
		Или (ПервыеСимволыСтроки(Подстрока, 14) = "ФормаОткрыта=[" Или ПервыеСимволыСтроки(Подстрока, 14) = "ФормаОткрыта=Х")
		Или ((ПоследниеСимволыСтроки(Подстрока, 1) = "]" Или ПоследниеСимволыСтроки(Подстрока, 1) = "Ъ") И ТекущийТег.Имя = "forma") Тогда
		
		Если ПервыеСимволыСтроки(Подстрока, 7) = "Форма=[" Или  ПервыеСимволыСтроки(Подстрока, 7) = "Форма=Х" Тогда
			ТекущийТег = ОткрытьТегHtml(Конвертер, "forma", " ");
		ИначеЕсли (ПервыеСимволыСтроки(Подстрока, 14) = "ФормаОткрыта=[" Или ПервыеСимволыСтроки(Подстрока, 14) = "ФормаОткрыта=Х") Тогда
			ТекущийТег = ОткрытьТегHtml(Конвертер, "forma", " ",, "ОткрытаяФорма");
		КонецЕсли; 
		
		Если ПоследниеСимволыСтроки(Подстрока, 1) = "]" Или ПоследниеСимволыСтроки(Подстрока, 1) = "Ъ" И ТекущийТег.Имя = "forma" Тогда
			
			ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, " ");
			ЗакрытьТегHtm(Конвертер, ТекущийТег);
			
		КонецЕсли;
		
	ИначеЕсли ПервыеСимволыСтроки(Подстрока, 2) = "~~" 
		Или ПервыеСимволыСтроки(Подстрока, 2) = "ЁЁ" Тогда
		
		// Вложенный блок
		Если Не ПервыеСимволыСтроки(Подстрока, 4) = "~~~~" 
			И Не ПервыеСимволыСтроки(Подстрока, 4) = "ЁЁЁЁ" Тогда
			
			ЗакрытьБлокТекстаHtml(Конвертер);
			ТекущийТег = ТекущийТег(Конвертер.СтекТегов); 
			
			Если ТекущийТег.Имя = "div" Тогда
				
				ЗакрытьТегHtm(Конвертер, ТекущийТег);
				
			КонецЕсли;
		КонецЕсли; 
		
		Если Найти(Подстрока, "Комментарий_Правый") > 0
			Или Найти(Подстрока, "Комм_Прав") > 0 Тогда
			ТекущийТег = ОткрытьТегHtml(Конвертер, "div", "", "class='message other-message float-right'"); 	
		ИначеЕсли Найти(Подстрока, "Комментарий") > 0 Или Найти(Подстрока, "Комм") > 0 Тогда
			ТекущийТег = ОткрытьТегHtml(Конвертер, "div", "", "class='message my-message'"); 	
		ИначеЕсли Найти(Подстрока, "ТехническоеОписание") > 0 Или Найти(Подстрока, "ТЗ") > 0 Тогда // Заменить на ТехническоеЗадание
			ТекущийТег = ОткрытьТегHtml(Конвертер, "div", "", "class='technical-description'"); 		
		ИначеЕсли Найти(Подстрока, "СписокЗадач") > 0 Или Найти(Подстрока, "СЗ") > 0 Тогда
			ТекущийТег = ОткрытьТегHtml(Конвертер, "div", "", "class='task_list'"); 
		ИначеЕсли Найти(Подстрока, "СообщенияОПереносеЗадачи") > 0 Тогда
			
			ОткрытьТегHtml(Конвертер, "div", "", "class='transfer_tasks'"); 
			АдресКартинки = АдресФайлаКартинки(Конвертер.СписокКартинок, "Иконка_ПереносСрокаЗадачиСообщениеЧата");
			ТекущийТег = ОткрытьТегHtml(Конвертер, "img", "", "src='" + АдресКартинки + "' style='width:24px; height:24px;'");
			
		ИначеЕсли Найти(Подстрока, "ХронологияСобытий") > 0 Тогда
			ТекущийТег = ОткрытьТегHtml(Конвертер, "div", "", "class='stage'"); 
		ИначеЕсли Найти(Подстрока, "РегистрацияЗадачи") > 0 Тогда
			
			ОткрытьТегHtml(Конвертер, "div", "", "class='stage'"); 
			
			АдресКартинки = АдресФайлаКартинки(Конвертер.СписокКартинок, "Иконка_ЗадачаЗарегистрирована");
			ТекущийТег = ОткрытьТегHtml(Конвертер, "img", "", "src='" + АдресКартинки + "' style='width:16px; height:16px;'");
			
		ИначеЕсли Найти(Подстрока, "НовыйЭтапаЗадачи") > 0 Тогда
			
			ОткрытьТегHtml(Конвертер, "div", "", "class='stage'"); 
			АдресКартинки = АдресФайлаКартинки(Конвертер.СписокКартинок, "Иконка_СменаЭтапаМаршрута");
			ТекущийТег = ОткрытьТегHtml(Конвертер, "img", "", "src='" + АдресКартинки + "' style='width:16px; height:16px;'");
			
		ИначеЕсли Найти(Подстрока, "НовыйИсполнительЗадачи") > 0 Тогда
			
			ОткрытьТегHtml(Конвертер, "div", "", "class='stage'"); 
			АдресКартинки = АдресФайлаКартинки(Конвертер.СписокКартинок, "Иконка_СменаИсполнителяЗадачи");
			ТекущийТег = ОткрытьТегHtml(Конвертер, "img", "", "src='" + АдресКартинки + "' style='width:24px; height:24px;'");
			
		ИначеЕсли Найти(Подстрока, "Инструкция") > 0 Тогда
			
			ОткрытьТегHtml(Конвертер, "div", "", "id='inst'"); 
			
		ИначеЕсли Найти(Подстрока, "Заголовок") > 0 Тогда
			
			Если Не Конвертер.КомпактныйРежим Тогда
				ТекущийТег = ОткрытьТегHtml(Конвертер, "div", "", "id='header'", "Заголовок"); 	
			КонецЕсли;
			
		ИначеЕсли Найти(Подстрока, "Содержание") > 0 Тогда
			
			Если Не Конвертер.КомпактныйРежим Тогда
				ОткрытьТегHtml(Конвертер, "div", "", "id='wrapper'", "Содержание"); 
				ТекущийТег = ОткрытьТегHtml(Конвертер, "div", "", "id='main'"); 
			КонецЕсли;
			
		ИначеЕсли Найти(Подстрока, "ИсторияИзмененияФункционала") > 0 Тогда
			
			ОткрытьТегHtml(Конвертер, "div", "", "id='history'");
			
		ИначеЕсли Найти(Подстрока, "РезюмеДата") > 0 Тогда
			
			ОткрытьТегHtml(Конвертер, "div", "", "class='date_article'");	
			
		ИначеЕсли Найти(Подстрока, "Резюме") > 0 Тогда
			
			ОткрытьТегHtml(Конвертер, "div", "", "class='article'");

		ИначеЕсли Не Подстрока = "ЁЁ" И Не Подстрока = "~~" Тогда
			ТекущийТег = ОткрытьТегHtml(Конвертер, "div");
		КонецЕсли; 
		
		Конвертер.ДополнительныеСвойства.Удалить("ТекущийПунктЗадачи");
		
		Возврат;
		
	ИначеЕсли Конвертер.НачалоНовойСтроки 
		И ПервыеСимволыСтроки(Подстрока, 1) = "Х" И ПоследниеСимволыСтроки(Подстрока, 1) = "Ъ" Тогда
		
		Если Конвертер.ДополнительныеСвойства.Свойство("ТекущийПунктЗадачи") Тогда
			Конвертер.ДополнительныеСвойства.ТекущийПунктЗадачи = 
			Конвертер.ДополнительныеСвойства.ТекущийПунктЗадачи + 1; 
		Иначе
			Конвертер.ДополнительныеСвойства.Вставить("ТекущийПунктЗадачи", 1)
		КонецЕсли;
		
		ТекущийТег = ОткрытьТегHtml(Конвертер, "input", "", "type='checkbox'"); 		
		ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, " ");
		ЗакрытьТегHtm(Конвертер, ТекущийТег);
		
		Если СтрДлина(Подстрока) > 2 Тогда
			ОткрытьТегHtml(Конвертер, "del", " ");
		КонецЕсли; 
		
		Возврат;
		
	ИначеЕсли ПервыеСимволыСтроки(Подстрока, 7) = "ИДРис=(" 
		Или ПоследниеСимволыСтроки(Подстрока, 1) = ")" И ТекущийТег.Имя = "img" Тогда
		
		Если ПервыеСимволыСтроки(Подстрока, 7) = "ИДРис=(" Тогда
			ТекущийТег = ОткрытьТегHtml(Конвертер, "img", " ");	
		КонецЕсли;
		
		Если ПоследниеСимволыСтроки(Подстрока, 1) = ")" Тогда
			ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, " ");
			ЗакрытьТегHtm(Конвертер, ТекущийТег);
		КонецЕсли; 
		
	ИначеЕсли ПервыеСимволыСтроки(Подстрока) = "!" Тогда
		
		// Таблица
		Если СтрокаСодержитМаркерыТаблицы(Конвертер.ТекущаяСтрока) Тогда
			
			Если Конвертер.НачалоНовойСтроки Тогда
				
				Если ТекущийТег.Имя = "body" Или ТекущийТег.Имя = "div" Тогда
					
					ОткрытьТегHtml(Конвертер, "table", "");
					
				КонецЕсли;
				
				ОткрытьТегHtml(Конвертер, "tr", "");
				
			Иначе
				
				Если ТекущийТег.Имя = "td" Или ТекущийТег.Имя = "th" Тогда
					
					// Закрываем предыдущую колонку
					ЗакрытьТегHtm(Конвертер, ТекущийТег); // <td>, <th>
					
				КонецЕсли; 	
				
			КонецЕсли; 
			
			Если ПервыеСимволыСтроки(Подстрока, 2) = "!h" Тогда
				ТекущийТег = ОткрытьТегHtml(Конвертер, "th");    
				Подстрока = Прав(Подстрока, СтрДлина(Подстрока) - 2);
			Иначе
				ТекущийТег = ОткрытьТегHtml(Конвертер, "td");    
				Подстрока = Прав(Подстрока, СтрДлина(Подстрока) - 1);
			КонецЕсли; 
			
		КонецЕсли;
		
	ИначеЕсли Конвертер.НачалоНовойСтроки И ПервыеСимволыСтроки(Конвертер.ТекущаяСтрока, 2) = "- " Тогда
		
		// Список
		ТекущийУровеньРазмещения = Найти(Конвертер.ТекущаяСтрока, "- ");
		
		Если ТекущийУровеньРазмещения > Конвертер.УровеньРазмещенияСписка Тогда
			
			// Создаем новый уровень иерархии
			ТекущийТег = ОткрытьТегHtml(Конвертер, "ul");
			
		ИначеЕсли ТекущийУровеньРазмещения < Конвертер.УровеньРазмещенияСписка Тогда
			
			// Закрываем уровень иерархии
			ЗакрытьТегHtm(Конвертер, ТекущийТег); // <li>
			ЗакрытьТегHtm(Конвертер, ТекущийТег); // <ul>
			
		КонецЕсли; 
		
		Конвертер.УровеньРазмещенияСписка = ТекущийУровеньРазмещения;
		
		Если ТекущийТег.Имя = "ul" Тогда
			
			// Добавляем новый пункт
			ТекущийТег = ОткрытьТегHtml(Конвертер, "li");
			
		ИначеЕсли ТекущийТег.Имя = "li" Тогда
			
			// Закрываем предыдущий пункт, добавляем новый
			ЗакрытьТегHtm(Конвертер, ТекущийТег);
			ТекущийТег = ОткрытьТегHtml(Конвертер, "li");
			
		Иначе
			
			// Создаем список, добавляем пункт
			ОткрытьТегHtml(Конвертер, "ul");
			ТекущийТег = ОткрытьТегHtml(Конвертер, "li");
			
		КонецЕсли; 
		
		УвеличитьУровеньИерархииТекста(Подстрока, ТекущийУровеньРазмещения);
		
	ИначеЕсли Не Подстрока = "." И Конвертер.НачалоНовойСтроки И СтроковоеПредставлениеЧисла(Подстрока) Тогда
		
		// Нумерованный список
		ТекущийУровеньРазмещения = ТекущийУровеньПунктаНумерованногоСписка(Конвертер.ТекущаяСтрока);
		
		Если ТекущийУровеньРазмещения > Конвертер.УровеньРазмещенияСписка Тогда
			
			// Создаем новый уровень иерархии
			ТекущийТег = ОткрытьТегHtml(Конвертер, "ol");
			
		ИначеЕсли ТекущийУровеньРазмещения < Конвертер.УровеньРазмещенияСписка Тогда
			
			// Закрываем уровень иерархии
			ЗакрытьТегHtm(Конвертер, ТекущийТег); // <li>
			ЗакрытьТегHtm(Конвертер, ТекущийТег); // <ol>
			
		КонецЕсли; 
		
		Конвертер.УровеньРазмещенияСписка = ТекущийУровеньРазмещения;
		
		Если ТекущийТег.Имя = "ol" Тогда
			
			// Добавляем новый пункт
			ТекущийТег = ОткрытьТегHtml(Конвертер, "li");
			
		ИначеЕсли ТекущийТег.Имя = "li" Тогда
			
			// Закрываем предыдущий пункт, добавляем новый
			ЗакрытьТегHtm(Конвертер, ТекущийТег);
			ТекущийТег = ОткрытьТегHtml(Конвертер, "li");
			
		Иначе
			
			// Создаем список, добавляем пункт
			ОткрытьТегHtml(Конвертер, "ol");
			ТекущийТег = ОткрытьТегHtml(Конвертер, "li");
			
		КонецЕсли;	
		
		// В нумерованном списке не выводим нумерацию
		Подстрока = "";
		
	ИначеЕсли ПервыеСимволыСтроки(Подстрока, 1) = "'" Или 
		(ПоследниеСимволыСтроки(Подстрока, 1) = "'" И Не ПоследниеСимволыСтроки(Подстрока, 2) = "\'") Тогда
		
		// Программный код
		Если Не ТекущийТег.Имя = "pre" Тогда
			ТекущийТег = ОткрытьТегHtml(Конвертер, "pre", " ");
		Иначе
			ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, " ");
			ЗакрытьТегHtm(Конвертер, ТекущийТег);
		КонецЕсли; 
		
	ИначеЕсли Конвертер.НачалоНовойСтроки И ПервыеСимволыСтроки(Подстрока) = ">" Тогда
		
		// Цитата
		ТекущийТег = ОткрытьТегHtml(Конвертер, "blockquote", " ");
		
	ИначеЕсли Конвертер.НачалоНовойСтроки И ПервыеСимволыСтроки(Подстрока) = "#" Тогда
		
		// Заголовок
		ТекущийТег = ОткрытьТегHtml(Конвертер, "h", " ");
		
	ИначеЕсли Не ТекущийТег.Имя = "pre" И Не ТекущийТег.Имя = "forma"
		И ОписаниеОбъектаМетаданных(Конвертер, Подстрока) Тогда
		
		ТекущийТег = ОткрытьТегHtml(Конвертер, "meta", " ");
		ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, РазделительПодстрок);
		ЗакрытьТегHtm(Конвертер, ТекущийТег);
		
		Возврат;
		
	ИначеЕсли Подстрока = "%КСТ%" Тогда
		
		Подстрока = СтрЗаменить(Подстрока, "%КСТ%", "");
		
		// Обрабатываем конец строки
		Если (ТекущийТег.Имя = "td" Или ТекущийТег.Имя = "th") Тогда
			
			// Закрываем строку таблицы
			УдалитьТегHtmlИзСтека(Конвертер, ТекущийТег); // <td>, <th>
			ЗакрытьТегHtm(Конвертер, ТекущийТег(Конвертер.Стектегов)); // <tr>
			
			Возврат;
		ИначеЕсли ТекущийТег.Имя = "body" Тогда	
			
			Возврат;
			
		ИначеЕсли ТекущийТег.Имя = "p" И Конвертер.ПоследняяСтрокаБлока
			Тогда
			
			// В конце блока не вставляем тег <br>
			Подстрока = СтрЗаменить(Подстрока, "<br>",  Символ(10));
			ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, РазделительПодстрок);
			
		ИначеЕсли ТекущийТег.Имя = "h" Тогда
			
			ЗакрытьТегHtm(Конвертер, ТекущийТег);
			Возврат;
			
		ИначеЕсли ТекущийТег.Имя = "div" Тогда
			Возврат;
		ИначеЕсли ТекущийТег.Имя = "del" Тогда
			
			ЗакрытьТегHtm(Конвертер, ТекущийТег);
			ТекущийТег = ТекущийТег(Конвертер.СтекТегов);
			
		ИначеЕсли ТекущийТег.Имя = "img" Тогда
			
			ЗакрытьТегHtm(Конвертер, ТекущийТег);
			Возврат;
			
		КонецЕсли; 
		
	ИначеЕсли ТекущийТег.Имя = "body" Или ТекущийТег.Имя = "div" Тогда
		
		// Параграф
		ТекущийТег = ОткрытьТегHtml(Конвертер, "p", Символ(10));	 
		
	КонецЕсли; 
	
	// Заполняем содержание
	Если Не ПустаяСтрока(Подстрока) Тогда
		ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Подстрока, РазделительПодстрок);    
	КонецЕсли; 
	
КонецПроцедуры // СконвертироватьБлокТекста()

Функция СтруктураБлоковТекста(Текст)
	
	СтруктураБлоков = Новый Массив();
	
	ОбщаяДлинаБлоков = 0;
	ДлинаТекста = СтрДлина(Текст);
	
	Пока ОбщаяДлинаБлоков < ДлинаТекста Цикл
		
		ТекущийБлок = СледующийБлокТекста(Текст, ОбщаяДлинаБлоков + 1);
		ДлинаБлока  = СтрДлина(ТекущийБлок.Содержание);
		
		Если ДлинаБлока = 0 Тогда
			ДлинаБлока = 1;
		КонецЕсли; 
		
		ОбщаяДлинаБлоков = ОбщаяДлинаБлоков + ДлинаБлока;
		
		СтруктураБлоков.Добавить(ТекущийБлок);
		
	КонецЦикла; 
	
	Возврат СтруктураБлоков;
	
КонецФункции // СтруктураБлоковТекста()

Функция СледующийБлокТекста(Текст, НачалоБлока)
	
	БлокТекста = Новый Структура("Содержание, Структура");
	
	КонтекстБлока = Прав(Текст, СтрДлина(Текст) - НачалоБлока + 1);
	КонецТекущегоБлока = КонецТекущегоБлокаТекста(КонтекстБлока, 1); 
	
	БлокТекста.Содержание = Сред(Текст, НачалоБлока, КонецТекущегоБлока);
	БлокТекста.Структура  = СтруктураБлока(БлокТекста.Содержание);
	
	Возврат БлокТекста;
	
КонецФункции // СледующийБлокТекста()

Функция КонецТекущегоБлокаТекста(ТекстБлока, НачалоБлока)
	
	ДлинаБлока    = 0;
	
	//СтрокаБлока = СледующаяСтрокаБлокаТекста(Текст, НачалоБлока);
	СтрокаБлока = СледующаяСтрокаБлокаТекста(ТекстБлока, 1);
	Пока Не ЭтоПустаяСтрока(СтрокаБлока) Цикл
		
		ДлинаБлока  = ДлинаБлока + СтрДлина(СтрокаБлока);
		СтрокаБлока = СледующаяСтрокаБлокаТекста(ТекстБлока, ДлинаБлока + 1);
		
	КонецЦикла;
	
	Возврат ДлинаБлока;
	
КонецФункции // КонецТекущегоБлокаТекста(ТекстБлока, НачалоБлока)

Функция СтруктураБлока(БлокТекста)
	
	СтруктураБлока = Новый Массив();
	
	ДлинаБлока 		   = СтрДлина(БлокТекста);
	КоличествоСимволов = 0;
	КоличествоСтрок    = 0;
	
	Пока КоличествоСимволов < ДлинаБлока Цикл
		
		ТекущаяСтрока = СледующаяСтрокаБлокаТекста(БлокТекста, КоличествоСимволов + 1);
		СтруктураБлока.Добавить(ТекущаяСтрока);
		
		КоличествоСимволов = КоличествоСимволов + СтрДлина(ТекущаяСтрока);
		КоличествоСтрок    = КоличествоСтрок + 1;
		
	КонецЦикла;
	
	Возврат СтруктураБлока;
	
КонецФункции // СтруктураБлока()

Функция СледующаяСтрокаБлокаТекста(Текст, НачалоСтроки)
	
	БлокТекущейСтроки = Прав(Текст, СтрДлина(Текст) - НачалоСтроки + 1);
	ДлинаТекущегоБлока = СтрДлина(БлокТекущейСтроки);
	
	КонецТекущейСтроки = Найти(БлокТекущейСтроки, Символ(10));
	Если КонецТекущейСтроки = 0 Или КонецТекущейСтроки = ДлинаТекущегоБлока Тогда
		
		// Блок заканчивается в конце всего текста
		Возврат БлокТекущейСтроки;
		
	Иначе
		
		// Сообщить(Лев(ТекущийБлок, КонецТекущейСтроки));
		Возврат Лев(БлокТекущейСтроки, КонецТекущейСтроки);
		
	КонецЕсли;
	
КонецФункции // СледующаяСтрокаБлока()

Функция ЭтоПустаяСтрока(СтрокаТекста)
	
	Если ПустаяСтрока(СокрЛП(СтрокаТекста)) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЭтоПустаяСтрока()

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	
	Если Разделитель = " " Тогда
		Строка = СокрЛП(Строка);
		Пока Истина Цикл
			Поз = Найти(Строка,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Строка);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Строка,Поз-1));
			Строка = СокрЛ(Сред(Строка,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Строка,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Строка);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Строка,Поз-1));
			Строка = Сред(Строка,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

// Обработка тегов

// РазделительТегов - разделитель который будет отделать содержание текущий тега от предыдущего содержания
Функция ОткрытьТегHtml(Конвертер, ИмяТега, РазделительТегов = "", АтрибутыТега = "", ИмяБлока = "")
	
	СтекТегов = Конвертер.СтекТегов;
	
	// Теги выделения текста должны размещаться в параграфе
	Если СтекТегов.Количество() Тогда
		Если ТегОбрамляемыйПараграфом(ИмяТега) 
			И (ТекущийТег(СтекТегов).Имя = "body" Или ТекущийТег(СтекТегов).Имя = "div") Тогда
			ОткрытьТегHtml(Конвертер, "p", Символ(10));
		КонецЕсли;
	КонецЕсли; 
	
	СтекТегов.Вставить(0, Новый Структура("Имя, Содержание, РазделительТегов, АтрибутыТега, ИмяБлока", 
	ИмяТега, "", РазделительТегов, АтрибутыТега, ИмяБлока));
	
	Возврат ТекущийТег(СтекТегов);
	
КонецФункции // ОткрытьТегHtml()

Процедура ЗакрытьБлокТекстаHtml(Конвертер)
	
	ТекущийТег = ТекущийТег(Конвертер.СтекТегов);
	
	Если ТекущийТег.Имя = "body" Или  ТекущийТег.Имя = "div" Или ТекущийТег.Имя = "pre" Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьТегHtm(Конвертер, ТекущийТег);
	ЗакрытьБлокТекстаHtml(Конвертер);
	
КонецПроцедуры // ЗакрытьБлокТекстаHtml()

Процедура ЗакрытьТегВыделенияТекста(Конвертер, ИмяТега, Содержание, РазделительСодежанияТега = " ")
	
	Пока Истина Цикл
		
		ТекущийТег = ТекущийТег(Конвертер.СтекТегов);
		Если Не ИмяТега = ТекущийТег.Имя Тогда
			
			// Закрываем промежуточные теги 
			ЗакрытьТегHtm(Конвертер, ТекущийТег);
			
		Иначе
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Содержание, РазделительСодежанияТега);
	ЗакрытьТегHtm(Конвертер, ТекущийТег);
	
КонецПроцедуры // ЗакрытьТегВыделенияТекста()

Процедура ЗакрытьТегHtm(Конвертер, ТекущийТег)
	
	Если ТекущийТег.Имя = "div" Тогда
		
		ЗакрытьТег_Блок(Конвертер, ТекущийТег);
		
	ИначеЕсли ТекущийТег.Имя = "p" Тогда
		
		ЗакрытьТег_Параграфа(ТекущийТег);
		
	ИначеЕсли ТекущийТег.Имя = "table" Тогда
		
		ЗакрытьТег_Таблицыl(ТекущийТег);
		
	ИначеЕсли ТекущийТег.Имя = "tr" Тогда
		
		ЗакрытьТег_СтрокиТаблицы(ТекущийТег);
		
	ИначеЕсли ТекущийТег.Имя = "th" Или ТекущийТег.Имя = "td" Тогда
		
		ЗакрытьТег_КолокиТаблицы(ТекущийТег, ТекущийТег.Имя); 
		
	ИначеЕсли ТекущийТег.Имя = "ul" Тогда
		
		ЗакрытьТег_Списка(ТекущийТег);
		
	ИначеЕсли ТекущийТег.Имя = "ol" Тогда
		
		ЗакрытьТег_НумерованногоСписка(ТекущийТег);	
		
	ИначеЕсли ТекущийТег.Имя = "li" Тогда
		
		ЗакрытьТег_ПунктаСписка(ТекущийТег, ТегОткрыт(Конвертер, "ol"));	
		
	ИначеЕсли ТекущийТег.Имя = "pre" Тогда
		
		ЗакрытьТег_ПрограммногоКода(Конвертер, ТекущийТег);
		Конвертер.КонецПрограммногоКода = Истина;
		
	ИначеЕсли ТекущийТег.Имя = "blockquote" Тогда
		
		ЗакрытьТег_Цитаты(ТекущийТег); 
		
	ИначеЕсли ТекущийТег.Имя = "h" Тогда
		
		ЗакрытьТег_Заголовка(Конвертер, ТекущийТег);
		
	ИначеЕсли ТекущийТег.Имя = "strong" Тогда
		
		ЗакрытьТег_ЖирногоШрифта(ТекущийТег); 
		
	ИначеЕсли ТекущийТег.Имя = "em" Тогда
		
		ЗакрытьТег_НаклонногоШрифта(ТекущийТег);	
		
	ИначеЕсли ТекущийТег.Имя = "u" Тогда
		
		ЗакрытьТег_ПодчеркнутыйШрифт(ТекущийТег);	
		
	ИначеЕсли ТекущийТег.Имя = "del" Тогда
		
		ЗакрытьТег_ЗачеркнутогоШрифта(ТекущийТег);		
		
	ИначеЕсли ТекущийТег.Имя = "formula" Тогда
		
		ЗакрытьТег_Формула(ТекущийТег);		
		
	ИначеЕсли ТекущийТег.Имя = "meta" Тогда
		
		ЗакрытьТег_ОбъектаМетаданных(ТекущийТег);
		
	ИначеЕсли ТекущийТег.Имя = "img" Тогда
		
		ЗакрытьТег_Картинка(Конвертер, ТекущийТег);
		
	ИначеЕсли ТекущийТег.Имя = "a" Тогда
		
		ЗакрытьТег_Ссылка(ТекущийТег);
		
	ИначеЕсли ТекущийТег.Имя = "mailChat" Тогда
		
		ЗакрытьТег_ОтправкаСообщенияВЧат(Конвертер, ТекущийТег);
		
	ИначеЕсли ТекущийТег.Имя = "input" Тогда
		
		ЗакрытьТег_input(Конвертер, ТекущийТег);
		
	ИначеЕсли ТекущийТег.Имя = "forma" Тогда
		
		ЗакрытьТег_Форма(Конвертер, ТекущийТег);
		
	КонецЕсли; 
	
	УдалитьТегHtmlИзСтека(Конвертер, ТекущийТег);
	
КонецПроцедуры // ЗакрытьТегHtm()

// Процедура при удалении тега переносит содержание тега на более высокий уровень
Процедура УдалитьТегHtmlИзСтека(Конвертер, ТекущийТег)
	
	СтекТегов = Конвертер.СтекТегов;
	
	СодержаниеТега = ТекущийТег.Содержание;
	РазделительТегов = ТекущийТег.РазделительТегов;
	
	СтекТегов.Удалить(0);
	
	ЗаполнитьСодержаниеТегаHtml(ТекущийТег(СтекТегов), СодержаниеТега, РазделительТегов);
	
КонецПроцедуры // УдалитьТегHtmlИзСтека()

Функция ТекущийТег(СтекТегов)
	
	Возврат СтекТегов[0];
	
КонецФункции // ТекущийТег()

Процедура ЗаполнитьСодержаниеТегаHtml(ТекущийТег, Знач Текст, Разделитель)
	
	ТекущийТег.Содержание = ТекущийТег.Содержание 
		+ РазделительТекста(ТекущийТег.Содержание, Текст, Разделитель)
		+ ?(Не ТегСодержащийСсылку(ТекущийТег), СтрЗаменить(Текст, "\", ""), Текст);
	
КонецПроцедуры // ЗаполнитьСодержаниеТегаHtml()

Функция ТегОткрыт(Конвертер, ИмяТега)
	
	Для Каждого Тег Из Конвертер.СтекТегов Цикл
		
		Если Тег.Имя = ИмяТега Тогда
			Возврат Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции // ТегОткрыт()

Процедура ЗакрытьТег_Блок(Конвертер, ТекущийТег)
	
	СодержаниеБлока ="";
	
	Если Не Конвертер.КомпактныйРежим Тогда
		Если ТекущийТег.ИмяБлока = "Содержание" Тогда
			Если Конвертер.ДополнительныеСвойства.Свойство("Оглавление")
				И Конвертер.ДополнительныеСвойства.Оглавление.Количество() Тогда
				
				СодержаниеБлока = "<div id='menu'>";
				СодержаниеБлока = СодержаниеБлока + "<h4 id='header_menu'>Содержание</h4><ul id='listen_menu'>";
				
				Для Каждого ПунктМеню Из Конвертер.ДополнительныеСвойства.Оглавление Цикл
					СодержаниеБлока = СодержаниеБлока 
					+ "<li><a href='" + ПунктМеню.Значение + "' onClick=""return goTo('" + ПунктМеню.Значение + "')"">" + ПунктМеню.Представление +  "</a></li>";
				КонецЦикла;
				
				СодержаниеБлока = СодержаниеБлока + "</ul>";
				СодержаниеБлока = СодержаниеБлока + "</div>";	
				
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	ТекущийТег.Содержание = 
		"<div " + ТекущийТег.АтрибутыТега + ">"
		+ СодержаниеБлока
		+ Символ(10) + ТекущийТег.Содержание + "</div>" + Символ(10);
	
КонецПроцедуры // ЗакрытьТег_Блок()

Процедура ЗакрытьТег_Параграфа(ТекущийТег)
	
	ТекущийТег.Содержание = 
	"<p>" 
	+ Символ(10) + ТекущийТег.Содержание + "</p>" + Символ(10);
	
КонецПроцедуры // ЗакрытьТег_Параграфа()

Процедура ЗакрытьТег_Таблицыl(ТекущийТег)
	
	ТекущийТег.Содержание = "<table>" + Символ(10) + ТекущийТег.Содержание + "</table>" + Символ(10);	
	
КонецПроцедуры // ЗакрытьТег_Таблицыl()

Процедура ЗакрытьТег_СтрокиТаблицы(ТекущийТег)
	
	ТекущийТег.Содержание = СтрЗаменить(ТекущийТег.Содержание, "<br>", "");
	ТекущийТег.Содержание = " <tr>" + Символ(10) + ТекущийТег.Содержание + "</tr>" + Символ(10);	
	
КонецПроцедуры // ЗакрытьТег_СтрокиТаблицы()

Процедура ЗакрытьТег_КолокиТаблицы(ТекущийТег, ВидКолонки)
	
	Если ВидКолонки = "th" Тогда
		ТекущийТег.Содержание = "  <th>" + ТекущийТег.Содержание + "</th>";    
	Иначе
		ТекущийТег.Содержание = "  <td>" + ТекущийТег.Содержание + "</td>";    
	КонецЕсли; 
	
	ТекущийТег.Содержание = ТекущийТег.Содержание + Символ(10);
	
КонецПроцедуры // ЗакрытьТег_КолокиТаблицы()

Процедура ЗакрытьТег_Списка(ТекущийТег)
	
	ТекущийТег.Содержание = "<ul>" 
	+ Символ(10) + ТекущийТег.Содержание + "</ul>" + Символ(10);
	
КонецПроцедуры // ЗакрытьТег_Списка()

Процедура ЗакрытьТег_НумерованногоСписка(ТекущийТег)
	
	ТекущийТег.Содержание = "<ol>" + Символ(10) + ТекущийТег.Содержание + "</ol>" + Символ(10);
	
КонецПроцедуры // ЗакрытьТег_НумерованногоСписка()

Процедура ЗакрытьТег_ПунктаСписка(ТекущийТег, ПунктНумерованный)
	
	Если ПунктНумерованный Тогда
		Текущийтег.Содержание = "<li>" + Текущийтег.Содержание;    
	Иначе
		ЗаменитьМаркерНаТег(Текущийтег.Содержание, "-", "<li>");
	КонецЕсли; 
	
	// Последняя строка пункта не должна содерать <br>
	//ОкончаниеСтроки = Прав(ТекущийТег.Содержание, 6);
	ОкончаниеСтроки = Прав(ТекущийТег.Содержание, 4);
	Если Найти(ОкончаниеСтроки, "<br>") Тогда
		ТекущийТег.Содержание = Лев(ТекущийТег.Содержание, СтрДлина(ТекущийТег.Содержание) - 4);
	КонецЕсли; 
	
	ТекущийТег.Содержание = ТекущийТег.Содержание + "</li>" + Символ(10);
	
КонецПроцедуры // ЗакрытьТег_ПунктаСписка()

Процедура ЗакрытьТег_ПрограммногоКода(Конвертер, ТекущийТег)
	
	ТекущийТег.Содержание = СтрЗаменить(ТекущийТег.Содержание, " <br>", "");	
	
	// Чтобы сохранить структуру кода при выводе получаем исходный текст блока
	ИсходныйТекст = Конвертер.ОбрабатываемыйТекст;
	НачалоКода = Найти(ИсходныйТекст, "'");
	КонцовкаТекста = Прав(ИсходныйТекст, СтрДлина(ИсходныйТекст) - НачалоКода);
	КонецКода = Найти(КонцовкаТекста, "'"); 
	
	ТекущийТег.Содержание = Сред(ИсходныйТекст, НачалоКода, КонецКода + 1);
	
	ВыделитьТекстHtml(ТекущийТег.Содержание, "'", "<pre>", "</pre>");	
	
КонецПроцедуры // ЗакрытьТег_ПрограммногоКода()

Процедура ЗакрытьТег_Заголовка(Конвертер, ТекущийТег)
	
	Если Не Конвертер.ДополнительныеСвойства.Свойство("Оглавление") Тогда
		Конвертер.ДополнительныеСвойства.Вставить("Оглавление", Новый СписокЗначений());
	КонецЕсли; 
	
	Оглавление = Конвертер.ДополнительныеСвойства.Оглавление;
	
	ПунктОглавления = Оглавление.Количество() + 1;
	
	Если ПервыеСимволыСтроки(ТекущийТег.Содержание, 6) = "######" Тогда
		МаркерЗаголовка = "######";
	ИначеЕсли ПервыеСимволыСтроки(ТекущийТег.Содержание, 5) = "#####" Тогда
		МаркерЗаголовка = "#####";
	ИначеЕсли ПервыеСимволыСтроки(ТекущийТег.Содержание, 4) = "####" Тогда
		МаркерЗаголовка = "####";
	ИначеЕсли ПервыеСимволыСтроки(ТекущийТег.Содержание, 3) = "###" Тогда
		МаркерЗаголовка = "###";
	ИначеЕсли ПервыеСимволыСтроки(ТекущийТег.Содержание, 2) = "##" Тогда
		МаркерЗаголовка = "##";
	ИначеЕсли ПервыеСимволыСтроки(ТекущийТег.Содержание, 1) = "#" Тогда
		МаркерЗаголовка = "#";
	КонецЕсли; 
	
	РазмерЗаголовка = СтрДлина(МаркерЗаголовка);
	СодержаниеТега = ЗаменитьМаркерНаТег(ТекущийТег.Содержание, МаркерЗаголовка, "<h" + РазмерЗаголовка + " id='h" + ПунктОглавления + "'>");
	
	Заголовок = ТекущийТег.Содержание;
	ТекущийТег.Содержание = ТекущийТег.Содержание + "</h" + РазмерЗаголовка + ">" + Символ(10);
	
	Оглавление.Добавить("#h" + ПунктОглавления, СодержаниеТега);
	Конвертер.ДополнительныеСвойства.Оглавление = Оглавление;
	
	Возврат;
	
	Если ПервыеСимволыСтроки(ТекущийТег.Содержание, 6) = "######" Тогда
		МаркерЗаголовка = "######";
	ИначеЕсли ПервыеСимволыСтроки(ТекущийТег.Содержание, 5) = "#####" Тогда
		МаркерЗаголовка = "#####";
	ИначеЕсли ПервыеСимволыСтроки(ТекущийТег.Содержание, 4) = "####" Тогда
		МаркерЗаголовка = "####";
	ИначеЕсли ПервыеСимволыСтроки(ТекущийТег.Содержание, 3) = "###" Тогда
		МаркерЗаголовка = "###";
	ИначеЕсли ПервыеСимволыСтроки(ТекущийТег.Содержание, 2) = "##" Тогда
		МаркерЗаголовка = "##";
	ИначеЕсли ПервыеСимволыСтроки(ТекущийТег.Содержание, 1) = "#" Тогда
		МаркерЗаголовка = "#";
	КонецЕсли; 
	
	РазмерЗаголовка = СтрДлина(МаркерЗаголовка);
	ЗаменитьМаркерНаТег(ТекущийТег.Содержание, МаркерЗаголовка, "<h" + РазмерЗаголовка + ">");
	
	ТекущийТег.Содержание = ТекущийТег.Содержание + "</h" + РазмерЗаголовка + ">" + Символ(10);
	
КонецПроцедуры // ЗакрытьТег_Заголовка()

Процедура ЗакрытьТег_Цитаты(ТекущийТег)
	
	ЗаменитьМаркерНаТег(ТекущийТег.Содержание, ">", "<blockquote>");
	ТекущийТег.Содержание = ТекущийТег.Содержание + "</blockquote>" + Символ(10)
	
КонецПроцедуры // ЗакрытьТег_Цитаты()

Процедура ЗакрытьТег_ЖирногоШрифта(ТекущийТег)
	
	Если ЗакрытиеТеговВозможно(ТекущийТег, "**") Тогда
		ВыделитьТекстHtml(ТекущийТег.Содержание, "**", "<strong>", "</strong>");	    
	КонецЕсли; 
	
КонецПроцедуры // ЗакрытьТег_ЖирногоШрифта()

Процедура ЗакрытьТег_НаклонногоШрифта(ТекущийТег)
	
	Если ЗакрытиеТеговВозможно(ТекущийТег, "*") Тогда
		ВыделитьТекстHtml(ТекущийТег.Содержание,  "*", "<em>", "</em>");	
	ИначеЕсли ПервыеСимволыСтроки(ТекущийТег.Содержание, 2) = "//" 
		И ПоследниеСимволыСтроки(ТекущийТег.Содержание, 2) = "//" Тогда
		
		ТекущийТег.Содержание = "<em>" + Сред(ТекущийТег.Содержание, 3, СтрДлина(ТекущийТег.Содержание) - 4) + "</em>";
		
	КонецЕсли; 
	
КонецПроцедуры // ЗакрытьТег_НаклонногоШрифта()

Процедура ЗакрытьТег_ПодчеркнутыйШрифт(ТекущийТег)
	
	Если ЗакрытиеТеговВозможно(ТекущийТег, "__") Тогда
		ВыделитьТекстHtml(ТекущийТег.Содержание,  "__", "<u>", "</u>");	
	КонецЕсли;	
	
КонецПроцедуры // ЗакрытьТег_ПодчеркнутыйШрифт()

Процедура ЗакрытьТег_ЗачеркнутогоШрифта(ТекущийТег)
	
	Если ЗакрытиеТеговВозможно(ТекущийТег, "--") Тогда
		ВыделитьТекстHtml(ТекущийТег.Содержание,  "--", "<del>", "</del>");
	Иначе
		ТекущийТег.Содержание = "<del>" + ТекущийТег.Содержание + "</del>";
	КонецЕсли;
	
КонецПроцедуры // ЗакрытьТег_ЗачеркнутогоШрифта()

Процедура ЗакрытьТег_Формула(ТекущийТег)
	
	Если ЗакрытиеТеговВозможно(ТекущийТег, "==") Тогда
		ВыделитьТекстHtml(ТекущийТег.Содержание,  "==", "<span class='formula'>", "</span>");
	КонецЕсли;
	
КонецПроцедуры // ЗакрытьТег_Формула()

Процедура ЗакрытьТег_ОбъектаМетаданных(ТекущийТег)
	
	ТекущийТег.Содержание = "<span class='nameObject'>" + ТекущийТег.Содержание + "</span>";	
	
КонецПроцедуры // ЗакрытьТег_ОбъектаМетаданных()

Процедура ЗакрытьТег_Картинка(Конвертер, ТекущийТег)
	
	СтрокаТега = ТекущийТег.Содержание;
	
	Если ПервыеСимволыСтроки(ТекущийТег.Содержание, 7) = "ИДРис=(" 
		И ПоследниеСимволыСтроки(ТекущийТег.Содержание, 1) = ")" Тогда
		
		НачалоИдКартинки = Найти(СтрокаТега, "ИДРис=(") + 7;
		КонецИдКартинки  = Найти(СтрокаТега, ")");
		ДанныеФайла = Сред(СтрокаТега, НачалоИдКартинки, КонецИдКартинки - НачалоИдКартинки);
		
		ДанныеФайла = РазложитьСтрокуВМассивПодстрок(ДанныеФайла, ";");
		
		Если ДанныеФайла.Количество() Тогда
			
			ИдКартинки = ДанныеФайла[0];    
			
			СтрокаАтрибутов = "style='";
			Если Конвертер.КомпактныйРежим = Истина Тогда
				СтрокаАтрибутов = СтрокаАтрибутов + " height: 50px; width: 50px;";	
			Иначе
				Для ИндексАтрибута = 1 По ДанныеФайла.Количество() - 1 Цикл
					
					Если ИндексАтрибута = 1 Тогда
						СтрокаАтрибутов = СтрокаАтрибутов + " height:" + СокрЛП(ДанныеФайла[ИндексАтрибута]) + "px;";  
						СтрокаАтрибутов = СтрЗаменить(СтрокаАтрибутов, "Высота=", "");
					КонецЕсли; 
					
					Если ИндексАтрибута = 2 Тогда
						СтрокаАтрибутов = СтрокаАтрибутов + " width:" + СокрЛП(ДанныеФайла[ИндексАтрибута]) + "px;";    
						СтрокаАтрибутов = СтрЗаменить(СтрокаАтрибутов, "Ширина=", "");
					КонецЕсли; 
					
					Если ИндексАтрибута = 3 Тогда
						Если Найти(СокрЛП(ДанныеФайла[ИндексАтрибута]), "Да") Тогда
							СтрокаАтрибутов = СтрокаАтрибутов + " border-style: ridge; border-width: thin;";    
						КонецЕсли; 
					КонецЕсли; 
					
					// Выводим заголовок
					Если ИндексАтрибута = 4 Тогда
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли; 
			
			СтрокаАтрибутов = СтрокаАтрибутов + "'";
			
		КонецЕсли; 
		
		ПолныйПуть = "htp:\\";
		ДанныеРисунка = Конвертер.СписокКартинок.НайтиПоЗначению(ИдКартинки);
		Если Не ДанныеРисунка = Неопределено Тогда
			ПолныйПуть = ДанныеРисунка.Представление;    
		КонецЕсли; 
		
		ПолныйПуть = СтрЗаменить(ПолныйПуть, "\", "/");
		СтрокаТега = "<img " + СтрокаАтрибутов + " src='" + ПолныйПуть + "'><br>";
		
		// Нужно проверить наличие файла
		
		ТекущийТег.Содержание = СтрокаТега;
		
	Иначе
		ТекущийТег.Содержание = "<img " + ТекущийТег.АтрибутыТега + "><br>";
	КонецЕсли; 
	
КонецПроцедуры // ЗакрытьТег_Картинка()

Процедура ЗакрытьТег_Ссылка(ТекущийТег)
	
	СодержаниеБлока = ТекущийТег.Содержание;
	
	Если ТекущийТег.ИмяБлока = "СсылкаНаДокумент" Тогда
		
		Если Найти(СодержаниеБлока, "РИ-") Или Найти(СодержаниеБлока, "ИО-") Тогда
			СсылкаНаДокумент = Документы.itilprofЗапросыНаИзменения.НайтиПоНомеру(СодержаниеБлока);
		Иначе
			СсылкаНаДокумент = Документы.itilprofЗапросы.НайтиПоНомеру(СодержаниеБлока);
		КонецЕсли; 
		
		Если СсылкаНаДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		ТекущийТег.Содержание = "<a name='refDoc' class='refDoc' href='" + ПолучитьНавигационнуюСсылку(СсылкаНаДокумент) 
		+ "'>" + СодержаниеБлока + "</a>"; 
		
	ИначеЕсли ТекущийТег.ИмяБлока = "Якорь" Тогда
		
		ТекущийТег.Содержание = "<a " + ТекущийТег.АтрибутыТега + "></a>"; 
		
	Иначе
		
		ДанныеСсылки = СтрЗаменить(СодержаниеБлока, "-)", "");
		ДанныеСсылки = РазложитьСтрокуВМассивПодстрок(ДанныеСсылки, ";");
		
		Если ДанныеСсылки.Количество() Тогда
			
			Если Не ВРег(ПервыеСимволыСтроки(ДанныеСсылки[0], 4)) = "HTTP" 
				И Не ПервыеСимволыСтроки(ДанныеСсылки[0], 1) = "#" Тогда
				
				Если ДанныеСсылки.Количество() = 2 Тогда
					Если ПустаяСтрока(ДанныеСсылки[1]) Тогда
						ТекущийТег.Содержание = "<a href='#" + ДанныеСсылки[0] 
							+ "' onClick=""return goTo('#" + ДанныеСсылки[0] + "')"">" + ДанныеСсылки[0] + "</a>";
					Иначе
						ТекущийТег.Содержание = "<a href='#" + ДанныеСсылки[0] 
							+ "' onClick=""return goTo('#" + ДанныеСсылки[0] + "')"">" + ДанныеСсылки[1] + "</a>"; 	
					КонецЕсли; 
				ИначеЕсли ДанныеСсылки.Количество() = 1 Тогда
					ТекущийТег.Содержание = "<a href='#" + ДанныеСсылки[0] 
						+ "' onClick=""return goTo('#" + ДанныеСсылки[0] + "')"">" + ДанныеСсылки[0] + "</a>"; 
				КонецЕсли;
				
			Иначе
				Если ДанныеСсылки.Количество() = 2 Тогда
					Если ПустаяСтрока(ДанныеСсылки[1]) Тогда
						ТекущийТег.Содержание = "<a href='" + ДанныеСсылки[0] + "'>" + ДанныеСсылки[0] + "</a>"; 	
					Иначе
						ТекущийТег.Содержание = "<a href='" + ДанныеСсылки[0] + "'>" + ДанныеСсылки[1] + "</a>"; 	
					КонецЕсли; 
				ИначеЕсли ДанныеСсылки.Количество() = 1 Тогда
					ТекущийТег.Содержание = "<a href='" + ДанныеСсылки[0] + "'>" + ДанныеСсылки[0] + "</a>"; 
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗакрытьТег_Ссылка()

Процедура ЗакрытьТег_ОтправкаСообщенияВЧат(Конвертер, ТекущийТег)
	
	СимволОтправки = "✉"; 
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ТекущийТег.Содержание, " ");
	Если МассивПодстрок.Количество() > 0 Тогда
		
		СегментСтроки = МассивПодстрок[0];
		
		Если Лев(СегментСтроки, 2) = "@{" И Прав(СегментСтроки, 1) = "}" Тогда
			
			ИдентификаторПолучателя = Прав(СегментСтроки, СтрДлина(СегментСтроки) - 2);
			ИдентификаторПолучателя = Лев(ИдентификаторПолучателя, СтрДлина(ИдентификаторПолучателя) - 1);
			
			//Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторПолучателя) Тогда
			ПолучательСообщения = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПолучателя));
			Если ЗначениеЗаполнено(ПолучательСообщения) Тогда
				СимволОтправки = "✉" + " @" + ПолучательСообщения.Наименование;
			КонецЕсли; 	
			//КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	ТекущийТег.Содержание = СимволОтправки;
	
КонецПроцедуры // ЗакрытьТег_ОтправкаСообщенияВЧат()

Процедура ЗакрытьТег_input(Конвертер, ТекущийТег)
	
	Содержание = Сред(ТекущийТег.Содержание, 2, СтрДлина(ТекущийТег.Содержание) - 2);
	
	Если ПустаяСтрока(СокрЛП(Содержание)) Тогда
		ТекущийТег.Содержание = "" 
		+ Конвертер.ДополнительныеСвойства.ТекущийПунктЗадачи + ". <input type='checkbox' >";
	Иначе
		ТекущийТег.Содержание = ""
		+ Конвертер.ДополнительныеСвойства.ТекущийПунктЗадачи + ". <input type='checkbox' checked>";
	КонецЕсли; 
	
КонецПроцедуры // ЗакрытьТег_input()

Процедура ЗакрытьТег_Форма(Конвертер, ТекущийТег)
	
	СодержаниеТега = ТекущийТег.Содержание;
	СодержаниеТега = СокрЛП(СодержаниеТега);
	
	СодержаниеТега = СтрЗаменить(СодержаниеТега, "Форма=[", "");
	СодержаниеТега = СтрЗаменить(СодержаниеТега, "ФормаОткрыта=[", "");
	СодержаниеТега = СтрЗаменить(СодержаниеТега, "]", "");
	СодержаниеТега = СтрЗаменить(СодержаниеТега, "Форма=Х", "");
	СодержаниеТега = СтрЗаменить(СодержаниеТега, "ФормаОткрыта=Х", "");
	СодержаниеТега = СтрЗаменить(СодержаниеТега, "Ъ", "");
	
	ТекстСкрипта = ИзвлельСкриптИзСодержанияТега(СодержаниеТега);
	ДанныеФормы = РазложитьСтрокуВМассивПодстрок(СодержаниеТега, ";");
	Форма = ИнтерактивнаяФорма(ДанныеФормы, ТекстСкрипта);
	
	Если Конвертер.Свойство("Расшифровки")
		И Не Конвертер.Расшифровки = Неопределено Тогда
		
		Если (ТекущийТег.ИмяБлока = "ОткрытаяФорма") Тогда
			Форма.УсловияРаботыСФормой = "ФормаДолжнаБытьОткрыта";
		КонецЕсли;
		
		НоваяРасшифровка = Конвертер.Расшифровки.Добавить();
		НоваяРасшифровка.Расшифровка = "ОткрытьФорму";
		НоваяРасшифровка.Параметры   = Форма;
		НоваяРасшифровка.Представление = СокрЛП(Форма.Представление);
		НоваяРасшифровка.НомерСтроки   = Конвертер.Расшифровки.Количество();
		
		ДанныеКартинки = Конвертер.СписокКартинок.НайтиПоЗначению(Форма.Тип);
		Если Не ДанныеКартинки = Неопределено Тогда
			ТекущийТег.Содержание = "<img src='" + СтрЗаменить(ДанныеКартинки.Представление, "\", "/") + "'><a id='idRef' href=#" 
				+ НоваяРасшифровка.НомерСтроки + ">" + НоваяРасшифровка.Представление + "</a>";
		Иначе
			ТекущийТег.Содержание = "<img id='iconForm#"+ НоваяРасшифровка.НомерСтроки + "' src='#" 
				+ НоваяРасшифровка.НомерСтроки + "'><a id='idRef' href=#" 
					+ НоваяРасшифровка.НомерСтроки + ">" + НоваяРасшифровка.Представление + "</a>";
		КонецЕсли; 
		
	Иначе
		
		//НоваяРасшифровка = Новый Структура("НомерСтроки, Представление", "#", Форма.Представление);
		//
		//ТекущийТег.Содержание = "<img id='iconForm#"+ НоваяРасшифровка.НомерСтроки + "' src='#" + НоваяРасшифровка.НомерСтроки + "'><a id='idRef' href=#" 
		//+ НоваяРасшифровка.НомерСтроки + ">" + НоваяРасшифровка.Представление + "</a>";
		
		НоваяРасшифровка = Новый Структура("НомерСтроки, Представление", "#", Форма.Представление);
		
		ДанныеКартинки = Конвертер.СписокКартинок.НайтиПоЗначению(Форма.Тип);
		Если Не ДанныеКартинки = Неопределено Тогда
			ТекущийТег.Содержание = "<img src='" + СтрЗаменить(ДанныеКартинки.Представление, "\", "/") + "'><a id='idRef' href=#" 
				+ НоваяРасшифровка.НомерСтроки + ">" + НоваяРасшифровка.Представление + "</a>";
		Иначе
			ТекущийТег.Содержание = "<img id='iconForm#"+ НоваяРасшифровка.НомерСтроки + "' src='#" + НоваяРасшифровка.НомерСтроки + "'><a id='idRef' href=#" 
				+ НоваяРасшифровка.НомерСтроки + ">" + НоваяРасшифровка.Представление + "</a>";
		КонецЕсли;
		
	КонецЕсли;
	
	//ТекущийТег.Содержание = "<img id='iconForm#"+ НоваяРасшифровка.НомерСтроки + "' src='#" + НоваяРасшифровка.НомерСтроки + "'><a id='idRef' href=#" 
	//	+ НоваяРасшифровка.НомерСтроки + ">" + НоваяРасшифровка.Представление + "</a>";
	
КонецПроцедуры

Функция ИзвлельСкриптИзСодержанияТега(СодержаниеТега)
	
	ТекстСкрипта = "";
	НачалоСкрипта = Найти(СодержаниеТега, "{");
	ОкончаниеСкрипта = Найти(СодержаниеТега, "}");
	
	Если НачалоСкрипта = 0 Или ОкончаниеСкрипта = 0 Тогда
		Возврат ТекстСкрипта;
	КонецЕсли;
	
	ТекстСкрипта = Сред(СодержаниеТега, НачалоСкрипта + 1, ОкончаниеСкрипта - НачалоСкрипта - 1);
	СодержаниеТега = СокрЛП(Лев(СодержаниеТега, НачалоСкрипта -1));
	
	Возврат ТекстСкрипта;
	
	
КонецФункции

Функция ЗакрытиеТеговВозможно(ТекущийТег, МаркерТега)
	
	Если СтрЧислоВхождений(ТекущийТег.Содержание, МаркерТега) = 2 Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции // ЗакрытиеТеговВозможно()

Процедура ВыделитьТекстHtml(Текст, ПодстрокаПоиска, ТегНачала, ТегОкончания)
	
	ЗаменитьМаркерНаТег(Текст, ПодстрокаПоиска, ТегНачала);
	ЗаменитьМаркерНаТег(Текст, ПодстрокаПоиска, ТегОкончания);
	
КонецПроцедуры // ВыделитьТекстHtml()

Функция ЗаменитьМаркерНаТег(ТекстТега, Маркер, Тег)
	
	ПозицияМаркера = Найти(ТекстТега, Маркер);
	ДлинаМаркера = СтрДлина(Маркер);
	
	СодержанийТега = Прав(ТекстТега, СтрДлина(ТекстТега) - (ПозицияМаркера - 1 + ДлинаМаркера));
	ТекстТега = Лев(ТекстТега, ПозицияМаркера - 1) + Тег + СодержанийТега;
	
	Возврат СодержанийТега;
	
	ПозицияМаркера = Найти(ТекстТега, Маркер);
	ДлинаМаркера = СтрДлина(Маркер);
	
	ТекстТега = Лев(ТекстТега, ПозицияМаркера - 1) + Тег + Прав(ТекстТега, СтрДлина(ТекстТега) - (ПозицияМаркера - 1 + ДлинаМаркера));
	
КонецФункции // ЗаменитьМаркерНаТег()

// Процедура добавляет отступы в строку текста
Процедура УвеличитьУровеньИерархииТекста(Строка, Уровень)
	
	Для НомерУровня = 1 По Уровень Цикл
		Строка = "	" + Строка;
	КонецЦикла;
	
КонецПроцедуры // УвеличитьУровеньИерархииТекста()

// Вспомогательные методы

Процедура ОтделитьСимволыОтМаркеров(СтрокаТекста)
	
	Маркеры = "*-";
	СимволыТекста = ":;,.!?`~@#$%^&*()-_=+<>[]{}""№";
	
	Для НомерМаркера = 1 По СтрДлина(Маркеры) Цикл
		Для НомерСимвола = 1 По СтрДлина(СимволыТекста) Цикл
			
			Маркер = Сред(Маркеры, НомерМаркера, 1); 
			Символ = Сред(СимволыТекста, НомерСимвола, 1); 
			
			Если Маркер = Символ Тогда
				Продолжить;
			КонецЕсли; 
			
			//СтрокаТекста = СтрЗаменить(СтрокаТекста, Символ + Маркер, Символ + " " + Маркер);	
			СтрокаТекста = СтрЗаменить(СтрокаТекста, Маркер + Символ, Маркер + " " + Символ);	
			
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры // ОтделитьСимволыОтМаркеров()

Функция ПервыеСимволыСтроки(Знач Строка, КолСимволов = 1)
	
	Возврат Лев(Строка, КолСимволов);
	
КонецФункции // ПервыеСимволыСтроки()

Функция ПоследниеСимволыСтроки(Знач Строка, КолСимволов = 1)
	
	Возврат Прав(Строка, КолСимволов);
	
КонецФункции // ПоследниеСимволыСтроки()

Функция ТекущийУровеньПунктаНумерованногоСписка(ТекстСтроки)
	
	Числа = "0123456789";
	
	НомерСимвола = 1;
	Пока НомерСимвола < СтрДлина(ТекстСтроки) Цикл
		
		Если Найти(Числа, Сред(ТекстСтроки, НомерСимвола, 1)) Тогда
			Возврат НомерСимвола;			    
		КонецЕсли; 
		
		НомерСимвола = НомерСимвола + 1;
		
	КонецЦикла; 
	
	Возврат НомерСимвола;
	
КонецФункции // ТекущийУровеньПунктаНумерованногоСписка()

Функция СтрокаСодержитМаркерыТаблицы(Знач СтрокаТекста)
	
	СтрокаТаблицы = СокрЛП(СтрокаТекста);
	СтрокаТаблицы = СтрЗаменить(СтрокаТаблицы, Символ(10), "");
	
	Если (Лев(СтрокаТаблицы, 1) = "|" Или Лев(СтрокаТаблицы, 1) = "!") 
		И (Прав(СтрокаТаблицы, 1) = "|" Или Прав(СтрокаТаблицы, 1) = "!") Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции // СтрокаСодержитМаркерыТаблицы()

Процедура ВыделитьМаркерыТаблицы(СтрокаТаблицы)
	
	СтрокаТаблицы = СтрЗаменить(СтрокаТаблицы, "!", " !");
	
КонецПроцедуры // ВыделитьМаркерыТаблицы()

Функция ТегОбрамляемыйПараграфом(ИмяТега)
	
	ТегиПараграфа = Новый Массив();
	ТегиПараграфа.Добавить("input");
	ТегиПараграфа.Добавить("forma");
	ТегиПараграфа.Добавить("strong");
	ТегиПараграфа.Добавить("em");
	ТегиПараграфа.Добавить("del");
	ТегиПараграфа.Добавить("u");
	ТегиПараграфа.Добавить("pre");
	ТегиПараграфа.Добавить("blockquote");
	ТегиПараграфа.Добавить("ul");
	ТегиПараграфа.Добавить("ol");
	ТегиПараграфа.Добавить("img");
	ТегиПараграфа.Добавить("mailChat");
	ТегиПараграфа.Добавить("a");
	
	Если ТегиПараграфа.Найти(ИмяТега) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // ТегОбрамляемыйПараграфом()

Функция СтроковоеПредставлениеЧисла(Текст)
	
	Числа = "0123456789.";
	
	НомерСимвола = 1;
	Пока НомерСимвола <= СтрДлина(Текст) Цикл
		
		Если Не Найти(Числа, Сред(Текст, НомерСимвола, 1)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + 1;
		
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции // СтроковоеПредставлениеЧисла()

Функция РазделительТекста(СтрокаТекста, Подстрока, Разделитель)
	
	Если ЭтоЗнакПрепинания(Подстрока) Тогда
		Возврат "";
	КонецЕсли; 	
	
	Если СтрДлина(СтрокаТекста) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Разделитель;
	
КонецФункции // РазделительТекста()

Функция ЭтоЗнакПрепинания(Знач Подстрока)
	
	ЗнакиПрепинания = "!;:?,.";
	
	Подстрока = СокрЛП(Подстрока);
	Если Найти(ЗнакиПрепинания, Подстрока) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции // ЭтоЗнакПрепинания()

Функция ЭтоСлужебныйСимвол(Знач Символ)
	
	СлужебныеСимволы = ":;,.!?()";

	Символ = СокрЛП(Символ);
	Если Найти(СлужебныеСимволы, Символ) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЭтоСлужебныйСимвол()

Функция ОписаниеОбъектаМетаданных(Конвертер, ПредставлениеОбъекта)
	
	ТипОбъекта = Лев(ПредставлениеОбъекта, Найти(ПредставлениеОбъекта, "."));
	Если ПустаяСтрока(ТипОбъекта) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	КлассОбъекта = Конвертер.СписокКлассов.НайтиПоЗначению(НРег(ТипОбъекта));
	Если Не КлассОбъекта = Неопределено Тогда
		
		ПредставлениеОбъекта = СтрЗаменить(ПредставлениеОбъекта, ТипОбъекта, КлассОбъекта.Представление + ".");
		Возврат Истина;
		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции // ОписаниеОбъектаМетаданных()

Функция СтрокаСодержитМаркерВыделенияТекста(Строка, Маркер)
	
	ПозицияМаркера = Найти(Строка, Маркер);
	Если Маркер = "**" Тогда
		
		ПозицияИдентичногоМаркера = Найти(Строка, "*");
		Если Не ПозицияМаркера = ПозицияИдентичногоМаркера Тогда
			Возврат Ложь;                
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ПозицияМаркера И СтрДлина(Строка) > СтрДлина(Маркер);
	
КонецФункции // СтрокаСодержитМаркерВыделенияТекста()

Процедура УстановитьСтроковыйМаркерВыделенияТекста(Строка, Маркер)
	
	Если Маркер = "**" Тогда
		Строка = СтрЗаменить(Строка, "**", "{bold}");
	ИначеЕсли Маркер = "*" Тогда
		Строка = СтрЗаменить(Строка, "*", "{em}");	
	ИначеЕсли Маркер = "--" Тогда
		Строка = СтрЗаменить(Строка, "--", "{del}");			
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСтроковыйМаркерВыделенияТекста()

Функция УдалитьМаркерыИзСтроки(Подстрока, Маркер)
	
	ПозицияМаркера = Найти(Подстрока, Маркер);
	
	ПодстрокаМаркер = Лев(Подстрока, ПозицияМаркера - 1 + СтрДлина(Маркер));
	Подстрока = Прав(Подстрока, СтрДлина(Подстрока) - (ПозицияМаркера + СтрДлина(Маркер) - 1));
	
	Возврат ПодстрокаМаркер;
	
КонецФункции // УдалитьМаркерыИзСтроки()

Функция ТегСодержащийСсылку(ТекущийТег)
	
	Если ТекущийТег.Имя = "img" Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции // ТегСодержащийСсылку()

Функция СтрокаСодержитНомерЭлектронногоДокумента(Подстрока)
	
	ПрефиксДокумента = Лев(Подстрока, 3);
	ЧисловаяЧасть = Прав(Подстрока, СтрДлина(Подстрока) - 3);
	
	Если (ПрефиксДокумента = "РИ-" Или ПрефиксДокумента = "РО-" Или ПрефиксДокумента = "ИО-")
		И СтроковоеПредставлениеЧисла(ЧисловаяЧасть) Тогда
		
		Возврат Истина;
		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции // СтрокаСодержитНомерЭлектронногоДокумента()

Функция АдресФайлаКартинки(СписокКартинок, ЗначениеПоиска)
	
	ДанныеКартинки = СписокКартинок.НайтиПоЗначению(ЗначениеПоиска);
	Если Не ДанныеКартинки = Неопределено Тогда
		Возврат ДанныеКартинки.Представление;
	Иначе
		Возврат "#";
	КонецЕсли; 
	
КонецФункции // АдресФайлаКартинки()

Функция ИнтерактивнаяФорма(ДанныеФормы, ТекстСкрипта)
	
	Если ДанныеФормы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Форма = Новый Структура("ПолноеИмяФормы, ПутьРасположенияЭлементаНаФорме, 
		|Представление, Тип, УсловияРаботыСФормой, ТекстСкрипта");
		
	Форма.ПолноеИмяФормы = "";
	Форма.ТекстСкрипта = ТекстСкрипта;
	
	Если ДанныеФормы.Количество() = 2 Тогда
		
		Форма.Представление = ДанныеФормы[1]; 
		Если ЗначениеЗаполнено(ТекстСкрипта) Тогда
			Форма.Тип = "скрипт";
		Иначе
			Форма.Тип = "форма";
		КонецЕсли;
		
	ИначеЕсли ДанныеФормы.Количество() = 3 Тогда
		
		Форма.Представление = ДанныеФормы[1];
		Форма.Тип = ДанныеФормы[2];
		Форма.Тип = СтрЗаменить(Форма.Тип, " ", "");
		Форма.Тип = НРег(Форма.Тип);
		
	КонецЕсли; 
	
	СтруктураФормы = СтруктураФормы(ДанныеФормы[0]);
	Для Каждого ЭлементПути Из СтруктураФормы Цикл
		
		Если Найти(Форма.ПолноеИмяФормы, "Форма") > 0 Тогда
			
			Форма.ПолноеИмяФормы = Форма.ПолноеИмяФормы + ?(СтрДлина(Форма.ПолноеИмяФормы), ".", "") + ЭлементПути;
			Форма.ПутьРасположенияЭлементаНаФорме = СтруктураРасположенияЭлементаНаФорме(СтруктураФормы, СтруктураФормы.Найти(ЭлементПути));
			
			Прервать;
			
		Иначе
			Форма.ПолноеИмяФормы = Форма.ПолноеИмяФормы + ?(СтрДлина(Форма.ПолноеИмяФормы), ".", "") + ЭлементПути;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Форма;
	
КонецФункции

Функция ИзвлечьТекстСкрипка(ДополнительноеОписание)
	
	НачалоСкрипта = Найти(ДополнительноеОписание, "{");
	ОкончаниеСкрипта = Найти(ДополнительноеОписание, "}");
	
	ТекстСкрипта = Сред(ДополнительноеОписание, НачалоСкрипта + 1, ОкончаниеСкрипта - НачалоСкрипта - 1);
	ДополнительноеОписание = СокрЛП(Лев(ДополнительноеОписание, НачалоСкрипта -1));
	
	Возврат ТекстСкрипта;
	
КонецФункции // ИнтерактивнаяФорма()

Функция СтруктураФормы(ПолноеИмяФомы)
	
	Возврат РазложитьСтрокуВМассивПодстрок(ПолноеИмяФомы, ".");
	
КонецФункции // СтруктураФормы()

Функция СтруктураРасположенияЭлементаНаФорме(ЭлементыФормы, УровеньНачалаПоиска)
	
	СтруктураРасположенияЭлемента = Новый Массив();
	
	Для Уровень = УровеньНачалаПоиска + 1 По ЭлементыФормы.ВГраница() Цикл
		СтруктураРасположенияЭлемента.Добавить(ЭлементыФормы[Уровень]);
	КонецЦикла;
	
	Возврат СтруктураРасположенияЭлемента;
	
КонецФункции // СтруктураРасположенияЭлементаНаФорме()

#КонецОбласти // СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ
