&НаСервере
Перем мЗаполнитьСтруктуруСПодчиненнымиЭлементами;

&НаКлиенте
Процедура КомандаПоказатьДеревоМетаданных(Команда)

	Элементы.КнопкаПоказатьДеревоМетаданных.Пометка = Не Элементы.КнопкаПоказатьДеревоМетаданных.Пометка;
	Элементы.ГруппаСтруктураМетаданных.Видимость = Элементы.КнопкаПоказатьДеревоМетаданных.Пометка;

	Если Элементы.КнопкаПоказатьДеревоМетаданных.Пометка Тогда
		ПоказатьСтруктуруМетаданных();
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура КомандаВывестиСтруктуруМетаданных(Команда)
	
	СтруктураМетаданных.ПолучитьЭлементы().Очистить();
	ЗаполнитьСтруктуруМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВывестиСтруктуруСПодчиненнымиЭлементами(Команда)
	
	КомандаВывестиСтруктуруСПодчиненнымиЭлементамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьДанныеОбъектаВРедактор(ВыбраннаяСтрока, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураМетаданныхПриАктивизацииСтроки(Элемент)
	//TODO: Вставить содержимое обработчика
КонецПроцедуры


#Область Процедуры_работы_со_структурой_метаданных

&НаКлиенте
Процедура ПоказатьСтруктуруМетаданных()
	
	Если Не СтруктураМетаданных.ПолучитьЭлементы().Количество() Тогда
		
//		ВосстановитьСтруктуруМетаданныхИзКэша();
//		Если Не СтруктураМетаданных.ПолучитьЭлементы().Количество() Тогда
			ЗаполнитьСтруктуруМетаданных();
//		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПоказатьСтруктуруМетаданных()

&НаСервере
Процедура ЗаполнитьСтруктуруМетаданных()
	
	ДобавитьОсновныеСвойстваКонфигурации();
	ДобавитьОбщиеКлассыОбъектовМетаданных();
	ДобавитьКлассыПрикладныхОбъектов();
	
КонецПроцедуры // ЗаполнитьСтруктуруМетаданных()

&НаСервере
Процедура ДобавитьОсновныеСвойстваКонфигурации()
	
	ЭлементыДерева = СтруктураМетаданных.ПолучитьЭлементы();
	
	УзелБуфер = ЭлементыДерева.Добавить();
	УзелБуфер.Класс = "Буфер";
	УзелБуфер.Имя 	 = "ВыбранныеОбъекты";
	УзелБуфер.Синоним = "Выбранные объекты";
	УзелБуфер.ПолноеИмя = "";
	УстановитьИконкуОбъектаМетаданных(УзелБуфер);
	
	УзелРасшериний = УзелБуфер.ПолучитьЭлементы().Добавить();
	УзелРасшериний.Имя = "Расширения";
	УзелРасшериний.Синоним = "Внешние отчеты и обработки";
	УзелРасшериний.Класс   = "Расширения";
	УстановитьИконкуОбъектаМетаданных(УзелРасшериний);
	
	СтрокаКонфигурации = ЭлементыДерева.Добавить();
	
	СтрокаКонфигурации.Класс = "Конфигурация";
	СтрокаКонфигурации.Имя 	 = Метаданные.Имя;
	СтрокаКонфигурации.Синоним = Метаданные.Представление();
	СтрокаКонфигурации.ПолноеИмя = Метаданные.ПолноеИмя();
	УстановитьИконкуОбъектаМетаданных(СтрокаКонфигурации);
	СтрокаКонфигурации.МенеджерОбъектов = Истина;
	
	ДобавитьМодулиКонфигурации(СтрокаКонфигурации);
	
КонецПроцедуры // ДобавитьОсновныеСвойстваКонфигурации()

&НаСервере
Процедура ДобавитьМодулиКонфигурации(ЭлементКонфигурации)
	
	ЭлементыКонфигурации = ЭлементКонфигурации.ПолучитьЭлементы();
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульОбычногоПриложения";
	ЭлементМодуль.Имя 	 = "МодульОбычногоПриложения";
	ЭлементМодуль.Синоним = "Модуль обычного приложения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульОбычногоПриложения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульУправляемогоПриложения";
	ЭлементМодуль.Имя 	 = "МодульУправляемогоПриложения";
	ЭлементМодуль.Синоним = "Модуль управляемого приложения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульУправляемогоПриложения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульВнешнегоСоединения";
	ЭлементМодуль.Имя 	 = "МодульВнешнегоСоединения";
	ЭлементМодуль.Синоним = "Модуль внешнего соединения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульВнешнегоСоединения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульСеанса";
	ЭлементМодуль.Имя 	 = "МодульСеанса";
	ЭлементМодуль.Синоним = "Модуль сеанса";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульСеанса";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
КонецПроцедуры // ДобавитьМодулиКонфигурации()

&НаСервере
Процедура ДобавитьОбщиеКлассыОбъектовМетаданных()
	
	ЭлементыСтруктуры = СтруктураМетаданных.ПолучитьЭлементы();
	
	ЭлементОбщие = ЭлементыСтруктуры.Добавить();
	ЭлементОбщие.Класс   = "Общие";
	ЭлементОбщие.Имя	 = "Общие";
	ЭлементОбщие.Синоним = "Общие";
	ЭлементОбщие.МенеджерОбъектов = Истина;
	УстановитьИконкуОбъектаМетаданных(ЭлементОбщие);
		
	ДобавитьКлассыПодсистемы(ЭлементОбщие);
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеМодули", "ОбщийМодуль", "Общие модули");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПараметрыСеанса", "ПараметрСеанса", "Параметры сеанса");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Роли", "Роль", "Роли");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеРеквизиты", "ОбщийРеквизит", "Общие реквизиты");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПланыОбмена", "ПланОбмена", "Планы обмена");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "КритерииОтбора", "КритерийОтбора", "Критерии отбора");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПодпискиНаСобытия", "ПодпискаНаСобытие", "Подписки на события");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "РегламентныеЗадания", "РегламентноеЗадание", "Регламентные задания");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ФункциональныеОпции", "ФункциональнаяОпция", "Функциональные опции");
	ДобавитьНовыйКлассОбъектов(
		ЭлементОбщие, "ПараметрыФункциональныхОпций", "ПараметрФункциональнойОпции", "Параметры функциональных опций");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОпределяемыеТипы", "ОпределяемыйТип", "Определяемые типы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ХранилищаНастроек", "ХранилищеНастроек", "Хранилища настроек");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеФормы", "ОбщаяФорма", "Общие формы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеКоманды", "ОбщаяКоманда", "Общие команды");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ГруппыКоманд", "ГруппаКоманд", "Группы команд");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Интерфейсы", "Интерфейс", "Интерфейсы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеМакеты", "ОбщийМакет", "Общие макеты");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеКартинки", "ОбщаяКартинка", "Общие картинки");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПакетыXDTO", "ПакетXDTO", "XDTO-пакеты");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "WebСервисы", "WebСервис", "Web-сервисы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "HTTPСервисы", "HTTPСервис", "HTTP-сервисы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "WSСсылки", "WSСсылка", "WS-ссылки");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Стили", "Стиль", "Стили");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Языки", "Язык", "Языки");
	
КонецПроцедуры // ДобавитьОбщиеКлассыОбъектовМетаданных()

&НаСервере
Процедура ДобавитьКлассыПодсистемы(ЭлементРодитель)
	
	ЭлементПодсистемы = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементПодсистемы.Класс = "Подсистема";
	ЭлементПодсистемы.Имя 	= "Подсистемы";
	ЭлементПодсистемы.Синоним = "Подсистемы";
	ЭлементПодсистемы.МенеджерОбъектов = Истина;
	УстановитьИконкуОбъектаМетаданных(ЭлементПодсистемы);
	
	Подсистемы = Метаданные.Подсистемы;
	
	Для Каждого Подсистема Из Подсистемы Цикл
		ДобавитьПодсистему(ЭлементПодсистемы, Подсистема);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьКлассыПодсистемы()

&НаСервере
Процедура ДобавитьПодсистему(ЭлементРодитель, Подсистема)
	
	ЭлементПодсистема = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементПодсистема.Класс = "Подсистема";
	ЭлементПодсистема.Имя = Подсистема.Имя;
	ЭлементПодсистема.Синоним = Подсистема.Представление();
	ЭлементПодсистема.ПолноеИмя = Подсистема.ПолноеИмя();
	УстановитьИконкуОбъектаМетаданных(ЭлементПодсистема);
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ДобавитьПодсистему(ЭлементПодсистема, ПодчиненнаяПодсистема);
	КонецЦикла; 
	
КонецПроцедуры // ДобавитьПодсистему()

&НаСервере
Процедура ДобавитьКлассыПрикладныхОбъектов()
	
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Константы", "Константа", "Константы");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Справочники", "Справочник", "Справочники");
	ДобавитьКлассДокументы();
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ЖурналыДокументов", "ЖурналДокументов", "Журналы документов");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Перечисления", "Перечисление", "Перечисления");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Отчеты", "Отчет", "Отчеты");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Обработки", "Обработка", "Обработки");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ПланыВидовХарактеристик", "ПланВидовХарактеристик", "Планы видов характеристик");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ПланыСчетов", "ПланСчетов", "Планы счетов");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ПланыВидовРасчета", "ПланВидовРасчета", "Планы видов расчета");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыСведений", "РегистрСведений", "Регистры сведений");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыНакопления", "РегистрНакопления", "Регистры накопления");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыБухгалтерии", "РегистрБухгалтерии", "Регистры бухгалтерии");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыРасчета", "РегистрРасчета", "Регистры расчета");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "БизнесПроцессы", "БизнесПроцесс", "Бизнес-процессы");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Задачи", "Задача", "Задачи");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ВнешниеИсточникиДанных", "ВнешнийИсточникДанных", "Внешние источники данных");
	
КонецПроцедуры // ДобавитьКлассыПрикладныхОбъектов()

&НаСервере
Процедура ДобавитьКлассДокументы()
	
	ЭлементУзелМенеджер = СтруктураМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементУзелМенеджер.Класс = "Документ";
	ЭлементУзелМенеджер.Имя = "Документы";
	ЭлементУзелМенеджер.Синоним = "Документы";
	ЭлементУзелМенеджер.МенеджерОбъектов = Истина;
	УстановитьИконкуОбъектаМетаданных(ЭлементУзелМенеджер);
	
	ДобавитьНовыйКлассОбъектов(ЭлементУзелМенеджер, "НумераторыДокументов", "НумераторДокументов", "Нумераторы");
	ДобавитьНовыйКлассОбъектов(ЭлементУзелМенеджер, "Последовательности", "Последовательность", "Последовательности");
	
	СвойстваОбъекта = СвойстваОбъектаМетаданных("Документы");
	ДобавитьПодчиненныеОбъектыМетаданных(ЭлементУзелМенеджер, "Документы", "Документ", СвойстваОбъекта);
	
КонецПроцедуры // ДобавитьКлассДокументы()

&НаСервере
Процедура ДобавитьНовыйКлассОбъектов(ЭлементРодитель, ИмяМенеджераКласса, ИмяКласса, СинонимКласса)	
	
	ЭлементУзелМенеджер = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементУзелМенеджер.Класс = ИмяКласса;
	ЭлементУзелМенеджер.Имя   = ИмяМенеджераКласса;
	ЭлементУзелМенеджер.Синоним = ИмяМенеджераКласса;
	ЭлементУзелМенеджер.МенеджерОбъектов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементУзелМенеджер);
	
	СвойстваОбъекта = СвойстваОбъектаМетаданных(ИмяМенеджераКласса);
	ДобавитьПодчиненныеОбъектыМетаданных(ЭлементУзелМенеджер, ИмяМенеджераКласса, ИмяКласса, СвойстваОбъекта);
	
КонецПроцедуры // ДобавитьНовыйКлассОбъектов()

&НаСервере
Функция СвойстваОбъектаМетаданных(ИмяМенеджераКласса)
	
	СвойстваОбъектаМетаданных = Новый Структура();
	СвойстваОбъектаМетаданных.Вставить("Реквизиты",            Истина);
	СвойстваОбъектаМетаданных.Вставить("ЗначенияПеречисления", Истина);
	СвойстваОбъектаМетаданных.Вставить("ТабличныеЧасти",       Истина);
	СвойстваОбъектаМетаданных.Вставить("Измерения",            Истина);
	СвойстваОбъектаМетаданных.Вставить("Ресурсы",              Истина);
	СвойстваОбъектаМетаданных.Вставить("Графы",                Истина);
	СвойстваОбъектаМетаданных.Вставить("Формы",                Истина);
	СвойстваОбъектаМетаданных.Вставить("Команды",              Истина);
	СвойстваОбъектаМетаданных.Вставить("Макеты",               Истина);
	СвойстваОбъектаМетаданных.Вставить("РеквизитыАдресации",   Истина);
	СвойстваОбъектаМетаданных.Вставить("Таблицы",              Истина);
	СвойстваОбъектаМетаданных.Вставить("Кубы",                 Истина);
	СвойстваОбъектаМетаданных.Вставить("Функции",              Истина);
	
	МенеджерОбъектМетаданных = Метаданные[ИмяМенеджераКласса];
	Для Каждого Свойство Из СвойстваОбъектаМетаданных Цикл
		
		Если Не МенеджерОбъектМетаданных.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПодчиненныйКласс = МенеджерОбъектМетаданных[0][Свойство.Ключ];
		Исключение
			СвойстваОбъектаМетаданных[Свойство.Ключ] = Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат СвойстваОбъектаМетаданных;
	
КонецФункции // СвойстваОбъектаМетаданных()

&НаСервере
Процедура ДобавитьПодчиненныеОбъектыМетаданных(ЭлементРодитель, ИмяМенеджераКласса, ИмяКласса, СвойстваОбъекта)	
	
	Если ИмяМенеджераКласса = "ОбщиеКартинки" Тогда
		Если Не мЗаполнитьСтруктуруСПодчиненнымиЭлементами = Истина Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ОбъектыМетаданных = Метаданные[ИмяМенеджераКласса];
	ЭлементыРодительскогоУзла = ЭлементРодитель.ПолучитьЭлементы();
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		ЭлементОбъектМетаданных = ЭлементыРодительскогоУзла.Добавить();
		ЭлементОбъектМетаданных.Класс = ИмяКласса;
		ЭлементОбъектМетаданных.Имя = ОбъектМетаданных.Имя;
		ЭлементОбъектМетаданных.Синоним = ОбъектМетаданных.Представление();
		ЭлементОбъектМетаданных.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		УстановитьИконкуОбъектаМетаданных(ЭлементОбъектМетаданных);
		
		Если ИмяКласса = "Константа" Тогда
			ЗаполнитьТипыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если мЗаполнитьСтруктуруСПодчиненнымиЭлементами = Истина Тогда
		
			Если СвойстваОбъекта.Измерения Тогда
				ДобавитьИзмеренияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
			
			Если СвойстваОбъекта.Ресурсы Тогда
				ДобавитьРесурсыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
			
			Если СвойстваОбъекта.РеквизитыАдресации Тогда
				ДобавитьРеквизитыАдресацииОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Реквизиты Тогда
				ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
			
			Если СвойстваОбъекта.ЗначенияПеречисления Тогда
				ДобавитьЗначенияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.ТабличныеЧасти Тогда
				ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Формы Тогда
				ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Команды Тогда
				ДобавитьКомандыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Макеты Тогда
				ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыАдресацииОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементРеквизитыАдресации = ДобавитьМенеджерРеквизитовАдресации(ЭлементОбъектМетаданных);
	
	РеквизитыАдресации = ОбъектМетаданных.РеквизитыАдресации;
	Если РеквизитыАдресации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РеквизитАдресации Из РеквизитыАдресации Цикл
		
		ЭлементРеквизитАдресации = ЭлементРеквизитыАдресации.ПолучитьЭлементы().Добавить();
		ЭлементРеквизитАдресации.Класс = "РеквизитАдресации";
		ЭлементРеквизитАдресации.Имя = РеквизитАдресации.Имя;
		ЭлементРеквизитАдресации.Синоним = РеквизитАдресации.Имя;
		ЭлементРеквизитАдресации.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + РеквизитАдресации.Имя;
		
		ЗаполнитьТипыОбъектаМетаданных(ЭлементРеквизитАдресации, РеквизитАдресации);
		УстановитьИконкуОбъектаМетаданных(ЭлементРеквизитАдресации);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ДобавитьМенеджерРеквизитовАдресации(ЭлементОбъектМетаданных)

	ЭлементРеквизитыАдресации = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементРеквизитыАдресации.Класс = "РеквизитАдресации";
	ЭлементРеквизитыАдресации.Имя = "РеквизитыАдресации";
	ЭлементРеквизитыАдресации.Синоним = "РеквизитыАдресации";
	ЭлементРеквизитыАдресации.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементРеквизитыАдресации.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементРеквизитыАдресации);
	
	Возврат ЭлементРеквизитыАдресации;	
	
КонецФункции

&НаСервере
Процедура ДобавитьИзмеренияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
		
	ЭлементИзмерения = ДобавитьМенеджерИзмерений(ЭлементОбъектМетаданных);
	
	Измерения = ОбъектМетаданных.Измерения;
	Если Измерения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Измерение Из Измерения Цикл
		
		ЭлементИзмерение = ЭлементИзмерения.ПолучитьЭлементы().Добавить();
		ЭлементИзмерение.Класс = "Измерение";
		ЭлементИзмерение.Имя = Измерение.Имя;
		ЭлементИзмерение.Синоним = Измерение.Имя;
		ЭлементИзмерение.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Измерение.Имя;
		ЗаполнитьТипыОбъектаМетаданных(ЭлементИзмерение, Измерение);
		
		УстановитьИконкуОбъектаМетаданных(ЭлементИзмерение);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ДобавитьМенеджерИзмерений(ЭлементОбъектМетаданных)
	
	ЭлементИзмерения = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементИзмерения.Класс = "Измерение";
	ЭлементИзмерения.Имя = "Измерения";
	ЭлементИзмерения.Синоним = "Измерения";
	ЭлементИзмерения.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементИзмерения.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементИзмерения);

	Возврат ЭлементИзмерения;
	
КонецФункции

&НаСервере
Процедура ДобавитьРесурсыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементРесурсы = ДобавитьМенеджерРесурсов(ЭлементОбъектМетаданных);
	
	Ресурсы = ОбъектМетаданных.Ресурсы;
	Если Ресурсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Ресурс Из Ресурсы Цикл
		
		ЭлементРесурс = ЭлементРесурсы.ПолучитьЭлементы().Добавить();
		ЭлементРесурс.Класс = "Ресурс";
		ЭлементРесурс.Имя = Ресурс.Имя;
		ЭлементРесурс.Синоним = Ресурс.Синоним;
		ЭлементРесурс.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Ресурс.Имя;
		
		ЗаполнитьТипыОбъектаМетаданных(ЭлементРесурс, Ресурс);
		УстановитьИконкуОбъектаМетаданных(ЭлементРесурс);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ДобавитьМенеджерРесурсов(ЭлементОбъектМетаданных)
	
	ЭлементРесурсы = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементРесурсы.Класс = "Ресурс";
	ЭлементРесурсы.Имя = "Ресурсы";
	ЭлементРесурсы.Синоним = "Ресурсы";
	ЭлементРесурсы.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементРесурсы.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементРесурсы);
	
	Возврат ЭлементРесурсы;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗначенияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементЗначения = ДобавитьМенеджерЗначений(ЭлементОбъектМетаданных);
	
	Значения = ОбъектМетаданных.ЗначенияПеречисления;
	Если Значения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Значение Из Значения Цикл
		
		ЭлементЗначение = ЭлементЗначения.ПолучитьЭлементы().Добавить();
		ЭлементЗначение.Класс = "Значение";
		ЭлементЗначение.Имя = Значение.Имя;
		ЭлементЗначение.Синоним = Значение.Синоним;
		ЭлементЗначение.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Значение.Имя;
		
		УстановитьИконкуОбъектаМетаданных(ЭлементЗначение);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ДобавитьМенеджерЗначений(ЭлементОбъектМетаданных)
	
	ЭлементЗначения = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементЗначения.Класс = "Значение";
	ЭлементЗначения.Имя = "Значения";
	ЭлементЗначения.Синоним = "Значения";
	ЭлементЗначения.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементЗначения.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементЗначения);
	
	Возврат ЭлементЗначения;
	
КонецФункции

&НаСервере
Процедура ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
		
	ЭлементТабличныеЧасти = ДобавитьМенеджерТабличныхЧастей(ЭлементОбъектМетаданных);
	
	ТабличныеЧасти = ОбъектМетаданных.ТабличныеЧасти;
	Если ТабличныеЧасти.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ЭлементТабличнаяЧасть = ЭлементТабличныеЧасти.ПолучитьЭлементы().Добавить();
		ЭлементТабличнаяЧасть.Класс = "ТабличнаяЧасть";
		ЭлементТабличнаяЧасть.Имя = ТабличнаяЧасть.Имя;
		ЭлементТабличнаяЧасть.Синоним = ТабличнаяЧасть.Синоним;
		ЭлементТабличнаяЧасть.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + ТабличнаяЧасть.Имя;
		ЭлементТабличнаяЧасть.ТабличнаяЧасть = Истина;
	
		УстановитьИконкуОбъектаМетаданных(ЭлементТабличнаяЧасть);	
		ДобавитьРеквизитыОбъектаМетаданных(ЭлементТабличнаяЧасть, ТабличнаяЧасть);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ДобавитьМенеджерТабличныхЧастей(ЭлементОбъектМетаданных)
	
	ЭлементТабличныеЧасти = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементТабличныеЧасти.Класс = "ТабличнаяЧасть";
	ЭлементТабличныеЧасти.Имя = "ТабличныеЧасти";
	ЭлементТабличныеЧасти.Синоним = "ТабличныеЧасти";
	ЭлементТабличныеЧасти.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементТабличныеЧасти.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементТабличныеЧасти);
	
	Возврат ЭлементТабличныеЧасти;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементРеквизиты = ДобавитьМенеджерРеквизитов(ЭлементОбъектМетаданных);
	
	РеквизитыОбъекта = ОбъектМетаданных.Реквизиты;
	Если РеквизитыОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		
		ЭлементРеквизит = ЭлементРеквизиты.ПолучитьЭлементы().Добавить();
		ЭлементРеквизит.Класс = "Реквизит";
		ЭлементРеквизит.Имя = Реквизит.Имя;
		ЭлементРеквизит.Синоним = Реквизит.Имя;
		ЭлементРеквизит.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Реквизит.Имя;
		ЗаполнитьТипыОбъектаМетаданных(ЭлементРеквизит, Реквизит);
		
		УстановитьИконкуОбъектаМетаданных(ЭлементРеквизит);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьМенеджерРеквизитов(ЭлементОбъектМетаданных)
	
	Если Не ЭлементОбъектМетаданных.ТабличнаяЧасть Тогда
		
		ЭлементРеквизиты = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
		ЭлементРеквизиты.Класс = "Реквизит";
		ЭлементРеквизиты.Имя = "Реквизиты";
		ЭлементРеквизиты.Синоним = "Реквизиты";
		ЭлементРеквизиты.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
		ЭлементРеквизиты.МенеджерПодчиненныхЭлементов = Истина;
		
	Иначе
		ЭлементРеквизиты = ЭлементОбъектМетаданных;
	КонецЕсли;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементРеквизиты);
	
	Возврат ЭлементРеквизиты;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТипыОбъектаМетаданных(ЭлементОбъектаМетаданных, ОбъектМетаданных)
	
	ТипыРеквизита = ОбъектМетаданных.Тип.Типы();
	ЭлементОбъектаМетаданных.Тип = ТипыОбъектов(ТипыРеквизита);
	
КонецПроцедуры // ЗаполнитьТипыОбъектаМетаданных()

&НаСервере
Функция ТипыОбъектов(ОписаниеТиповОбъекта)
	
	Если ОписаниеТиповОбъекта.Количество() = 1 Тогда
		
		ТипРеквизита = ОписаниеТиповОбъекта[0];
		Возврат ТипЗначения(ТипРеквизита);
		
	Иначе
		
		СписокТипов = Новый СписокЗначений();
		Для Каждого ТипОбъекта Из ОписаниеТиповОбъекта Цикл
			СписокТипов.Добавить(ТипЗначения(ТипОбъекта));
		КонецЦикла;
		
		Возврат СписокТипов;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТипЗначения(ТипРеквизита)
	
	Если ТипРеквизита = Тип("Число") Или ТипРеквизита = Тип("Строка") 
		Или ТипРеквизита = Тип("Булево") Или ТипРеквизита = Тип("Дата")
		Или ТипРеквизита = Тип("ХранилищеЗначения")
		Или ТипРеквизита = Тип("ПостроительОтчета")
		Или ТипРеквизита = Тип("ВидСравнения")
		Или ТипРеквизита = Тип("Отбор")
		Или ТипРеквизита = Тип("ПоляНастройки")
		Или ТипРеквизита = Тип("НаправлениеСортировки")Тогда
		
		ПредставлениеТипа = Строка(ТипРеквизита);
		
	Иначе 
		СсылкаТипа = Новый (ТипРеквизита);
		Если Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ПредставлениеТипа = "Перечисление." + СсылкаТипа.Метаданные().Имя;
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ПредставлениеТипа = "Справочник." + СсылкаТипа.Метаданные().Имя;
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ПредставлениеТипа = "Документ." + СсылкаТипа.Метаданные().Имя;
			//ИначеЕсли ВнешниеИсточникиДанных.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			//	ПредставлениеТипа = "ВнешнийИсточникДанных." + СсылкаТипа.Метаданные().Имя;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ПредставлениеТипа;
	
КонецФункции

&НаСервере
Процедура ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементРодитель, ОбъектМетаданных)	
	
	ОбъектыСФормами = Новый СписокЗначений();
	ОбъектыСФормами.Добавить("Справочники");
	ОбъектыСФормами.Добавить("Документы");
	ОбъектыСФормами.Добавить("ЖурналыДокументов");
	ОбъектыСФормами.Добавить("Перечисления");
	ОбъектыСФормами.Добавить("Отчеты");
	ОбъектыСФормами.Добавить("Обработки");
	ОбъектыСФормами.Добавить("ПланыВидовХарактеристик");
	ОбъектыСФормами.Добавить("ПланыСчетов");
	ОбъектыСФормами.Добавить("ПланыВидовРасчета");
	ОбъектыСФормами.Добавить("РегистрыСведений");
	ОбъектыСФормами.Добавить("РегистрыНакопления");
	ОбъектыСФормами.Добавить("РегистрыБухгалтерии");
	ОбъектыСФормами.Добавить("БизнесПроцессы");
	ОбъектыСФормами.Добавить("Задачи");
	
	Если Не ОбъектыСФормами.НайтиПоЗначению(ИмяМенеджераКласса) = Неопределено Тогда
		
		ЭлементФормы = ДобавитьМенеджерФорм(ЭлементРодитель);
		
		Для Каждого ОбъектМетаданныхФорма Из ОбъектМетаданных.Формы Цикл
			
			ЭлементФорма = ЭлементФормы.ПолучитьЭлементы().Добавить();
			ЭлементФорма.Класс = "Форма";
			ЭлементФорма.Имя   = ОбъектМетаданныхФорма.Имя;
			ЭлементФорма.Синоним = ОбъектМетаданныхФорма.Представление();
			ЭлементФорма.ПолноеИмя = ОбъектМетаданныхФорма.ПолноеИмя();
			ЭлементФорма.Тип = ОбъектМетаданныхФорма.ТипФормы;
			УстановитьИконкуОбъектаМетаданных(ЭлементФорма);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьФормуОбъектаМетаданных()

&НаСервере
Функция ДобавитьМенеджерФорм(ЭлементОбъект)
	
	ЭлементФормы = ЭлементОбъект.ПолучитьЭлементы().Добавить();
	ЭлементФормы.Класс = "Форма";
	ЭлементФормы.Имя = "Формы";
	ЭлементФормы.Синоним = "Формы";
	ЭлементФормы.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементФормы);
		
	Возврат ЭлементФормы;		
		
КонецФункции

&НаСервере
Процедура ДобавитьКомандыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементКоманды = ДобавитьМенеджерКоманд(ЭлементОбъектМетаданных);

	КомандыОбъекта = ОбъектМетаданных.Команды;
	Если КомандыОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Команда Из КомандыОбъекта Цикл
		
		ЭлементКоманда = ЭлементКоманды.ПолучитьЭлементы().Добавить();
		ЭлементКоманда.Класс = "Команда";
		ЭлементКоманда.Имя = Команда.Имя;
		ЭлементКоманда.Синоним = Команда.Синоним;
		ЭлементКоманда.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Команда.Имя;
		УстановитьИконкуОбъектаМетаданных(ЭлементКоманда);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ДобавитьМенеджерКоманд(ЭлементОбъектМетаданных)
	
	ЭлементКоманды = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементКоманды.Класс = "Команда";
	ЭлементКоманды.Имя = "Команды";
	ЭлементКоманды.Синоним = "Команды";
	ЭлементКоманды.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементКоманды.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементКоманды);

	Возврат ЭлементКоманды;	
	
КонецФункции

&НаСервере
Процедура ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементМакеты = ДобавитьМенеджерМакетов(ЭлементОбъектМетаданных);
		
	Макеты = ОбъектМетаданных.Макеты;
	Если Макеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Макет Из Макеты Цикл
		
		ЭлементМакет = ЭлементМакеты.ПолучитьЭлементы().Добавить();
		ЭлементМакет.Класс = "Макет";
		ЭлементМакет.Имя = Макет.Имя;
		ЭлементМакет.Синоним = Макет.Синоним;
		ЭлементМакет.ПолноеИмя = ОбъектМетаданных.ПолноеИмя() + "." + Макет.Имя;
		ЭлементМакет.ИндексКартинки = 23;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ДобавитьМенеджерМакетов(ЭлементОбъектМетаданных)
		
	ЭлементМакеты = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементМакеты.Класс = "Макет";
	ЭлементМакеты.Имя = "Макеты";
	ЭлементМакеты.Синоним = "Макеты";
	ЭлементМакеты.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементМакеты.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементМакеты);
	
	Возврат ЭлементМакеты;
	
КонецФункции

&НаКлиенте
Функция ТекущийОбъектМетаданных()
	
	Возврат СтруктураМетаданных.НайтиПоИдентификатору(Элементы.СтруктураМетаданных.ТекущаяСтрока);
	
КонецФункции // ТекущийОбъектМетаданных()

&НаКлиенте
Процедура ВосстановитьСтруктуруМетаданныхИзКэша()
	 
//	ИмяФайлаКэша = КаталогВременныхФайлов() + "edit_structurebase.xml";
//	НайденныеФайлы = НайтиФайлы(ИмяФайлаКэша);
//	Если НайденныеФайлы.Количество() Тогда
//		
//		ПотокЧтения = Новый ЧтениеXML();
//		ПотокЧтения.ОткрытьФайл(ИмяФайлаКэша);
//		
//		СтруктураБазы = СериализаторXDTO.ПрочитатьXML(ПотокЧтения);
//		
//		ЗначениеВДанныеФормы(СтруктураБазы, СтруктураМетаданных);
//		
//	Иначе
//		
//	КонецЕсли;
//	
КонецПроцедуры // ВосстановитьСтруктуруМетаданныхИзКэша()

&НаКлиенте
Процедура СохранитьСтруктуруМетаданныхВКэш()
//	
//	ИмяФайлаКэша = КаталогВременныхФайлов() + "edit_structurebase.xml";
//	
//	СтруктураБазы = ДанныеФормыВЗначение(СтруктураМетаданных, Тип("ДеревоЗначений"));
//	Если СтруктураБазы.Строки.Количество() Тогда
//		СтруктураБазы.Строки[0].Строки.Очистить();
//	КонецЕсли; 
//
//	ПотокЗаписи = Новый ЗаписьXML();
//	ПотокЗаписи.ОткрытьФайл(ИмяФайлаКэша, "UTF-8");
//	
//	СериализаторXDTO.ЗаписатьXML(ПотокЗаписи, СтруктураБазы);
//	ПотокЗаписи.Закрыть();
//	
КонецПроцедуры // СохранитьСтруктуруМетаданныхВКэш()

&НаКлиенте
Функция ИмяМенеджераОбъектов(УзелОбъектаМетаданных)
	
	ИмяМенеджераОбъектов = "";
	Если Не УзелОбъектаМетаданных.МенеджерОбъектов Тогда
		ИмяМенеджераОбъектов = ИмяМенеджераОбъектов(УзелОбъектаМетаданных.ПолучитьРодителя());
	Иначе
		ИмяМенеджераОбъектов = УзелОбъектаМетаданных.Имя;
		
	КонецЕсли; 
	
	Возврат ИмяМенеджераОбъектов;
	
КонецФункции // ИмяМенеджераОбъектов()

&НаСервере
Процедура ДобавитьСвойстваОбъектаМетаданных(ИндексЭлемента, ИмяМенеджераКласса, ИмяОбъекта)
	
	ЭлементОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(ИндексЭлемента);
	
	ОбъектМетаданных = Метаданные[ИмяМенеджераКласса][ИмяОбъекта];
	СвойстваОбъекта = СвойстваОбъектаМетаданных(ИмяМенеджераКласса);

		Если СвойстваОбъекта.Измерения Тогда
			ДобавитьИзмеренияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли;
		
		Если СвойстваОбъекта.Ресурсы Тогда
			ДобавитьРесурсыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли;
		
		Если СвойстваОбъекта.РеквизитыАдресации Тогда
			ДобавитьРеквизитыАдресацииОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если СвойстваОбъекта.Реквизиты Тогда
			ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли;
		
		Если СвойстваОбъекта.ЗначенияПеречисления Тогда
			ДобавитьЗначенияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если СвойстваОбъекта.ТабличныеЧасти Тогда
			ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если СвойстваОбъекта.Формы Тогда
			ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если СвойстваОбъекта.Команды Тогда
			ДобавитьКомандыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если СвойстваОбъекта.Макеты Тогда
			ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли;
		
КонецПроцедуры // ДобавитьСвойстваОбъектаМетаданных()

&НаСервере
Процедура КомандаВывестиСтруктуруСПодчиненнымиЭлементамиНаСервере()

	мЗаполнитьСтруктуруСПодчиненнымиЭлементами = Истина;
	СтруктураМетаданных.ПолучитьЭлементы().Очистить();
	ЗаполнитьСтруктуруМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРасширениеВСтруктуруМетаданных()
	
//	Фильтр = "Файл обработки, отчета (*.epf;*.erf)|*.epf;*.erf";
//
//	Режим = РежимДиалогаВыбораФайла.Открытие;
//	ДиалогЗагрузкиФайла = Новый ДиалогВыбораФайла(Режим);
//	
//	ДиалогЗагрузкиФайла.Фильтр = Фильтр;
//	ДиалогЗагрузкиФайла.Заголовок = "Выбирите файл внешней обработки или внешнего отчета.";
//	
//	Если ДиалогЗагрузкиФайла.Выбрать() Тогда
//		
//		АдресХранилища = "";
//		ПоместитьФайл(АдресХранилища, ДиалогЗагрузкиФайла.ПолноеИмяФайла,, Ложь);
//		ДобавитьМетаданныеРасширенияВСтруктуруМетаданных(АдресХранилища, ДиалогЗагрузкиФайла.ПолноеИмяФайла);
//		
//	КонецЕсли;
//	
КонецПроцедуры // ДобавитьРасширениеВСтруктуруМетаданных()

&НаСервере
Процедура ДобавитьМетаданныеРасширенияВСтруктуруМетаданных(АдресХранилища, ФайлРасширения)
	
	РасширениеФайла = Прав(ФайлРасширения, 3);
	Если НРег(РасширениеФайла) = "epf" Тогда
		КлассРасширения = "Обработка";
		ИмяМенеджераКласса = "Обработки";
	ИначеЕсли НРег(РасширениеФайла) = "erf" Тогда
		КлассРасширения = "Отчет";
		ИмяМенеджераКласса = "Отчеты";
	КонецЕсли;
	
	ОбъектРасширения = Неопределено;
	Если КлассРасширения = "Обработка" Тогда
		ИмяРасширения = ВнешниеОбработки.Подключить(АдресХранилища);
		ОбъектРасширения = ВнешниеОбработки.Создать(ИмяРасширения);
	Иначе
		ИмяРасширения = ВнешниеОтчеты.Подключить(АдресХранилища);
		ОбъектРасширения = ВнешниеОтчеты.Создать(ИмяРасширения);
	КонецЕсли; 
	
	УзелРасшериний = Неопределено;
	УзелВыбранныеОбъекты = СтруктураМетаданных.ПолучитьЭлементы()[0];
	Для Каждого УзелМенеджеров Из УзелВыбранныеОбъекты.ПолучитьЭлементы() Цикл
		
		Если УзелМенеджеров.Имя = "Расширения" Тогда
			УзелРасшериний = УзелМенеджеров;
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если УзелРасшериний = Неопределено Тогда
		
		УзелРасшериний = УзелВыбранныеОбъекты.ПолучитьЭлементы().Добавить();
		УзелРасшериний.Имя = "Расширения";
		УзелРасшериний.Синоним = "Расширения";
		УзелРасшериний.Класс   = "Расширения";
		УзелРасшериний.ИндексКартинки = 59;
		
	КонецЕсли;
	
	ОбъектМетаданных = ОбъектРасширения.Метаданные();
	
	ЭлементОбъектМетаданных = УзелРасшериний.ПолучитьЭлементы().Добавить();
	ЭлементОбъектМетаданных.Класс = КлассРасширения;
	ЭлементОбъектМетаданных.Имя = ОбъектМетаданных.Имя;
	ЭлементОбъектМетаданных.Синоним = ОбъектМетаданных.Синоним;
	ЭлементОбъектМетаданных.ИндексКартинки = ?(КлассРасширения = "Обработка", 41, 39);
	ЭлементОбъектМетаданных.АдресХранилищаОбработки = АдресХранилища;
	ЭлементОбъектМетаданных.ФайлРасширения = ФайлРасширения;
	ЭлементОбъектМетаданных.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	
	ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	
КонецПроцедуры // ДобавитьМетаданныеРасширенияВСтруктуруМетаданных()

#КонецОбласти // Процедуры_работы_со_структурой_метаданных


&НаСервере
Процедура УстановитьИконкуОбъектаМетаданных(ЭлементОбъектаМетаданных)
	
	Если (ЭлементОбъектаМетаданных.Класс = "Конфигурация") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 0;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "МодульОбычногоПриложения"
		Или ЭлементОбъектаМетаданных.Класс = "МодульУправляемогоПриложения"
		Или ЭлементОбъектаМетаданных.Класс = "МодульВнешнегоСоединения"
		Или ЭлементОбъектаМетаданных.Класс = "МодульСеанса") Тогда
	
		ЭлементОбъектаМетаданных.ИндексКартинки = 1;
		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Общие") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 5;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Буфер") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 58;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Расширения") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 59;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Подсистема") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 6;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийМодуль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 7;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПараметрСеанса") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 8;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Роль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 9;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийРеквизит") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 10;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланОбмена") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 11;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "КритерийОтбора") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 12;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПодпискаНаСобытие") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 13;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегламентноеЗадание") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 14;			
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ФункциональнаяОпция") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 15;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПараметрФункциональнойОпции") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 16;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОпределяемыйТип") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 17;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ХранилищеНастроек") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 18;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяФорма" 
		Или ЭлементОбъектаМетаданных.Класс = "Форма") Тогда	
		
		ЭлементОбъектаМетаданных.ИндексКартинки = 19;
		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяКоманда" 
		Или ЭлементОбъектаМетаданных.Класс = "Команда") Тогда

		ЭлементОбъектаМетаданных.ИндексКартинки = 20;
			
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ГруппаКоманд") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 21;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Интерфейс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 22;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийМакет" 
		Или ЭлементОбъектаМетаданных.Класс = "Макет") Тогда
		
		ЭлементОбъектаМетаданных.ИндексКартинки = 23;
		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяКартинка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 24;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПакетXDTO") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 25;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "WebСервис") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 26;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "HTTPСервис") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 27;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "WSСсылка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 28;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ЭлементСтиля") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 29;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Стиль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 30;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Язык") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 31;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Константа") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 32;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Справочник") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 33;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "НумераторДокументов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 34;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Последовательность") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 35;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Документ") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 36;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ЖурналДокументов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 37;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Перечисление") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 38;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Отчет") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 39;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Обработка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 41;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланВидовХарактеристик") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 43;		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланСчетов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 44;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланВидовРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 45;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрСведений") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 46;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрНакопления") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 47;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрБухгалтерии") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 48;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 49;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "БизнесПроцесс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 50;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Задача") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 51;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ВнешнийИсточникДанных") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 52;
	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Реквизит"
	Или ЭлементОбъектаМетаданных.Класс = "Значение") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 53;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ТабличнаяЧасть") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 54;
		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Измерение") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 55;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Ресурс"
		Или ЭлементОбъектаМетаданных.Класс = "РеквизитАдресации") Тогда
			
		ЭлементОбъектаМетаданных.ИндексКартинки = 56;
	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрНакопления") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 47;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрБухгалтерии") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 48;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 49;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "БизнесПроцесс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 50;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Задача") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 51;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ВнешнийИсточникДанных") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 52;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДанныеОбъектаВРедактор(СтрокаЭлементаВыборка, ВВидеТипа)
	
	ОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(СтрокаЭлементаВыборка);
	СкопироватьДанныеОбъектаМетаданныхВБуфер(ОбъектМетаданных);
	
	ПредставлениеОбъекта = МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, ВВидеТипа);
	
	МаркерФорматирования = Новый Структура("Маркер, Представление, Объект", ПредставлениеОбъекта.Текст, 
		ПредставлениеОбъекта.ВыделяемыйФрагмент, ОбъектМетаданных);
		
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры // ДобавитьДанныеОбъектаВРедактор()

&НаКлиенте
Процедура СкопироватьДанныеОбъектаМетаданныхВБуфер(УзелЭлементаВыборка)
	
	УзелБуфераОбъектов = СтруктураМетаданных.ПолучитьЭлементы().Получить(0);
	
	РодительОбъекта = УзелЭлементаВыборка.ПолучитьРодителя();
	ОбъектМетаданныхИсточник = ОпределитьОбъектМетаданныхВыбранногоЭлемента(УзелЭлементаВыборка, РодительОбъекта);
	Если РодительОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМенеджера = РодительОбъекта.Класс;
	
	ЭлементыБуфера = УзелБуфераОбъектов.ПолучитьЭлементы();
	УзелРазмещенияОбъектаВБуфере = УзелРазмещенияОбъектаВБуфере(ЭлементыБуфера, ИмяМенеджера, РодительОбъекта);
	СкопироватьВыбранныйОбъектВБуфер(УзелРазмещенияОбъектаВБуфере, ОбъектМетаданныхИсточник);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьОбъектМетаданныхВыбранногоЭлемента(УзелЭлементаВыборка, РодительОбъекта)
	
	ВыбранныйОбъект = УзелЭлементаВыборка;
	РодительОбъекта = УзелЭлементаВыборка.ПолучитьРодителя();
	Пока Не РодительОбъекта = Неопределено И Не РодительОбъекта.МенеджерОбъектов Цикл
		ВыбранныйОбъект = РодительОбъекта;
		РодительОбъекта = РодительОбъекта.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат ВыбранныйОбъект;
	
КонецФункции

&НаКлиенте
Функция УзелРазмещенияОбъектаВБуфере(ЭлементыБуфера, ИмяМенеджера, РодительОбъекта)
	
	УзелРазмещенияВБуфере = Неопределено;
	Для Каждого ЭлементБуфера Из ЭлементыБуфера Цикл
		Если ЭлементБуфера.Класс = ИмяМенеджера Тогда
			УзелРазмещенияВБуфере = ЭлементБуфера;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелРазмещенияВБуфере = Неопределено Тогда
		УзелРазмещенияВБуфере = ЭлементыБуфера.Добавить();
		ЗаполнитьЗначенияСвойств(УзелРазмещенияВБуфере, РодительОбъекта);
	КонецЕсли;
	
	Возврат УзелРазмещенияВБуфере;
	
КонецФункции

&НаКлиенте
Процедура СкопироватьВыбранныйОбъектВБуфер(УзелРазмещенияВБуфере, ВыбранныйОбъект)
	
	ОбъектыУзлаБуфера = УзелРазмещенияВБуфере.ПолучитьЭлементы();
	Для Каждого ОбъектУзлаБуфера Из ОбъектыУзлаБуфера Цикл
		Если ОбъектУзлаБуфера.Имя = ВыбранныйОбъект.Имя Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	КопияОбъектаВБуфере = ОбъектыУзлаБуфера.Добавить();
	ЗаполнитьЗначенияСвойств(КопияОбъектаВБуфере, ВыбранныйОбъект);
	
	СкопироватьПодчиненныеЭлементыОбъекта(КопияОбъектаВБуфере, ВыбранныйОбъект.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПодчиненныеЭлементыОбъекта(ОбъектПриемник, ПодчиненныеЭлементыИсходника)
	
	Если ПодчиненныеЭлементыИсходника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПодчиненныйЭлементИсходника Из ПодчиненныеЭлементыИсходника Цикл
		
		ПодчиненыйЭлементПриемника = ОбъектПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(ПодчиненыйЭлементПриемника, ПодчиненныйЭлементИсходника);
		
		СкопироватьПодчиненныеЭлементыОбъекта(ПодчиненыйЭлементПриемника, 
		ПодчиненныйЭлементИсходника.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, ВВидеТипа, Условие = "", 
	ВыводитьБлокСкрипта = Ложь)
		
	МаркированныйТекст = Новый Структура("Текст, ВыделяемыйФрагмент");
	МаркированныйТекст.ВыделяемыйФрагмент = "";
	
	Если ОбъектМетаданных.Класс = "Форма" Тогда
		
		ОбъектВладелецФормы = ОбъектМетаданных.ПолучитьРодителя().ПолучитьРодителя();
		Если Не ОбъектВладелецФормы = Неопределено Тогда
			ПредставлениеОбъетка = ОбъектВладелецФормы.Синоним;
		Иначе
			ПредставлениеОбъетка = "";
		КонецЕсли; 
		
		Если Условие = "ПереходитьТолькоНаОткрытыеФормы" Тогда
			МаркированныйТекст.Текст = "ФормаОткрыта=[" + ОбъектМетаданных.ПолноеИмя + "; %%" 
				+ ?(ВыводитьБлокСкрипта, " {Сообщить(""Это блок для скрипат"")}", "") + "]";
		Иначе
			МаркированныйТекст.Текст = "Форма=[" + ОбъектМетаданных.ПолноеИмя + "; %%" 
				+ ?(ВыводитьБлокСкрипта, " {Сообщить(""Это блок для скрипат"")}", "") + "]";
		КонецЕсли;
		
		МаркированныйТекст.ВыделяемыйФрагмент = ПредставлениеОбъетка;
		
	Иначе
		
		МаркированныйТекст.Текст = ОбъектМетаданных.ПолноеИмя;
		Если ОбъектМетаданных.Класс = "Реквизит"
			Или ОбъектМетаданных.Класс = "Измерение"
			Или ОбъектМетаданных.Класс = "Ресурс" Тогда
			
			Если ТипЗнч(ОбъектМетаданных.Тип) = Тип("Строка") Тогда
				МаркированныйТекст.Текст = МаркированныйТекст.Текст + ":{" + ОбъектМетаданных.Тип + "}"
			ИначеЕсли ТипЗнч(ОбъектМетаданных.Тип) = Тип("СписокЗначений") Тогда
				
				КоличествоТипов = ОбъектМетаданных.Тип.Количество();
				ИндексТипа = 1;
				
				МаркированныйТекст.Текст = МаркированныйТекст.Текст + ":{";
				Для Каждого Тип Из ОбъектМетаданных.Тип Цикл
					МаркированныйТекст.Текст = МаркированныйТекст.Текст + Тип.Значение 
						+ ?(КоличествоТипов = ИндексТипа, "", "; ");
					ИндексТипа = ИндексТипа + 1;
				КонецЦикла;
				
				МаркированныйТекст.Текст = МаркированныйТекст.Текст + "}";
				
			КонецЕсли;
			
		Иначе
			
			Если ВВидеТипа Тогда
				МаркированныйТекст.Текст = ":{" + МаркированныйТекст.Текст + "}"
			КонецЕсли;
			
		КонецЕсли;
		
		МаркированныйТекст.Текст = МаркированныйТекст.Текст + "%%";
		
	КонецЕсли; 
	
	Возврат МаркированныйТекст;
	
КонецФункции // МаркированноеПредставлениеОбъектаМетаданных()

&НаКлиенте
Процедура ДобавитьМаркерВТекст(СтруктураМаркера, ВыделятьДобавленныйТекст)
	
	ДобавленоОписаниеОбъекта = Ложь;
	
	МаркерТекста = СтруктураМаркера.Маркер;
	ПредставлениеМаркера = СтруктураМаркера.Представление;
	
	Если ПредставлениеМаркера = "Объект метаданных" Тогда
		ПредставлениеМаркера = ИмяОбъектаМетаданных(СтруктураМаркера.Объект);
		ДобавленоОписаниеОбъекта = Истина;
	КонецЕсли; 
	
	ПолеРедактора = Элементы.РедакторкHtml;
	
	// Определяем выделенный кусок кода
	ВыделенныйТекст = ПолеРедактора.ВыделенныйТекст;
	
	Если ПустаяСтрока(ВыделенныйТекст) Тогда
		
		НачалоЗакладка = Неопределено;
		КонецЗакладки = Неопределено;
				
		ПолеРедактора.ПолучитьГраницыВыделения(НачалоЗакладка, КонецЗакладки);
		
		// Добавляем новый текст
		НачалоМаркированногоТекста = Найти(МаркерТекста, "%%"); 
		ДлинаТекстаПредставления   = СтрДлина(ПредставлениеМаркера);
		
		МаркированныйТекст = СтрЗаменить(МаркерТекста, "%%", ПредставлениеМаркера);
		
		ЭтаФорма.ТекущийЭлемент = ПолеРедактора;
		СтрокаРедактора = РедакторкHtml.Вставить(НачалоЗакладка, МаркированныйТекст);
		ОформитьФорматированнуюСтроку(СтрокаРедактора, ДобавленоОписаниеОбъекта);
		
		Если ВыделятьДобавленныйТекст Тогда
			
			// Выделяем текст для быстрой замены
			ПолеРедактора.УстановитьГраницыВыделения(СтрокаРедактора.ЗакладкаНачала, СтрокаРедактора.ЗакладкаКонца);
							
		КонецЕсли;
			
	Иначе
		
		ТекстОбрамленныйМаркерами = СтрЗаменить(МаркерТекста, "%%", ВыделенныйТекст);
		ПолеРедактора.ВыделенныйТекст = ТекстОбрамленныйМаркерами;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьФорматированнуюСтроку(СтрокаРедактора, ДобавленоОписаниеОбъекта)
	
	Если ДобавленоОписаниеОбъекта Тогда
		СтрокаРедактора.ЦветТекста = Новый Цвет(, ,255);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьМаркерВТекст()

&НаКлиенте
Функция ИмяОбъектаМетаданных(ОбъектМетаданных)
	
	ИмяОбъекта = ИмяКлассаОбъекта(ОбъектМетаданных);
	
	Возврат ИмяОбъекта;
	
КонецФункции // ИмяОбъектаМетаданных()

&НаСервереБезКонтекста
Функция ИмяКлассаОбъекта(ОбъектМетаданных)
	
	КлассОбъекта = ОбъектМетаданных.Тип;
	Если Не ЗначениеЗаполнено(КлассОбъекта) Тогда
		Если ЗначениеЗаполнено(ОбъектМетаданных.Родитель.Тип) Тогда
			КлассОбъекта = ОбъектМетаданных.Родитель.Тип;
		Иначе
			Возврат "." + ОбъектМетаданных.Имя;
		КонецЕсли;		
	КонецЕсли; 
	
	ИндексЗначения = Перечисления.иид_ТипыОбъектовМетаданных.Индекс(КлассОбъекта);
	ИмяКласса = Метаданные.Перечисления.иид_ТипыОбъектовМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	
	Возврат ИмяКласса + "." + ОбъектМетаданных.Имя;
	
КонецФункции // ИмяКлассаОбъекта()

#Область Тест

&НаКлиенте
Процедура Тест_ВставитьТекстВРедактор(Команда)

	ПредставлениеМаркера = "Тест тест Документ.Какой-то";
	 	
	ПолеТекстаСообщения = Элементы.РедакторкHtml;
	
	// Определяем выделенный кусок кода
	ВыделенныйТекст = ПолеТекстаСообщения.ВыделенныйТекст;
	
	Если ПустаяСтрока(ВыделенныйТекст) Тогда
		
		НачалоЗакладка = Неопределено;
		КонецЗакладки = Неопределено;
				
		ПолеТекстаСообщения.ПолучитьГраницыВыделения(НачалоЗакладка, КонецЗакладки);
		
		ЭтаФорма.ТекущийЭлемент = ПолеТекстаСообщения;
		Строка = РедакторкHtml.Вставить(НачалоЗакладка, ПредставлениеМаркера);
		Строка.ЦветТекста = Новый Цвет(255, 0, 0);
		ПолеТекстаСообщения.УстановитьГраницыВыделения(Строка.ЗакладкаНачала, Строка.ЗакладкаКонца);
		
//		ПолеТекстаСообщения.ВыделенныйТекст = ПредставлениеМаркера;
		
//		Если ВыделятьДобавленныйТекст Тогда
//			
//			// Выделяем текст для быстрой замены
//			НачалоВыделенияТекста = НачалоКолонки + НачалоМаркированногоТекста - 1;
//			ПолеТекстаСообщения.УстановитьГраницыВыделения(НачалоЗакладка, КонецЗакладки);
//				
//		КонецЕсли;
			
	Иначе
		
//		ТекстОбрамленныйМаркерами = СтрЗаменить(МаркерТекста, "%%", ВыделенныйТекст);
		ПолеТекстаСообщения.ВыделенныйТекст = ПредставлениеМаркера;
		
	КонецЕсли; 


КонецПроцедуры

#КонецОбласти