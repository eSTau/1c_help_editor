
#Область ОписаниеПеременных

&НаКлиенте
Перем мНастройкиТекущегоЭлемента;

&НаКлиенте
Перем мПустаяКартинка;

&НаКлиенте
Перем мКартинкаУказательВПраво;

&НаКлиенте
Перем мКартинкаУказательВниз;

&НаКлиенте
Перем мЦветВыделенияЭлементовФормы;

&НаКлиенте
Перем мСписокИконок;

&НаКлиенте
Перем мНумерацияСлужебныхКнопок;

&НаКлиенте
Перем мОткрытыеФормы;

&НаКлиенте
Перем мРасшифровкиСсылок;

&НаКлиенте
Перем ЗакрытьФормуБезКонтроля;

&НаКлиенте
Перем ВыполненаПрограммнаяАктивизацияСтроки;

&НаКлиенте
Перем мНастройкиФормы;

&НаСервере
Перем мЗаполнитьСтруктуруСПодчиненнымиЭлементами;

#КонецОбласти

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоОбработка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
	УстановитьПервоначальныеНастройки();
	
	ИнициализацияТаблицаОткрытыхФорм();
	ИнициализироватьРасшифровки(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
//	Если РежимПросмотра = Ложь Тогда
//		Если Не ЗакрытьФормуБезКонтроля = Истина Тогда
//			КодВозврта = Вопрос("Вы уверены что хотите закрыть форму редактирования?", РежимДиалогаВопрос.ДаНет); 
//			Если КодВозврта = КодВозвратаДиалога.Нет Тогда
//				Отказ = Истина;
//			КонецЕсли; 
//		КонецЕсли;
//	КонецЕсли; 

	СохранитьСтруктуруМетаданныхВКэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") Тогда
		Если ИсточникВыбора.ИмяФормы = "Справочник.Пользователи.Форма.itilprofФормаСписка" Тогда
			МаркерФорматирования = Новый Структура("Маркер, Представление", "@{%%} " + ДокументВладелец.Номер + Символы.ПС, 
				ВыбранноеЗначение.УникальныйИдентификатор());
			ДобавитьМаркерВТекст(МаркерФорматирования, Ложь);
		КонецЕсли; 
	ИначеЕсли (ТипЗнч(ИсточникВыбора) = Тип("КонструкторСхемыКомпоновкиДанных")) Тогда 
		СхемаОтчета = ИсточникВыбора.ПолучитьСхему();
		ДобавитьОписаниеОтчета(СхемаОтчета);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не ИмяСобытия = "ПривязкаОткрытойФормыКИнтерактивнойСправке"
		И Не ИмяСобытия = "УдалениеФормыИзИнтерактивнойСправке"
		И Не ИмяСобытия = "ОткрытиеФормыРедактораОбъектов"
		И Не ИмяСобытия = "ОкончаниеРедактированиОбъекта" Тогда
			
		Возврат;
		
	КонецЕсли;

	Если (ИмяСобытия = "ПривязкаОткрытойФормыКИнтерактивнойСправке") Тогда
		ПривязатьФормуОбъектаКСправке(Параметр, Источник);
	ИначеЕсли (ИмяСобытия = "УдалениеФормыИзИнтерактивнойСправке") Тогда 
		ОтвязатьФормуОбъектаОтСправки(Параметр);
	ИначеЕсли ИмяСобытия = "ОткрытиеФормыРедактораОбъектов" Тогда
		ЗаполнитьТипыМетаданных(Параметр);	
	ИначеЕсли ИмяСобытия = "ОкончаниеРедактированиОбъекта" Тогда
		ДобавитьНовыйОбъектВСтруктуруМетаданных(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ФОРМЫ

&НаКлиенте
Процедура СконвертируемыйТекстПриИзменении(Элемент)
	
	ТекстHtml = СконвертируемыйТекст;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТекстHtmlПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Свойство("href") И ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяОткрываемойСтраницы = СокрЛП(ДанныеСобытия.href);
		Протокол = ВРег(СтрЛевДоСимвола(ИмяОткрываемойСтраницы, ":"));
		Если Протокол <> "HTTP" И Протокол <> "HTTPS" И Протокол <> "E1C" Тогда
			Возврат; // Не ссылка
		КонецЕсли;

		Если Протокол = "HTTP" Или Протокол = "HTTPS" Тогда
			
			СтандартнаяОбработка = Истина;
		
		ИначеЕсли Найти(ИмяОткрываемойСтраницы, ПолучитьНавигационнуюСсылкуИнформационнойБазы()) Тогда
			
			ИмяОткрываемойСтраницы = СтрЗаменить(ИмяОткрываемойСтраницы, ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "/", "");
			Если (Лев(ДанныеСобытия.Anchor.id, 5) = "idRef") Тогда
				ОбработатьРасшифровкуСообщения(СтрЗаменить(ИмяОткрываемойСтраницы, "#", ""));
			ИначеЕсли Найти(ДанныеСобытия.href, "#СсылкаНаСтатью") > 0 Тогда
				ПоказатьСодержаниеСтатьиСправки(ИмяОткрываемойСтраницы);
			ИначеЕсли (Найти(ИмяОткрываемойСтраницы, "#ФайлДокументооборот=")) Тогда
				ОткрытьУдаленныйФайл(ИмяОткрываемойСтраницы);
			Иначе
				Если Найти(ИмяОткрываемойСтраницы, "#") = 1 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
		//ИначеЕсли Найти(pEvtObj.srcElement.href, "#СсылкаНаСтатью") > 0 Тогда
		//	ПоказатьСодержаниеСтатьиСправки(pEvtObj.srcElement.hash);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ФОРМЫ

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ТАБЛИЦ_ФОРМЫ_И_ЭЛЕМЕНТОВ_УПРАВЛЕНИЯ

&НаКлиенте
Процедура СтруктураМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьДанныеОбъектаВРедактор(ВыбраннаяСтрока, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураМетаданныхПриАктивизацииСтроки(Элемент)
	
	ОбъектМетаданных = ТекущийОбъектМетаданных();
	ПоказатьСтруктуруЭлементовФормы(ОбъектМетаданных);
	НастроитьКомандыКонтекстногоМеню(ОбъектМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураЭлементовФормыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОтключитьОбработчикОжидания("ИскатьАктивныеЭлементы");
	ДобавитьИнформациюОЭлементеФормыВРедактор(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураЭлементовФормыПриАктивизацииСтроки(Элемент)
	
	Если НеОбрабатыватьСобытие() Тогда
		ВыполненаПрограммнаяАктивизацияСтроки = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Элемент.ТекущиеДанные.ПолныйПутьКЭлементуФормы.Количество() = 0 Тогда
		ПутьРасположенияЭлементаНаФорме = ПутьРасположенияЭлементаНаФорме(Элемент.ТекущиеДанные);
		СохранитьПутьРасположенияЭлементаНаФорме(ПутьРасположенияЭлементаНаФорме, Элемент.ТекущиеДанные.ПолныйПутьКЭлементуФормы);
	Иначе
		ПутьРасположенияЭлементаНаФорме = Элемент.ТекущиеДанные.ПолныйПутьКЭлементуФормы;
	КонецЕсли;
	
	Если ПоказатьЭлементНаФорме Тогда
		ОбъектМетаданныхФорма = СтруктураМетаданных.НайтиПоИдентификатору(Элементы.СтруктураМетаданных.ТекущаяСтрока);
		ИнтерактивнаяФорма = ИнтерактивнаяФорма(ОбъектМетаданныхФорма, Ложь);
		Если Не ИнтерактивнаяФорма = Неопределено Тогда
			
			Если ИнтерактивнаяФорма.Открыта() Тогда
				ВыделитьЭлементИнтерактивнойФормы(ИнтерактивнаяФорма, ПутьРасположенияЭлементаНаФорме);
			Иначе
				Сообщить("Перед работой с формой ее необходимо открыть");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти // ОБРАБОТЧИКИ_СОБЫТИЙ_ТАБЛИЦ_ФОРМЫ_И_ЭЛЕМЕНТОВ_УПРАВЛЕНИЯ

#Область ОБРАБОТЧИКИ_КОМАНД

&НаКлиенте
Процедура СохранитьСообщение(Команда)
	
	ЗакрытьФормуБезКонтроля = Истина;
	
    Если ПустаяСтрока(ТекстСообщения) Тогда
        Закрыть();   
        Возврат;
    КонецЕсли; 
    
    СохранитьФайлыВБазе();
    
	Если ФормаОткрытаВРежимеРедактированияСообщения Тогда
		
		ПараметрСообщения = Новый Структура("ИдентификаторФормыВладельца, ТекстСообщения, ИдентификаторСообщения, ТипСообщения", 
            Параметры.ИдентификаторФормыВладельца, ТекстСообщения, ИдентификаторСообщения, ТипСообщения);
            
        Оповестить("РедактированиеСообщения", ПараметрСообщения, "ФормаРедактированияТекстHtml");
		
	ИначеЕсли ИдентификаторСообщения = "ПользовательскаяИнструкция" Тогда
		
		ПараметрСообщения = Новый Структура("ИдентификаторФормыВладельца, ТекстСообщения, ИдентификаторСообщения, ТипСообщения",
            Параметры.ИдентификаторФормыВладельца, ТекстСообщения, ИдентификаторСообщения, ТипСообщения);
            
		Оповестить("ПользовательскаяИнструкция", ПараметрСообщения, "ФормаРедактированияТекстHtml");
		
	Иначе
		
        ПараметрСообщения = Новый Структура("ИдентификаторФормыВладельца, ТекстСообщения, ТипСообщения",
            Параметры.ИдентификаторФормыВладельца, ТекстСообщения, ТипСообщения);
            
		Оповестить("НовоеСообщение", ПараметрСообщения, "ФормаРедактированияТекстHtml");
        
	КонецЕсли; 
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРежимОбзор(Команда)
	
	ПоказатьТекстВФорматеHtml(ТекстСообщения, мСписокИконок, мРасшифровкиСсылок);
	УстановитьРежимРаботыСРедактором(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРежимРедактор(Команда)
	
	УстановитьРежимРаботыСРедактором(Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЖирныйШрифт(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "**%%**", "Жирный шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КомандаНаклонныйШрифт(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "//%%//", "Наклонный шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодчеркнутыйШрифт(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "__%%__", "Подчеркнутый шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗачеркнутыйШрифт(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "--%%--", "Зачеркнутый шрифт");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьФормулу(Команда)
    
   МаркерФорматирования = Новый Структура("Маркер, Представление", "==%%==", "Формула");
   ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрограммныйКод(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "'%%'", "Программный код");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЦитата(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "> %%", "Цитата");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПунктСписка(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "- %%", "Пункт списка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПунктНумеровонногоСписка(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "1. %%", "Пункт нумерованного списка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьКолонку(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "!%%!", "Новая колонка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСсылку(Команда)

	МаркерФорматирования = Новый Структура("Маркер, Представление", "-)%%;-)", "Ссылка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьКолонкуЗаголовка(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "!h%%!", "Новая колонка заголовка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);	
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаголовокПроблематика(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "#### %%", "Проблематика");
	ДобавитьМаркерВТекст(МаркерФорматирования, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаголовокРешение(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "##### %%", "Решение");
	ДобавитьМаркерВТекст(МаркерФорматирования, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаголовокТребования(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "#### %%", "Требования");
	ДобавитьМаркерВТекст(МаркерФорматирования, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаголовокТестирование(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "#### %%", "Тестирование");
	ДобавитьМаркерВТекст(МаркерФорматирования, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаголовок1(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "# %%", "Заголовок 1");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаголовок2(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "## %%", "Заголовок 2");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаголовок3(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "### %%", "Заголовок 3");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаголовок4(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "#### %%", "Заголовок 4");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаголовок5(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "##### %%", "Заголовок 5");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаголовок6(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "###### %%", "Заголовок 6");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьКартинку(Команда)
	
	ДобавитьКартинкуВТекст();	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВставитьКартинкуИзБуфера(Команда)
	
	ПолныйПутьКФайлу = ПолучитьСкриншотИзБуфераОбмена();
	Если ПолныйПутьКФайлу = Неопределено Тогда
		Предупреждение("Сначала сделайте скриншот, или воспользуйтесь программой Ножницы!", 30);
		Возврат;
	КонецЕсли; 
	
	НовыйИндекс = Файлы.Количество() + 1;
	НоваяСтрока = Файлы.Добавить();
	НоваяСтрока.ИдФайла = НовыйИндекс;
	НоваяСтрока.Путь = ПолныйПутьКФайлу;
    НоваяСтрока.Имя  = "Скриншот" + НовыйИндекс;
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "ИДРис=(%%)", НовыйИндекс);
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьДеревоМетаданных(Команда)

	Элементы.КнопкаПоказатьДеревоМетаданных.Пометка = Не Элементы.КнопкаПоказатьДеревоМетаданных.Пометка;
	Элементы.ГруппаСтруктураМетаданных.Видимость = Элементы.КнопкаПоказатьДеревоМетаданных.Пометка;

	Если Элементы.КнопкаПоказатьДеревоМетаданных.Пометка Тогда
		ПоказатьСтруктуруМетаданных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьПрикрепленныеФайлы(Команда)
    
    Элементы.КнопкаПоказатьПрикрепленныеФайлы.Пометка = Не Элементы.КнопкаПоказатьПрикрепленныеФайлы.Пометка;
	Элементы.ГруппаКартинки.Видимость = Элементы.КнопкаПоказатьПрикрепленныеФайлы.Пометка
    
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьВHTML(Команда)
	
	СохранитьТекстВФайлHtml();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьВPdf(Команда)
	
	СохранитьТекстВФайлPdf();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьВTxt(Команда)
	
	СохранитьТекстВФайлTxt();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьTxt(Команда)

	ЗагрузитьФайлTxt();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьТипОбъектаВОписание(Команда)
	
	ДобавлятьТипВОписаниеОбъекта = Не ДобавлятьТипВОписаниеОбъекта;
	Элементы.ДобавитьТипОбъектаВОписание.Пометка = ДобавлятьТипВОписаниеОбъекта;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучитьСтруктуруФормы(Команда)

	ОбъектМетаданных = ТекущийОбъектМетаданных();
	ПолучитьСтруктуруЭлементовФормы(ОбъектМетаданных, Ложь, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьИнтерактивнуюФорму(Команда)
	
	ОбъектМетаданных = ТекущийОбъектМетаданных();
	ПолучитьСтруктуруЭлементовФормы(ОбъектМетаданных, Истина, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФормуЗаписанногоОбъекта(Команда)
		
	ОбъектМетаданных = ТекущийОбъектМетаданных();
	ПолучитьСтруктуруЭлементовФормы(ОбъектМетаданных, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВключитьПоискЭлементаНаФорме(Команда)
	
	НастроитьРежимРаботыСЭлементамиФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВключитьПоискЭлементаФормыВСтруктуре(Команда)

	НастроитьРежимРаботыСЭлементамиФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСинонимОбъектаМетаданных(Команда)
	
	Элементы.ПоказатьСинонимОбъектаМетаданных.Пометка = Не Элементы.ПоказатьСинонимОбъектаМетаданных.Пометка;
	Элементы.СтруктураМетаданныхСиноним.Видимость = Элементы.ПоказатьСинонимОбъектаМетаданных.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьПредставлениеЭлемента(Команда)
	
	Элементы.ПоказатьПредставлениеЭлемента.Пометка = Не Элементы.ПоказатьПредставлениеЭлемента.Пометка;
	Элементы.СтруктураЭлементовИнтеративнойФормыПредставление.Видимость = Элементы.ПоказатьПредставлениеЭлемента.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаБлокЗаголовок(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "ЁЁЗаголовок %% ЁЁ", "Текст заголовка");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаБлокСодержание(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "ЁЁСодержание %% ЁЁ", "Текст содержания");
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьИнтерактивнуюСправку(Команда)
	
//	иид_ИнтерактивныйПомощник.ЗапуститьФормуИнтерактивногоПомощника(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВывестиСтруктуруМетаданных(Команда)
	
	СтруктураМетаданных.ПолучитьЭлементы().Очистить();
	ЗаполнитьСтруктуруМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьСтруктуруМетаданных(Команда)
	
	Фильтр = НСтр("ru = 'Файл xml'; en = 'Fail xml'") + "(*.xml)|*.xml";
	ДанныеФайла = ДанныеФайлаДляСохранения(Фильтр, Ложь);
	
	Если ДанныеФайла = Неопределено Тогда
		
		Сообщить("Файл для сохранения не выбран");
		Возврат;
		
	КонецЕсли;
	
	СтруктураБазы = ДанныеФормыВЗначение(СтруктураМетаданных, Тип("ДеревоЗначений"));

	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ДанныеФайла.ИмяФайла, "UTF-8", Истина);
	
	СериализаторXDTO.ЗаписатьXML(ПотокЗаписи, СтруктураБазы);
	ПотокЗаписи.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСвойства(Команда)
	
	УзелОбъектМетаданных = ТекущийОбъектМетаданных();
	Если УзелОбъектМетаданных.ПолучитьЭлементы().Количество() Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяМенеджераОбъектов = ИмяМенеджераОбъектов(УзелОбъектМетаданных);
	ИндексЭлемента = УзелОбъектМетаданных.ПолучитьИдентификатор();
	ДобавитьСвойстваОбъектаМетаданных(ИндексЭлемента, ИмяМенеджераОбъектов, УзелОбъектМетаданных.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаголовокРеализация(Команда)
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "##### %%", "Реализация");
	ДобавитьМаркерВТекст(МаркерФорматирования, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура КомандаВывестиСтруктуруСПодчиненнымиЭлементами(Команда)
	
	КомандаВывестиСтруктуруСПодчиненнымиЭлементамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьОбъектВВидеТипа(Команда)
	
	ТекущаяСтрока = Элементы.СтруктураМетаданных.ТекущаяСтрока;
	ДобавитьДанныеОбъектаВРедактор(ТекущаяСтрока, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьРасширение(Команда)

	ДобавитьРасширениеВСтруктуруМетаданных();

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВИзбранные(Команда)
	
	ОбъектМетаданных = ТекущийОбъектМетаданных();
	СкопироватьДанныеОбъектаМетаданныхВБуфер(ОбъектМетаданных);
	
КонецПроцедуры


#КонецОбласти // ОБРАБОТЧИКИ_КОМАНД

#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

#Область Процедуры_работы_со_структурой_метаданных

&НаСервере
Процедура ЗаполнитьСтруктуруМетаданных()
	
	ДобавитьОсновныеСвойстваКонфигурации();
	ДобавитьОбщиеКлассыОбъектовМетаданных();
	ДобавитьКлассыПрикладныхОбъектов();
	
КонецПроцедуры // ЗаполнитьСтруктуруМетаданных()

&НаСервере
Процедура ДобавитьОсновныеСвойстваКонфигурации()
	
	ЭлементыДерева = СтруктураМетаданных.ПолучитьЭлементы();
	
	УзелБуфер = ЭлементыДерева.Добавить();
	УзелБуфер.Класс = "Буфер";
	УзелБуфер.Имя 	 = "ВыбранныеОбъекты";
	УзелБуфер.Синоним = "Выбранные объекты";
	УзелБуфер.ПолноеИмя = "";
	УстановитьИконкуОбъектаМетаданных(УзелБуфер);
	
	УзелРасшериний = УзелБуфер.ПолучитьЭлементы().Добавить();
	УзелРасшериний.Имя = "Расширения";
	УзелРасшериний.Синоним = "Внешние отчеты и обработки";
	УзелРасшериний.Класс   = "Расширения";
	УстановитьИконкуОбъектаМетаданных(УзелРасшериний);
	
	СтрокаКонфигурации = ЭлементыДерева.Добавить();
	
	СтрокаКонфигурации.Класс = "Конфигурация";
	СтрокаКонфигурации.Имя 	 = Метаданные.Имя;
	СтрокаКонфигурации.Синоним = Метаданные.Представление();
	СтрокаКонфигурации.ПолноеИмя = Метаданные.ПолноеИмя();
	УстановитьИконкуОбъектаМетаданных(СтрокаКонфигурации);
	СтрокаКонфигурации.МенеджерОбъектов = Истина;
	
	ДобавитьМодулиКонфигурации(СтрокаКонфигурации);
	
КонецПроцедуры // ДобавитьОсновныеСвойстваКонфигурации()

&НаСервере
Процедура ДобавитьМодулиКонфигурации(ЭлементКонфигурации)
	
	ЭлементыКонфигурации = ЭлементКонфигурации.ПолучитьЭлементы();
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульОбычногоПриложения";
	ЭлементМодуль.Имя 	 = "МодульОбычногоПриложения";
	ЭлементМодуль.Синоним = "Модуль обычного приложения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульОбычногоПриложения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульУправляемогоПриложения";
	ЭлементМодуль.Имя 	 = "МодульУправляемогоПриложения";
	ЭлементМодуль.Синоним = "Модуль управляемого приложения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульУправляемогоПриложения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульВнешнегоСоединения";
	ЭлементМодуль.Имя 	 = "МодульВнешнегоСоединения";
	ЭлементМодуль.Синоним = "Модуль внешнего соединения";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульВнешнегоСоединения";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
	ЭлементМодуль = ЭлементыКонфигурации.Добавить();
	ЭлементМодуль.Класс = "МодульСеанса";
	ЭлементМодуль.Имя 	 = "МодульСеанса";
	ЭлементМодуль.Синоним = "Модуль сеанса";
	ЭлементМодуль.ПолноеИмя = "Конфигурация.МодульСеанса";
	УстановитьИконкуОбъектаМетаданных(ЭлементМодуль);
	
КонецПроцедуры // ДобавитьМодулиКонфигурации()

&НаСервере
Процедура ДобавитьОбщиеКлассыОбъектовМетаданных()
	
	ЭлементыСтруктуры = СтруктураМетаданных.ПолучитьЭлементы();
	
	ЭлементОбщие = ЭлементыСтруктуры.Добавить();
	ЭлементОбщие.Класс   = "Общие";
	ЭлементОбщие.Имя	 = "Общие";
	ЭлементОбщие.Синоним = "Общие";
	ЭлементОбщие.МенеджерОбъектов = Истина;
	УстановитьИконкуОбъектаМетаданных(ЭлементОбщие);
		
	ДобавитьКлассыПодсистемы(ЭлементОбщие);
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеМодули", "ОбщийМодуль", "Общие модули");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПараметрыСеанса", "ПараметрСеанса", "Параметры сеанса");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Роли", "Роль", "Роли");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеРеквизиты", "ОбщийРеквизит", "Общие реквизиты");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПланыОбмена", "ПланОбмена", "Планы обмена");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "КритерииОтбора", "КритерийОтбора", "Критерии отбора");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПодпискиНаСобытия", "ПодпискаНаСобытие", "Подписки на события");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "РегламентныеЗадания", "РегламентноеЗадание", "Регламентные задания");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ФункциональныеОпции", "ФункциональнаяОпция", "Функциональные опции");
	ДобавитьНовыйКлассОбъектов(
		ЭлементОбщие, "ПараметрыФункциональныхОпций", "ПараметрФункциональнойОпции", "Параметры функциональных опций");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОпределяемыеТипы", "ОпределяемыйТип", "Определяемые типы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ХранилищаНастроек", "ХранилищеНастроек", "Хранилища настроек");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеФормы", "ОбщаяФорма", "Общие формы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеКоманды", "ОбщаяКоманда", "Общие команды");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ГруппыКоманд", "ГруппаКоманд", "Группы команд");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Интерфейсы", "Интерфейс", "Интерфейсы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеМакеты", "ОбщийМакет", "Общие макеты");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ОбщиеКартинки", "ОбщаяКартинка", "Общие картинки");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "ПакетыXDTO", "ПакетXDTO", "XDTO-пакеты");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "WebСервисы", "WebСервис", "Web-сервисы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "HTTPСервисы", "HTTPСервис", "HTTP-сервисы");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "WSСсылки", "WSСсылка", "WS-ссылки");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Стили", "Стиль", "Стили");
	ДобавитьНовыйКлассОбъектов(ЭлементОбщие, "Языки", "Язык", "Языки");
	
КонецПроцедуры // ДобавитьОбщиеКлассыОбъектовМетаданных()

&НаСервере
Процедура ДобавитьКлассыПодсистемы(ЭлементРодитель)
	
	ЭлементПодсистемы = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементПодсистемы.Класс = "Подсистема";
	ЭлементПодсистемы.Имя 	= "Подсистемы";
	ЭлементПодсистемы.Синоним = "Подсистемы";
	ЭлементПодсистемы.МенеджерОбъектов = Истина;
	УстановитьИконкуОбъектаМетаданных(ЭлементПодсистемы);
	
	Подсистемы = Метаданные.Подсистемы;
	
	Для Каждого Подсистема Из Подсистемы Цикл
		ДобавитьПодсистему(ЭлементПодсистемы, Подсистема);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьКлассыПодсистемы()

&НаСервере
Процедура ДобавитьПодсистему(ЭлементРодитель, Подсистема)
	
	ЭлементПодсистема = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементПодсистема.Класс = "Подсистема";
	ЭлементПодсистема.Имя = Подсистема.Имя;
	ЭлементПодсистема.Синоним = Подсистема.Представление();
	ЭлементПодсистема.ПолноеИмя = Подсистема.ПолноеИмя();
	УстановитьИконкуОбъектаМетаданных(ЭлементПодсистема);
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ДобавитьПодсистему(ЭлементПодсистема, ПодчиненнаяПодсистема);
	КонецЦикла; 
	
КонецПроцедуры // ДобавитьПодсистему()

&НаСервере
Процедура ДобавитьКлассыПрикладныхОбъектов()
	
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Константы", "Константа", "Константы");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Справочники", "Справочник", "Справочники");
	ДобавитьКлассДокументы();
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ЖурналыДокументов", "ЖурналДокументов", "Журналы документов");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Перечисления", "Перечисление", "Перечисления");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Отчеты", "Отчет", "Отчеты");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Обработки", "Обработка", "Обработки");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ПланыВидовХарактеристик", "ПланВидовХарактеристик", "Планы видов характеристик");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ПланыСчетов", "ПланСчетов", "Планы счетов");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ПланыВидовРасчета", "ПланВидовРасчета", "Планы видов расчета");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыСведений", "РегистрСведений", "Регистры сведений");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыНакопления", "РегистрНакопления", "Регистры накопления");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыБухгалтерии", "РегистрБухгалтерии", "Регистры бухгалтерии");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "РегистрыРасчета", "РегистрРасчета", "Регистры расчета");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "БизнесПроцессы", "БизнесПроцесс", "Бизнес-процессы");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "Задачи", "Задача", "Задачи");
	ДобавитьНовыйКлассОбъектов(СтруктураМетаданных, "ВнешниеИсточникиДанных", "ВнешнийИсточникДанных", "Внешние источники данных");
	
КонецПроцедуры // ДобавитьКлассыПрикладныхОбъектов()

&НаСервере
Процедура ДобавитьКлассДокументы()
	
	ЭлементУзелМенеджер = СтруктураМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементУзелМенеджер.Класс = "Документ";
	ЭлементУзелМенеджер.Имя = "Документы";
	ЭлементУзелМенеджер.Синоним = "Документы";
	ЭлементУзелМенеджер.МенеджерОбъектов = Истина;
	УстановитьИконкуОбъектаМетаданных(ЭлементУзелМенеджер);
	
	ДобавитьНовыйКлассОбъектов(ЭлементУзелМенеджер, "НумераторыДокументов", "НумераторДокументов", "Нумераторы");
	ДобавитьНовыйКлассОбъектов(ЭлементУзелМенеджер, "Последовательности", "Последовательность", "Последовательности");
	
	СвойстваОбъекта = СвойстваОбъектаМетаданных("Документы");
	ДобавитьПодчиненныеОбъектыМетаданных(ЭлементУзелМенеджер, "Документы", "Документ", СвойстваОбъекта);
	
КонецПроцедуры // ДобавитьКлассДокументы()

&НаСервере
Процедура ДобавитьНовыйКлассОбъектов(ЭлементРодитель, ИмяМенеджераКласса, ИмяКласса, СинонимКласса)	
	
	ЭлементУзелМенеджер = ЭлементРодитель.ПолучитьЭлементы().Добавить();
	ЭлементУзелМенеджер.Класс = ИмяКласса;
	ЭлементУзелМенеджер.Имя   = ИмяМенеджераКласса;
	ЭлементУзелМенеджер.Синоним = ИмяМенеджераКласса;
	ЭлементУзелМенеджер.МенеджерОбъектов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементУзелМенеджер);
	
	СвойстваОбъекта = СвойстваОбъектаМетаданных(ИмяМенеджераКласса);
	ДобавитьПодчиненныеОбъектыМетаданных(ЭлементУзелМенеджер, ИмяМенеджераКласса, ИмяКласса, СвойстваОбъекта);
	
КонецПроцедуры // ДобавитьНовыйКлассОбъектов()

&НаСервере
Функция СвойстваОбъектаМетаданных(ИмяМенеджераКласса)
	
	СвойстваОбъектаМетаданных = Новый Структура();
	СвойстваОбъектаМетаданных.Вставить("Реквизиты",            Истина);
	СвойстваОбъектаМетаданных.Вставить("ЗначенияПеречисления", Истина);
	СвойстваОбъектаМетаданных.Вставить("ТабличныеЧасти",       Истина);
	СвойстваОбъектаМетаданных.Вставить("Измерения",            Истина);
	СвойстваОбъектаМетаданных.Вставить("Ресурсы",              Истина);
	СвойстваОбъектаМетаданных.Вставить("Графы",                Истина);
	СвойстваОбъектаМетаданных.Вставить("Формы",                Истина);
	СвойстваОбъектаМетаданных.Вставить("Команды",              Истина);
	СвойстваОбъектаМетаданных.Вставить("Макеты",               Истина);
	СвойстваОбъектаМетаданных.Вставить("РеквизитыАдресации",   Истина);
	СвойстваОбъектаМетаданных.Вставить("Таблицы",              Истина);
	СвойстваОбъектаМетаданных.Вставить("Кубы",                 Истина);
	СвойстваОбъектаМетаданных.Вставить("Функции",              Истина);
	
	МенеджерОбъектМетаданных = Метаданные[ИмяМенеджераКласса];
	Для Каждого Свойство Из СвойстваОбъектаМетаданных Цикл
		
		Если Не МенеджерОбъектМетаданных.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПодчиненныйКласс = МенеджерОбъектМетаданных[0][Свойство.Ключ];
		Исключение
			СвойстваОбъектаМетаданных[Свойство.Ключ] = Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат СвойстваОбъектаМетаданных;
	
КонецФункции // СвойстваОбъектаМетаданных()

&НаСервере
Процедура ДобавитьПодчиненныеОбъектыМетаданных(ЭлементРодитель, ИмяМенеджераКласса, ИмяКласса, СвойстваОбъекта)	
	
	Если ИмяМенеджераКласса = "ОбщиеКартинки" Тогда
		Если Не мЗаполнитьСтруктуруСПодчиненнымиЭлементами = Истина Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ОбъектыМетаданных = Метаданные[ИмяМенеджераКласса];
	ЭлементыРодительскогоУзла = ЭлементРодитель.ПолучитьЭлементы();
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		ЭлементОбъектМетаданных = ЭлементыРодительскогоУзла.Добавить();
		ЭлементОбъектМетаданных.Класс = ИмяКласса;
		ЭлементОбъектМетаданных.Имя = ОбъектМетаданных.Имя;
		ЭлементОбъектМетаданных.Синоним = ОбъектМетаданных.Представление();
		ЭлементОбъектМетаданных.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		УстановитьИконкуОбъектаМетаданных(ЭлементОбъектМетаданных);
		
		Если ИмяКласса = "Константа" Тогда
			ЗаполнитьТипыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если мЗаполнитьСтруктуруСПодчиненнымиЭлементами = Истина Тогда
		
			Если СвойстваОбъекта.Измерения Тогда
				ДобавитьИзмеренияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
			
			Если СвойстваОбъекта.Ресурсы Тогда
				ДобавитьРесурсыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
			
			Если СвойстваОбъекта.РеквизитыАдресации Тогда
				ДобавитьРеквизитыАдресацииОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Реквизиты Тогда
				ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
			
			Если СвойстваОбъекта.ЗначенияПеречисления Тогда
				ДобавитьЗначенияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.ТабличныеЧасти Тогда
				ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Формы Тогда
				ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Команды Тогда
				ДобавитьКомандыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли; 
			
			Если СвойстваОбъекта.Макеты Тогда
				ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыАдресацииОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементРеквизитыАдресации = ДобавитьМенеджерРеквизитовАдресации(ЭлементОбъектМетаданных);
	
	РеквизитыАдресации = ОбъектМетаданных.РеквизитыАдресации;
	Если РеквизитыАдресации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РеквизитАдресации Из РеквизитыАдресации Цикл
		
		ЭлементРеквизитАдресации = ЭлементРеквизитыАдресации.ПолучитьЭлементы().Добавить();
		ЭлементРеквизитАдресации.Класс = "РеквизитАдресации";
		ЭлементРеквизитАдресации.Имя = РеквизитАдресации.Имя;
		ЭлементРеквизитАдресации.Синоним = РеквизитАдресации.Имя;
		ЭлементРеквизитАдресации.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + РеквизитАдресации.Имя;
		
		ЗаполнитьТипыОбъектаМетаданных(ЭлементРеквизитАдресации, РеквизитАдресации);
		УстановитьИконкуОбъектаМетаданных(ЭлементРеквизитАдресации);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерРеквизитовАдресации(ЭлементОбъектМетаданных)

	ЭлементРеквизитыАдресации = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементРеквизитыАдресации.Класс = "РеквизитАдресации";
	ЭлементРеквизитыАдресации.Имя = "РеквизитыАдресации";
	ЭлементРеквизитыАдресации.Синоним = "РеквизитыАдресации";
	ЭлементРеквизитыАдресации.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементРеквизитыАдресации.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементРеквизитыАдресации);
	
	Возврат ЭлементРеквизитыАдресации;	
	
КонецФункции

&НаСервере
Процедура ДобавитьИзмеренияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
		
	ЭлементИзмерения = ДобавитьМенеджерИзмерений(ЭлементОбъектМетаданных);
	
	Измерения = ОбъектМетаданных.Измерения;
	Если Измерения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Измерение Из Измерения Цикл
		
		ЭлементИзмерение = ЭлементИзмерения.ПолучитьЭлементы().Добавить();
		ЭлементИзмерение.Класс = "Измерение";
		ЭлементИзмерение.Имя = Измерение.Имя;
		ЭлементИзмерение.Синоним = Измерение.Имя;
		ЭлементИзмерение.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Измерение.Имя;
		ЗаполнитьТипыОбъектаМетаданных(ЭлементИзмерение, Измерение);
		
		УстановитьИконкуОбъектаМетаданных(ЭлементИзмерение);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерИзмерений(ЭлементОбъектМетаданных)
	
	ЭлементИзмерения = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементИзмерения.Класс = "Измерение";
	ЭлементИзмерения.Имя = "Измерения";
	ЭлементИзмерения.Синоним = "Измерения";
	ЭлементИзмерения.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементИзмерения.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементИзмерения);

	Возврат ЭлементИзмерения;
	
КонецФункции

&НаСервере
Процедура ДобавитьРесурсыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементРесурсы = ДобавитьМенеджерРесурсов(ЭлементОбъектМетаданных);
	
	Ресурсы = ОбъектМетаданных.Ресурсы;
	Если Ресурсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Ресурс Из Ресурсы Цикл
		
		ЭлементРесурс = ЭлементРесурсы.ПолучитьЭлементы().Добавить();
		ЭлементРесурс.Класс = "Ресурс";
		ЭлементРесурс.Имя = Ресурс.Имя;
		ЭлементРесурс.Синоним = Ресурс.Синоним;
		ЭлементРесурс.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Ресурс.Имя;
		
		ЗаполнитьТипыОбъектаМетаданных(ЭлементРесурс, Ресурс);
		УстановитьИконкуОбъектаМетаданных(ЭлементРесурс);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерРесурсов(ЭлементОбъектМетаданных)
	
	ЭлементРесурсы = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементРесурсы.Класс = "Ресурс";
	ЭлементРесурсы.Имя = "Ресурсы";
	ЭлементРесурсы.Синоним = "Ресурсы";
	ЭлементРесурсы.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементРесурсы.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементРесурсы);
	
	Возврат ЭлементРесурсы;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗначенияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементЗначения = ДобавитьМенеджерЗначений(ЭлементОбъектМетаданных);
	
	Значения = ОбъектМетаданных.ЗначенияПеречисления;
	Если Значения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Значение Из Значения Цикл
		
		ЭлементЗначение = ЭлементЗначения.ПолучитьЭлементы().Добавить();
		ЭлементЗначение.Класс = "Значение";
		ЭлементЗначение.Имя = Значение.Имя;
		ЭлементЗначение.Синоним = Значение.Синоним;
		ЭлементЗначение.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Значение.Имя;
		
		УстановитьИконкуОбъектаМетаданных(ЭлементЗначение);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерЗначений(ЭлементОбъектМетаданных)
	
	ЭлементЗначения = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементЗначения.Класс = "Значение";
	ЭлементЗначения.Имя = "Значения";
	ЭлементЗначения.Синоним = "Значения";
	ЭлементЗначения.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементЗначения.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементЗначения);
	
	Возврат ЭлементЗначения;
	
КонецФункции

&НаСервере
Процедура ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
		
	ЭлементТабличныеЧасти = ДобавитьМенеджерТабличныхЧастей(ЭлементОбъектМетаданных);
	
	ТабличныеЧасти = ОбъектМетаданных.ТабличныеЧасти;
	Если ТабличныеЧасти.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ЭлементТабличнаяЧасть = ЭлементТабличныеЧасти.ПолучитьЭлементы().Добавить();
		ЭлементТабличнаяЧасть.Класс = "ТабличнаяЧасть";
		ЭлементТабличнаяЧасть.Имя = ТабличнаяЧасть.Имя;
		ЭлементТабличнаяЧасть.Синоним = ТабличнаяЧасть.Синоним;
		ЭлементТабличнаяЧасть.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + ТабличнаяЧасть.Имя;
		ЭлементТабличнаяЧасть.ТабличнаяЧасть = Истина;
	
		УстановитьИконкуОбъектаМетаданных(ЭлементТабличнаяЧасть);	
		ДобавитьРеквизитыОбъектаМетаданных(ЭлементТабличнаяЧасть, ТабличнаяЧасть);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерТабличныхЧастей(ЭлементОбъектМетаданных)
	
	ЭлементТабличныеЧасти = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементТабличныеЧасти.Класс = "ТабличнаяЧасть";
	ЭлементТабличныеЧасти.Имя = "ТабличныеЧасти";
	ЭлементТабличныеЧасти.Синоним = "ТабличныеЧасти";
	ЭлементТабличныеЧасти.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементТабличныеЧасти.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементТабличныеЧасти);
	
	Возврат ЭлементТабличныеЧасти;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)

	ЭлементРеквизиты = ДобавитьМенеджерРеквизитов(ЭлементОбъектМетаданных);
	
	РеквизитыОбъекта = ОбъектМетаданных.Реквизиты;
	Если РеквизитыОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		
		ЭлементРеквизит = ЭлементРеквизиты.ПолучитьЭлементы().Добавить();
		ЭлементРеквизит.Класс = "Реквизит";
		ЭлементРеквизит.Имя = Реквизит.Имя;
		ЭлементРеквизит.Синоним = Реквизит.Имя;
		ЭлементРеквизит.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Реквизит.Имя;
		ЗаполнитьТипыОбъектаМетаданных(ЭлементРеквизит, Реквизит);
		
		УстановитьИконкуОбъектаМетаданных(ЭлементРеквизит);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерРеквизитов(ЭлементОбъектМетаданных)
	
	Если Не ЭлементОбъектМетаданных.ТабличнаяЧасть Тогда
		
		ЭлементРеквизиты = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
		ЭлементРеквизиты.Класс = "Реквизит";
		ЭлементРеквизиты.Имя = "Реквизиты";
		ЭлементРеквизиты.Синоним = "Реквизиты";
		ЭлементРеквизиты.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
		ЭлементРеквизиты.МенеджерПодчиненныхЭлементов = Истина;
		
	Иначе
		ЭлементРеквизиты = ЭлементОбъектМетаданных;
	КонецЕсли;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементРеквизиты);
	
	Возврат ЭлементРеквизиты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТипыОбъектаМетаданных(ЭлементОбъектаМетаданных, ОбъектМетаданных)
	
	ТипыРеквизита = ОбъектМетаданных.Тип.Типы();
	ЭлементОбъектаМетаданных.Тип = ТипыОбъектов(ТипыРеквизита);
	
КонецПроцедуры // ЗаполнитьТипыОбъектаМетаданных()

&НаКлиентеНаСервереБезКонтекста
Функция ТипыОбъектов(ОписаниеТиповОбъекта)
	
	Если ОписаниеТиповОбъекта.Количество() = 1 Тогда
		
		ТипРеквизита = ОписаниеТиповОбъекта[0];
		Возврат ТипЗначения(ТипРеквизита);
		
	Иначе
		
		СписокТипов = Новый СписокЗначений();
		Для Каждого ТипОбъекта Из ОписаниеТиповОбъекта Цикл
			СписокТипов.Добавить(ТипЗначения(ТипОбъекта));
		КонецЦикла;
		
		Возврат СписокТипов;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипЗначения(ТипРеквизита)
	
	Если ТипРеквизита = Тип("Число") Или ТипРеквизита = Тип("Строка") 
		Или ТипРеквизита = Тип("Булево") Или ТипРеквизита = Тип("Дата")
		Или ТипРеквизита = Тип("ХранилищеЗначения")
		Или ТипРеквизита = Тип("ПостроительОтчета")
		Или ТипРеквизита = Тип("ВидСравнения")
		Или ТипРеквизита = Тип("Отбор")
		Или ТипРеквизита = Тип("ПоляНастройки")
		Или ТипРеквизита = Тип("НаправлениеСортировки")Тогда
		
		ПредставлениеТипа = Строка(ТипРеквизита);
		
	Иначе
		СсылкаТипа = Новый (ТипРеквизита);
		Если Перечисления.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ПредставлениеТипа = "Перечисление." + СсылкаТипа.Метаданные().Имя;
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ПредставлениеТипа = "Справочник." + СсылкаТипа.Метаданные().Имя;
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			ПредставлениеТипа = "Документ." + СсылкаТипа.Метаданные().Имя;
			//ИначеЕсли ВнешниеИсточникиДанных.ТипВсеСсылки().СодержитТип(ТипРеквизита) Тогда
			//	ПредставлениеТипа = "ВнешнийИсточникДанных." + СсылкаТипа.Метаданные().Имя;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ПредставлениеТипа;
	
КонецФункции

&НаСервере
Процедура ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементРодитель, ОбъектМетаданных)	
	
	ОбъектыСФормами = Новый СписокЗначений();
	ОбъектыСФормами.Добавить("Справочники");
	ОбъектыСФормами.Добавить("Документы");
	ОбъектыСФормами.Добавить("ЖурналыДокументов");
	ОбъектыСФормами.Добавить("Перечисления");
	ОбъектыСФормами.Добавить("Отчеты");
	ОбъектыСФормами.Добавить("Обработки");
	ОбъектыСФормами.Добавить("ПланыВидовХарактеристик");
	ОбъектыСФормами.Добавить("ПланыСчетов");
	ОбъектыСФормами.Добавить("ПланыВидовРасчета");
	ОбъектыСФормами.Добавить("РегистрыСведений");
	ОбъектыСФормами.Добавить("РегистрыНакопления");
	ОбъектыСФормами.Добавить("РегистрыБухгалтерии");
	ОбъектыСФормами.Добавить("БизнесПроцессы");
	ОбъектыСФормами.Добавить("Задачи");
	
	Если Не ОбъектыСФормами.НайтиПоЗначению(ИмяМенеджераКласса) = Неопределено Тогда
		
		ЭлементФормы = ДобавитьМенеджерФорм(ЭлементРодитель);
		
		Для Каждого ОбъектМетаданныхФорма Из ОбъектМетаданных.Формы Цикл
			
			ЭлементФорма = ЭлементФормы.ПолучитьЭлементы().Добавить();
			ЭлементФорма.Класс = "Форма";
			ЭлементФорма.Имя   = ОбъектМетаданныхФорма.Имя;
			ЭлементФорма.Синоним = ОбъектМетаданныхФорма.Представление();
			ЭлементФорма.ПолноеИмя = ОбъектМетаданныхФорма.ПолноеИмя();
			ЭлементФорма.Тип = ОбъектМетаданныхФорма.ТипФормы;
			УстановитьИконкуОбъектаМетаданных(ЭлементФорма);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьФормуОбъектаМетаданных()

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерФорм(ЭлементОбъект)
	
	ЭлементФормы = ЭлементОбъект.ПолучитьЭлементы().Добавить();
	ЭлементФормы.Класс = "Форма";
	ЭлементФормы.Имя = "Формы";
	ЭлементФормы.Синоним = "Формы";
	ЭлементФормы.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементФормы);
		
	Возврат ЭлементФормы;		
		
КонецФункции

&НаСервере
Процедура ДобавитьКомандыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементКоманды = ДобавитьМенеджерКоманд(ЭлементОбъектМетаданных);

	КомандыОбъекта = ОбъектМетаданных.Команды;
	Если КомандыОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Команда Из КомандыОбъекта Цикл
		
		ЭлементКоманда = ЭлементКоманды.ПолучитьЭлементы().Добавить();
		ЭлементКоманда.Класс = "Команда";
		ЭлементКоманда.Имя = Команда.Имя;
		ЭлементКоманда.Синоним = Команда.Синоним;
		ЭлементКоманда.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя + "." + Команда.Имя;
		УстановитьИконкуОбъектаМетаданных(ЭлементКоманда);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерКоманд(ЭлементОбъектМетаданных)
	
	ЭлементКоманды = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементКоманды.Класс = "Команда";
	ЭлементКоманды.Имя = "Команды";
	ЭлементКоманды.Синоним = "Команды";
	ЭлементКоманды.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементКоманды.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементКоманды);

	Возврат ЭлементКоманды;	
	
КонецФункции

&НаСервере
Процедура ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных)
	
	ЭлементМакеты = ДобавитьМенеджерМакетов(ЭлементОбъектМетаданных);
		
	Макеты = ОбъектМетаданных.Макеты;
	Если Макеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Макет Из Макеты Цикл
		
		ЭлементМакет = ЭлементМакеты.ПолучитьЭлементы().Добавить();
		ЭлементМакет.Класс = "Макет";
		ЭлементМакет.Имя = Макет.Имя;
		ЭлементМакет.Синоним = Макет.Синоним;
		ЭлементМакет.ПолноеИмя = ОбъектМетаданных.ПолноеИмя() + "." + Макет.Имя;
		ЭлементМакет.ИндексКартинки = 23;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьМенеджерМакетов(ЭлементОбъектМетаданных)
		
	ЭлементМакеты = ЭлементОбъектМетаданных.ПолучитьЭлементы().Добавить();
	ЭлементМакеты.Класс = "Макет";
	ЭлементМакеты.Имя = "Макеты";
	ЭлементМакеты.Синоним = "Макеты";
	ЭлементМакеты.ПолноеИмя = ЭлементОбъектМетаданных.ПолноеИмя;
	ЭлементМакеты.МенеджерПодчиненныхЭлементов = Истина;
	
	УстановитьИконкуОбъектаМетаданных(ЭлементМакеты);
	
	Возврат ЭлементМакеты;
	
КонецФункции

&НаКлиенте
Функция ТекущийОбъектМетаданных()
	
	Возврат СтруктураМетаданных.НайтиПоИдентификатору(Элементы.СтруктураМетаданных.ТекущаяСтрока);
	
КонецФункции // ТекущийОбъектМетаданных()

&НаКлиенте
Процедура ПоказатьСтруктуруМетаданных()
	
	Если Не СтруктураМетаданных.ПолучитьЭлементы().Количество() Тогда
		
		ВосстановитьСтруктуруМетаданныхИзКэша();
		Если Не СтруктураМетаданных.ПолучитьЭлементы().Количество() Тогда
			ЗаполнитьСтруктуруМетаданных();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПоказатьСтруктуруМетаданных()

&НаКлиенте
Процедура ВосстановитьСтруктуруМетаданныхИзКэша()
	 
	ИмяФайлаКэша = КаталогВременныхФайлов() + "edit_structurebase.xml";
	НайденныеФайлы = НайтиФайлы(ИмяФайлаКэша);
	Если НайденныеФайлы.Количество() Тогда
		
		ПотокЧтения = Новый ЧтениеXML();
		ПотокЧтения.ОткрытьФайл(ИмяФайлаКэша);
		
		СтруктураБазы = СериализаторXDTO.ПрочитатьXML(ПотокЧтения);
		
		ЗначениеВДанныеФормы(СтруктураБазы, СтруктураМетаданных);
		
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьСтруктуруМетаданныхИзКэша()

&НаКлиенте
Процедура СохранитьСтруктуруМетаданныхВКэш()
	
	ИмяФайлаКэша = КаталогВременныхФайлов() + "edit_structurebase.xml";
	
	СтруктураБазы = ДанныеФормыВЗначение(СтруктураМетаданных, Тип("ДеревоЗначений"));
	Если СтруктураБазы.Строки.Количество() Тогда
		СтруктураБазы.Строки[0].Строки.Очистить();
	КонецЕсли; 

	ПотокЗаписи = Новый ЗаписьXML();
	ПотокЗаписи.ОткрытьФайл(ИмяФайлаКэша, "UTF-8");
	
	СериализаторXDTO.ЗаписатьXML(ПотокЗаписи, СтруктураБазы);
	ПотокЗаписи.Закрыть();
	
КонецПроцедуры // СохранитьСтруктуруМетаданныхВКэш()

&НаКлиенте
Функция ИмяМенеджераОбъектов(УзелОбъектаМетаданных)
	
	ИмяМенеджераОбъектов = "";
	Если Не УзелОбъектаМетаданных.МенеджерОбъектов Тогда
		ИмяМенеджераОбъектов = ИмяМенеджераОбъектов(УзелОбъектаМетаданных.ПолучитьРодителя());
	Иначе
		ИмяМенеджераОбъектов = УзелОбъектаМетаданных.Имя;
		
	КонецЕсли; 
	
	Возврат ИмяМенеджераОбъектов;
	
КонецФункции // ИмяМенеджераОбъектов()

&НаСервере
Процедура ДобавитьСвойстваОбъектаМетаданных(ИндексЭлемента, ИмяМенеджераКласса, ИмяОбъекта)
	
	ЭлементОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(ИндексЭлемента);
	
	ОбъектМетаданных = Метаданные[ИмяМенеджераКласса][ИмяОбъекта];
	СвойстваОбъекта = СвойстваОбъектаМетаданных(ИмяМенеджераКласса);

		Если СвойстваОбъекта.Измерения Тогда
			ДобавитьИзмеренияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли;
		
		Если СвойстваОбъекта.Ресурсы Тогда
			ДобавитьРесурсыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли;
		
		Если СвойстваОбъекта.РеквизитыАдресации Тогда
			ДобавитьРеквизитыАдресацииОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если СвойстваОбъекта.Реквизиты Тогда
			ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли;
		
		Если СвойстваОбъекта.ЗначенияПеречисления Тогда
			ДобавитьЗначенияОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если СвойстваОбъекта.ТабличныеЧасти Тогда
			ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если СвойстваОбъекта.Формы Тогда
			ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если СвойстваОбъекта.Команды Тогда
			ДобавитьКомандыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли; 
		
		Если СвойстваОбъекта.Макеты Тогда
			ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
		КонецЕсли;
		
КонецПроцедуры // ДобавитьСвойстваОбъектаМетаданных()


&НаСервере
Процедура КомандаВывестиСтруктуруСПодчиненнымиЭлементамиНаСервере()

	мЗаполнитьСтруктуруСПодчиненнымиЭлементами = Истина;
	СтруктураМетаданных.ПолучитьЭлементы().Очистить();
	ЗаполнитьСтруктуруМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРасширениеВСтруктуруМетаданных()
	
	Фильтр = "Файл обработки, отчета (*.epf;*.erf)|*.epf;*.erf";

	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогЗагрузкиФайла = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогЗагрузкиФайла.Фильтр = Фильтр;
	ДиалогЗагрузкиФайла.Заголовок = "Выбирите файл внешней обработки или внешнего отчета.";
	
	Если ДиалогЗагрузкиФайла.Выбрать() Тогда
		
		АдресХранилища = "";
		ПоместитьФайл(АдресХранилища, ДиалогЗагрузкиФайла.ПолноеИмяФайла,, Ложь);
		ДобавитьМетаданныеРасширенияВСтруктуруМетаданных(АдресХранилища, ДиалогЗагрузкиФайла.ПолноеИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьРасширениеВСтруктуруМетаданных()

&НаСервере
Процедура ДобавитьМетаданныеРасширенияВСтруктуруМетаданных(АдресХранилища, ФайлРасширения)
	
	РасширениеФайла = Прав(ФайлРасширения, 3);
	Если НРег(РасширениеФайла) = "epf" Тогда
		КлассРасширения = "Обработка";
		ИмяМенеджераКласса = "Обработки";
	ИначеЕсли НРег(РасширениеФайла) = "erf" Тогда
		КлассРасширения = "Отчет";
		ИмяМенеджераКласса = "Отчеты";
	КонецЕсли;
	
	ОбъектРасширения = Неопределено;
	Если КлассРасширения = "Обработка" Тогда
		ИмяРасширения = ВнешниеОбработки.Подключить(АдресХранилища);
		ОбъектРасширения = ВнешниеОбработки.Создать(ИмяРасширения);
	Иначе
		ИмяРасширения = ВнешниеОтчеты.Подключить(АдресХранилища);
		ОбъектРасширения = ВнешниеОтчеты.Создать(ИмяРасширения);
	КонецЕсли; 
	
	УзелРасшериний = Неопределено;
	УзелВыбранныеОбъекты = СтруктураМетаданных.ПолучитьЭлементы()[0];
	Для Каждого УзелМенеджеров Из УзелВыбранныеОбъекты.ПолучитьЭлементы() Цикл
		
		Если УзелМенеджеров.Имя = "Расширения" Тогда
			УзелРасшериний = УзелМенеджеров;
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если УзелРасшериний = Неопределено Тогда
		
		УзелРасшериний = УзелВыбранныеОбъекты.ПолучитьЭлементы().Добавить();
		УзелРасшериний.Имя = "Расширения";
		УзелРасшериний.Синоним = "Расширения";
		УзелРасшериний.Класс   = "Расширения";
		УзелРасшериний.ИндексКартинки = 59;
		
	КонецЕсли;
	
	ОбъектМетаданных = ОбъектРасширения.Метаданные();
	
	ЭлементОбъектМетаданных = УзелРасшериний.ПолучитьЭлементы().Добавить();
	ЭлементОбъектМетаданных.Класс = КлассРасширения;
	ЭлементОбъектМетаданных.Имя = ОбъектМетаданных.Имя;
	ЭлементОбъектМетаданных.Синоним = ОбъектМетаданных.Синоним;
	ЭлементОбъектМетаданных.ИндексКартинки = ?(КлассРасширения = "Обработка", 41, 39);
	ЭлементОбъектМетаданных.АдресХранилищаОбработки = АдресХранилища;
	ЭлементОбъектМетаданных.ФайлРасширения = ФайлРасширения;
	ЭлементОбъектМетаданных.ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	
	ДобавитьРеквизитыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьТабличныеЧастиОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьФормуОбъектаМетаданных(ИмяМенеджераКласса, ЭлементОбъектМетаданных, ОбъектМетаданных);
	ДобавитьМакетыОбъектаМетаданных(ЭлементОбъектМетаданных, ОбъектМетаданных);
	
КонецПроцедуры // ДобавитьМетаданныеРасширенияВСтруктуруМетаданных()

#КонецОбласти // Процедуры_работы_со_структурой_метаданных

#Область Работа_с_буфером_объектов_метаданных 

&НаКлиенте
Процедура СкопироватьДанныеОбъектаМетаданныхВБуфер(УзелЭлементаВыборка)
	
	УзелБуфераОбъектов = СтруктураМетаданных.ПолучитьЭлементы().Получить(0);
	
	РодительОбъекта = УзелЭлементаВыборка.ПолучитьРодителя();
	ОбъектМетаданныхИсточник = ОпределитьОбъектМетаданныхВыбранногоЭлемента(УзелЭлементаВыборка, РодительОбъекта);
	Если РодительОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМенеджера = РодительОбъекта.Класс;
	
	ЭлементыБуфера = УзелБуфераОбъектов.ПолучитьЭлементы();
	УзелРазмещенияОбъектаВБуфере = УзелРазмещенияОбъектаВБуфере(ЭлементыБуфера, ИмяМенеджера, РодительОбъекта);
	СкопироватьВыбранныйОбъектВБуфер(УзелРазмещенияОбъектаВБуфере, ОбъектМетаданныхИсточник);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьОбъектМетаданныхВыбранногоЭлемента(УзелЭлементаВыборка, РодительОбъекта)
	
	ВыбранныйОбъект = УзелЭлементаВыборка;
	РодительОбъекта = УзелЭлементаВыборка.ПолучитьРодителя();
	Пока Не РодительОбъекта = Неопределено И Не РодительОбъекта.МенеджерОбъектов Цикл
		ВыбранныйОбъект = РодительОбъекта;
		РодительОбъекта = РодительОбъекта.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат ВыбранныйОбъект;
	
КонецФункции

&НаКлиенте
Функция УзелРазмещенияОбъектаВБуфере(ЭлементыБуфера, ИмяМенеджера, РодительОбъекта)
	
	УзелРазмещенияВБуфере = Неопределено;
	Для Каждого ЭлементБуфера Из ЭлементыБуфера Цикл
		Если ЭлементБуфера.Класс = ИмяМенеджера Тогда
			УзелРазмещенияВБуфере = ЭлементБуфера;
		КонецЕсли;
	КонецЦикла;
	
	Если УзелРазмещенияВБуфере = Неопределено Тогда
		УзелРазмещенияВБуфере = ЭлементыБуфера.Добавить();
		ЗаполнитьЗначенияСвойств(УзелРазмещенияВБуфере, РодительОбъекта);
	КонецЕсли;
	
	Возврат УзелРазмещенияВБуфере;
	
КонецФункции

&НаКлиенте
Процедура СкопироватьВыбранныйОбъектВБуфер(УзелРазмещенияВБуфере, ВыбранныйОбъект)
	
	ОбъектыУзлаБуфера = УзелРазмещенияВБуфере.ПолучитьЭлементы();
	Для Каждого ОбъектУзлаБуфера Из ОбъектыУзлаБуфера Цикл
		Если ОбъектУзлаБуфера.Имя = ВыбранныйОбъект.Имя Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	КопияОбъектаВБуфере = ОбъектыУзлаБуфера.Добавить();
	ЗаполнитьЗначенияСвойств(КопияОбъектаВБуфере, ВыбранныйОбъект);
	
	СкопироватьПодчиненныеЭлементыОбъекта(КопияОбъектаВБуфере, ВыбранныйОбъект.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПодчиненныеЭлементыОбъекта(ОбъектПриемник, ПодчиненныеЭлементыИсходника)
	
	Если ПодчиненныеЭлементыИсходника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПодчиненныйЭлементИсходника Из ПодчиненныеЭлементыИсходника Цикл
		
		ПодчиненыйЭлементПриемника = ОбъектПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(ПодчиненыйЭлементПриемника, ПодчиненныйЭлементИсходника);
		
		СкопироватьПодчиненныеЭлементыОбъекта(ПодчиненыйЭлементПриемника, 
		ПодчиненныйЭлементИсходника.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Работа_с_интерактивной_формой

&НаКлиенте
Процедура СохранитьПутьРасположенияЭлементаНаФорме(ПутьРасположенияЭлементаНаФорме, ДанныеФормыСписок)
	
	ПутьРасположенияЭлементов = Новый СписокЗначений();
	ПутьРасположенияЭлементов.ЗагрузитьЗначения(ПутьРасположенияЭлементаНаФорме);
	
	ДанныеФормыСписок = ПутьРасположенияЭлементов;
	
КонецПроцедуры // СохранитьПутьРасположенияЭлементаНаФорме()

&НаКлиенте
Процедура УстановитьПервоначальныеНастройки()
	
	СохранитьИконкиСправки();
	
	мКартинкаУказательВПраво = Новый Картинка(АдресИконкиЭлементаФормы("Указатель"), Истина);
	мКартинкаУказательВниз = Новый Картинка(АдресИконкиЭлементаФормы("УказательВниз"), Истина);
	мПустаяКартинка = Новый Картинка();	
	
	мЦветВыделенияЭлементовФормы = Новый Цвет(255, 0, 0);
	
	мНумерацияСлужебныхКнопок = 1;
	
	мНастройкиФормы = Новый Структура("ВидимостьПанелиКартинок, ВидимостьПанелиСтруктурыМетаданных", Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИконкиСправки()
	
	мСписокИконок = Новый СписокЗначений();
	
	мКаталогДопФайлов = КаталогВременныхФайлов() + "IconInteraktivHelp";
	СоздатьКаталог(мКаталогДопФайлов);
	
	СписокИконокОбработки = СписокИконокОбработки();
	Для Каждого ИконкаОбработки Из СписокИконокОбработки Цикл
		
		ПутьКИконке   = мКаталогДопФайлов + "\" + ИконкаОбработки.Представление + ".png";
		ИконкаОбработки.Значение.Записать(ПутьКИконке);
		
		мСписокИконок.Добавить(НРег((СтрЗаменить(ИконкаОбработки.Представление, "Icon", ""))), ПутьКИконке);
		
	КонецЦикла;
	
	ИконкаКнопки = мСписокИконок.НайтиПоЗначению("кнопка");
	Если Не ИконкаКнопки = Неопределено Тогда
		мСписокИконок.Добавить("кнопкакоманднойпанели", ИконкаКнопки.Представление);
		мСписокИконок.Добавить("кнопкаформы", ИконкаКнопки.Представление);
	КонецЕсли;
	
	ИконкаПоля = мСписокИконок.НайтиПоЗначению("полеввода");
	Если Не ИконкаПоля = Неопределено Тогда
		мСписокИконок.Добавить("полеформы", ИконкаПоля.Представление);
	КонецЕсли;
	
	ИконкаТаблицы = мСписокИконок.НайтиПоЗначению("табличноеполе");
	Если Не ИконкаТаблицы = Неопределено Тогда
		мСписокИконок.Добавить("таблицаформы", ИконкаТаблицы.Представление);
	КонецЕсли;
	
	ИконкаТаблицы = мСписокИконок.НайтиПоЗначению("панель");
	Если Не ИконкаТаблицы = Неопределено Тогда
		мСписокИконок.Добавить("страницапанели", ИконкаТаблицы.Представление);
	КонецЕсли;
	
	АдресСлужебнойКртинки = мКаталогДопФайлов + "\" + "Форма.png";
	БиблиотекаКартинок.Форма.Записать(АдресСлужебнойКртинки);
	мСписокИконок.Добавить("форма", АдресСлужебнойКртинки);
	
	// Иконки служебных кнопок
	АдресСлужебнойКртинки = мКаталогДопФайлов + "\" + "Добавить.png";
	БиблиотекаКартинок.СоздатьЭлементСписка.Записать(АдресСлужебнойКртинки);
	мСписокИконок.Добавить("добавить", АдресСлужебнойКртинки);
	
	АдресСлужебнойКртинки = мКаталогДопФайлов + "\" + "Скопировать.png";
	БиблиотекаКартинок.СкопироватьЭлементСписка.Записать(АдресСлужебнойКртинки);
	мСписокИконок.Добавить("скопировать", АдресСлужебнойКртинки);
	
	АдресСлужебнойКртинки = мКаталогДопФайлов + "\" + "Изменить.png";
	БиблиотекаКартинок.Изменить.Записать(АдресСлужебнойКртинки);
	мСписокИконок.Добавить("изменить", АдресСлужебнойКртинки);
	
	АдресСлужебнойКртинки = мКаталогДопФайлов + "\" + "Удалить.png";
	БиблиотекаКартинок.УдалитьЭлементСписка.Записать(АдресСлужебнойКртинки);
	мСписокИконок.Добавить("удалить", АдресСлужебнойКртинки);
	
КонецПроцедуры

&НаСервере
Функция СписокИконокОбработки()
	
	СписокИконок = Новый СписокЗначений();
	ОбработкаРедактор = РеквизитФормыВЗначение("Объект");
	Макеты = ОбработкаРедактор.Метаданные().Макеты;
	
	Для Каждого МакетОбработки Из Макеты Цикл
		Если Найти(МакетОбработки.Имя, "Icon") > 0 Тогда
			
			Картинка = ОбработкаРедактор.ПолучитьМакет(МакетОбработки.Имя);
			СписокИконок.Добавить(Картинка, МакетОбработки.Имя);
			
		КонецЕсли; 
	КонецЦикла;
	
	Возврат СписокИконок;
	
КонецФункции // СписокИконокОбработки()

&НаКлиенте
Функция АдресИконкиЭлементаФормы(ТипЭлемента)
	
	ТипЭлемента = СтрЗаменить(ТипЭлемента, " ", "");
	ТипЭлемента = НРег(ТипЭлемента);
	ДанныеКартинки = мСписокИконок.НайтиПоЗначению(ТипЭлемента);
	Если ДанныеКартинки = Неопределено Тогда
		Возврат "#";
	Иначе
		Возврат ДанныеКартинки.Представление;
	КонецЕсли;
	
КонецФункции // АдресИконкиЭлементаФормы()

&НаКлиенте
Процедура ОтвязатьФормуОбъектаОтСправки(ФормаОбъекта)
	
	Для Каждого СсылкаНаФорму Из мОткрытыеФормы Цикл
		Если СсылкаНаФорму.Форма = ФормаОбъекта Тогда
			мОткрытыеФормы.Удалить(СсылкаНаФорму);
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПривязатьФормуОбъектаКСправке(ПолноеИмяФормы, ФормаОбъекта)

	Если ФормаБылаПривязанаРанее(ФормаОбъекта) Тогда
		Возврат;
	КонецЕсли;	

	Если Не СправкаСодержитСсылкуНаФорму(ПолноеИмяФормы) Тогда
		Возврат;
	КонецЕсли;
		
	СсылкаНаФорму = мОткрытыеФормы.Добавить();
	
	СсылкаНаФорму.ИмяФормы = НРег(ПолноеИмяФормы);
	
	Если Найти(НРег(ПолноеИмяФормы), ".обработка.") > 0 Тогда
		ОбъектВладелецФормы = Строка(ВладелецФормы.ЭтотОбъект);
		Если Найти(ОбъектВладелецФормы, "ВнешняяОбработкаОбъект") > 0
			Или Найти(ОбъектВладелецФормы, "ВнешнийОтчетОбъект") > 0 Тогда
			
			ИмяРасширения = СтрЗаменить(ОбъектВладелецФормы, "ВнешняяОбработкаОбъект.", "");
			ИмяРасширения = СтрЗаменить(ИмяРасширения, "ВнешнийОтчетОбъект.", "");
			
			СсылкаНаФорму.ФайлРасширения = ВладелецФормы.ЭтотОбъект.ИспользуемоеИмяФайла;
			
			ИмяФормыРасширения = Прав(ПолноеИмяФормы, 
				СтрДлина(ПолноеИмяФормы) - Найти(НРег(ПолноеИмяФормы), НРег(ИмяРасширения)) + 1);
				
			Если Найти(ОбъектВладелецФормы, "ВнешняяОбработкаОбъект") > 0 Тогда
				СсылкаНаФорму.ИмяФормы = НРег("ВнешняяОбработка." + ИмяФормыРасширения);
			ИначеЕсли Найти(ОбъектВладелецФормы, "ВнешнийОтчетОбъект") > 0 Тогда
				СсылкаНаФорму.ИмяФормы = НРег("ВнешнийОтчет." + ИмяФормыРасширения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	СсылкаНаФорму.Форма = ФормаОбъекта;
	СсылкаНаФорму.НомерСтроки = мОткрытыеФормы.Количество();
	СсылкаНаФорму.ФормаОткрытаИнтерактивно = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ФормаБылаПривязанаРанее(ФормаОбъекта)
	
	Для Каждого СсылкаНаФорму Из мОткрытыеФормы Цикл
		Если СсылкаНаФорму.Форма = ФормаОбъекта Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
		
КонецФункции

&НаКлиенте
Функция СправкаСодержитСсылкуНаФорму(ПолноеИмяФормы)
	
	Для Каждого СтрокаРасшифровки Из мРасшифровкиСсылок Цикл
		Если СтрокаРасшифровки.Расшифровка = "ОткрытьФорму" Тогда
			Если НРег(СтрокаРасшифровки.Параметры.ПолноеИмяФормы) = НРег(ПолноеИмяФормы) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//#Если ТолстыйКлиентОбычноеПриложение Или ТолстыйКлиентУправляемоеПриложение Тогда

&НаКлиенте
Процедура ИнициализацияТаблицаОткрытыхФорм()
	
//	мОткрытыеФормы = Новый ТаблицаЗначений(); 
//	мОткрытыеФормы.Колонки.Добавить("НомерСтроки");
//	мОткрытыеФормы.Колонки.Добавить("ИмяФормы");
//	мОткрытыеФормы.Колонки.Добавить("Форма");
//	мОткрытыеФормы.Колонки.Добавить("ФормаОткрытаИнтерактивно");
//	мОткрытыеФормы.Колонки.Добавить("ИмяТекущегоЭлемента");
//	мОткрытыеФормы.Колонки.Добавить("ТекущийЭлемент");
//	мОткрытыеФормы.Колонки.Добавить("НастройкиТекущегоЭлемента");
//	мОткрытыеФормы.Колонки.Добавить("ВыделятьЭлементИнтерактивно");
//	мОткрытыеФормы.Колонки.Добавить("ТекущийЭлементВыделен");
	
КонецПроцедуры // ИнициализироватьФормыСправки()

&НаКлиенте
Процедура ИнициализироватьРасшифровки()
	
//	мРасшифровкиСсылок = Новый ТаблицаЗначений(); 
//	мРасшифровкиСсылок.Колонки.Добавить("НомерСтроки");
//	мРасшифровкиСсылок.Колонки.Добавить("Расшифровка");
//	мРасшифровкиСсылок.Колонки.Добавить("Представление");
//	мРасшифровкиСсылок.Колонки.Добавить("Параметры");
//	мРасшифровкиСсылок.Колонки.Добавить("АдресКартинки");
	
КонецПроцедуры // ИнициализироватьРасшифровки()

&НаКлиенте
Процедура ПолучитьСтруктуруЭлементовФормы(ОбъектМетаданныхФорма, ОткрытьФорму, ОткрытьФормуНовогоОбъекта)
	
	Если Не ОбъектМетаданныхФорма.Класс = "Форма" Или ПустаяСтрока(ОбъектМетаданныхФорма.ПолноеИмя) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ОбъектМетаданныхФорма.СтруктураЭлементовФормы = Неопределено Тогда
		
		ВременнаяФормаИсточник = ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, Истина);
		Если ВременнаяФормаИсточник = Неопределено Тогда
			Сообщить("Не удалось получить доступ к форме объекта");
			Возврат;
		КонецЕсли;
		
		УстановитьОбработчикиСобытийФормы(ВременнаяФормаИсточник);
		СтруктураЭлементовФормы = СтруктураЭлементовФормы(ВременнаяФормаИсточник);
		ВременнаяФормаИсточник = Неопределено;
		
		ФормаИсточник = ИнтерактивнаяФорма(
			ОбъектМетаданныхФорма, ОткрытьФорму, ОткрытьФормуНовогоОбъекта, Истина);
		ОбработатьПодчиненныеЭлементыФормы(ФормаИсточник, СтруктураЭлементовФормы);
		
		ОбъектМетаданныхФорма.СтруктураЭлементовФормы = СтруктураЭлементовФормы;
		
	Иначе
		ФормаИсточник = ИнтерактивнаяФорма(
			ОбъектМетаданныхФорма, ОткрытьФорму, ОткрытьФормуНовогоОбъекта, Истина);	
	КонецЕсли; 
	
	ПоказатьСтруктуруЭлементовФормы(ОбъектМетаданныхФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ИнтерактивнаяФорма(ОбъектМетаданныхФорма, ОткрытьФорму, 
	ОткрытьФормуНовогоОбъекта = Неопределено, АктивизироватьФорму = Истина)
	
	Если Не ОбъектМетаданныхФорма.Класс = "Форма" И Не ПустаяСтрока(ОбъектМетаданныхФорма.ПолноеИмя) Тогда
		Возврат Неопределено;
	КонецЕсли; 

	СсылкаНаФорму = мОткрытыеФормы.Найти(НРег(ОбъектМетаданныхФорма.ПолноеИмя), "ИмяФормы");
	ИнтерактивнаяФорма = Неопределено;

	Если СсылкаНаФорму = Неопределено Тогда
		
		Если ТипЗнч(ОбъектМетаданныхФорма) = Тип("Структура") Тогда
			Если (ОбъектМетаданныхФорма.Форма.УсловияРаботыСФормой = "ФормаДолжнаБытьОткрыта") Тогда

				Сообщить("Перед продолжением работы необходмо выполнить предыдущие действия.");
				Возврат Неопределено;

			КонецЕсли;
		КонецЕсли;
		
		ИнтерактивнаяФорма = ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, ОткрытьФормуНовогоОбъекта);
		Если ИнтерактивнаяФорма = Неопределено Тогда
			Возврат ИнтерактивнаяФорма;
		КонецЕсли;
		
		Если ОткрытьФорму Тогда
			
			СсылкаНаФорму = мОткрытыеФормы.Добавить();
			СсылкаНаФорму.ИмяФормы = НРег(ОбъектМетаданныхФорма.ПолноеИмя);
			СсылкаНаФорму.Форма    = ИнтерактивнаяФорма;
			СсылкаНаФорму.НомерСтроки = мОткрытыеФормы.Количество();
			
			ИнтерактивнаяФорма.Открыть();
			СсылкаНаФорму.ФормаОткрытаИнтерактивно = Истина;
		
		КонецЕсли;
		
	Иначе
		
		ИнтерактивнаяФорма = СсылкаНаФорму.Форма;
		Если СсылкаНаФорму.ФормаОткрытаИнтерактивно И Не ИнтерактивнаяФорма.Открыта() Тогда
			
			Если ТипЗнч(ОбъектМетаданныхФорма) = Тип("Структура") Тогда
				Если (ОбъектМетаданныхФорма.Форма.УсловияРаботыСФормой = "ФормаДолжнаБытьОткрыта") Тогда

					Сообщить("Перед продолжением работы необходмо выполнить предыдущие действия.");
					Возврат Неопределено;

				КонецЕсли;
			КонецЕсли; 
			
			// Создаем новую форму
			СсылкаНаФорму.Форма = Неопределено;
			//ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя);
			ИнтерактивнаяФорма = ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, ОткрытьФормуНовогоОбъекта);
			Если ИнтерактивнаяФорма = Неопределено Тогда
				Возврат ИнтерактивнаяФорма;
			КонецЕсли;
		
			СсылкаНаФорму.ИмяФормы = НРег(ОбъектМетаданныхФорма.ПолноеИмя);
			СсылкаНаФорму.Форма    = ИнтерактивнаяФорма;
			СсылкаНаФорму.НастройкиТекущегоЭлемента = Неопределено;
			мНастройкиТекущегоЭлемента = Неопределено;
			
			Если ОткрытьФорму Тогда
				ИнтерактивнаяФорма.Открыть();
				СсылкаНаФорму.ФормаОткрытаИнтерактивно = Истина;
			КонецЕсли;
			
		Иначе
			Если АктивизироватьФорму Тогда
				ИнтерактивнаяФорма.Активизировать();
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ИнтерактивнаяФорма;
	
КонецФункции


&НаКлиенте
Функция ПолучитьИнтерактивнуюФорму(ОбъектМетаданныхФорма, ФормаНовогоОбъекта)
	
	ИнтерактивнаяФорма = Неопределено;
	//Попытка
	//	ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя);
	//Исключение
	//	
	//	Если (Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешняяОбработка") > 0 
	//		Или Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешнийОтчет") > 0) Тогда
	//		
	//		Сообщить("Не удалось найти форму, расширения. Убедитель что расширение добавлено в редактор");
	//		
	//	КонецЕсли;
	//	
	//КонецПопытки;
	
	//Возврат ИнтерактивнаяФорма;

	Если (Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешняяОбработка") > 0 
		Или Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешнийОтчет") > 0) Тогда
		
		Если Не ОбъектМетаданныхФорма.Свойство("ФайлРасширения") Тогда
			
			ОбъектМетаданныхФорма = ПолучитьУзелРасширенияПоПолномуИмени(ОбъектМетаданныхФорма.ПолноеИмя);
			Если ОбъектМетаданныхФорма = Неопределено  Тогда
				
				Сообщить("Не удалось найти форму, убедитесь что расширение зарегистрировано в редакторе
				|Добавьте расширение в соствав редактора");
				
				Возврат Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбъектМетаданныхФорма.Тип = "Обычная" Тогда
			
#Если ТолстыйКлиентОбычноеПриложение Тогда
				
			ИмяФайла = ОбъектМетаданныхФорма.ПолучитьРодителя().ПолучитьРодителя().ФайлРасширения;
			
			Если Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешняяОбработка") > 0 Тогда
				ИнтерактивнаяФорма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла, ОбъектМетаданныхФорма.Имя);
			ИначеЕсли Найти(ОбъектМетаданныхФорма.ПолноеИмя, "ВнешнийОтчет") > 0 Тогда
				ИнтерактивнаяФорма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла, ОбъектМетаданныхФорма.Имя);
			КонецЕсли;
			
#ИначеЕсли Не ТолстыйКлиентОбычноеПриложение Тогда
			
			Возврат Неопределено;
			
#КонецЕсли
		
		Иначе

#Если ТолстыйКлиентУправляемоеПриложение Тогда
			
		ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя);
			
#ИначеЕсли Не ТолстыйКлиентУправляемоеПриложение  Тогда
			
		Возврат Неопределено;
			
#КонецЕсли

		КонецЕсли;
		
	Иначе
						
		ПараметрыФормы = Новый Структура();
		Если (ФормаНовогоОбъекта = Ложь) Тогда
			
			ИмяОбъекта = ПолноеИмяОбъектаФормы(ОбъектМетаданныхФорма);
			ОбъектСсылка = ОткрытьФормуМодально(ИмяОбъекта + ".ФормаВыбора", Новый Структура("РежимВыбора", Истина));
			
			ПараметрыФормы.Вставить("Ключ", ОбъектСсылка);
			
		КонецЕсли;
		
		ИнтерактивнаяФорма = ПолучитьФорму(ОбъектМетаданныхФорма.ПолноеИмя, ПараметрыФормы);
		
	КонецЕсли;
	
	Возврат ИнтерактивнаяФорма;
	
КонецФункции // ПолучитьИнтерактивнуюФорму()

&НаКлиенте
Функция ПолноеИмяОбъектаФормы(ОбъектМетаданныхФорма)
	
	Если Не ОбъектМетаданныхФорма.Класс = "Форма" И Не ПустаяСтрока(ОбъектМетаданныхФорма.ПолноеИмя) Тогда
		Возврат "";
	КонецЕсли; 
	
	Возврат ОбъектМетаданныхФорма.ПолучитьРодителя().ПолучитьРодителя().ПолноеИмя;
	
КонецФункции 

&НаКлиенте
Функция ПолучитьУзелРасширенияПоПолномуИмени(ПолноеИмяФормыРасширения)
	
	КонецИмени = Найти(ПолноеИмяФормыРасширения, ".Форма") - 1;
	ПолноеИмяРасширения = Лев(ПолноеИмяФормыРасширения, КонецИмени);
	
	УзелВыбранныеОбъекты = СтруктураМетаданных.НайтиПоИдентификатору(0);
	Если Не УзелВыбранныеОбъекты = Неопределено Тогда
		Для Каждого УзелМенеджер Из УзелВыбранныеОбъекты.ПолучитьЭлементы() Цикл
			Если УзелМенеджер.Имя = "Расширения" Тогда
				Для Каждого УзелОбъекта Из УзелМенеджер.ПолучитьЭлементы() Цикл
					Если УзелОбъекта.ПолноеИмя = ПолноеИмяРасширения Тогда
						Для Каждого УзелГруппыСвойств Из УзелОбъекта.ПолучитьЭлементы() Цикл
							Если УзелГруппыСвойств.Имя = "Формы" Тогда
								Для Каждого УзелФормы Из УзелГруппыСвойств.ПолучитьЭлементы() Цикл
									Если УзелФормы.ПолноеИмя = ПолноеИмяФормыРасширения Тогда
										Возврат УзелФормы;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
			
КонецФункции // ПолучитьУзелРасширенияПоПолномуИмени()

&НаКлиенте
Процедура ПоказатьСтруктуруЭлементовФормы(ОбъектМетаданныхФорма)
	
	СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы().Очистить();
	Если Не ОбъектМетаданныхФорма.Класс = "Форма" Тогда
		//Элементы.СтруктураЭлементовИнтеративнойФормы.Видимость = Ложь;
		Возврат;
	Иначе
		//Элементы.СтруктураЭлементовИнтеративнойФормы.Видимость = Истина;
	КонецЕсли;
	
	Если ОбъектМетаданныхФорма.СтруктураЭлементовФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ОбъектМетаданныхФорма.СтруктураЭлементовФормы, СтруктураЭлементовИнтерактивнойФормы);
	
КонецПроцедуры // ПоказатьСтруктуруЭлементовФормы()

&НаКлиенте
Процедура УстановитьОбработчикиСобытийФормы(Форма)
	
	СобытияФорм = Новый Структура();
	
	СобытияФорм.Вставить("ВнешнееСобытие",               "Маркер_Форма_ВнешнееСобытие");
	СобытияФорм.Вставить("ПередОткрытием",               "Маркер_Форма_ПередОткрытием");
	СобытияФорм.Вставить("ПриОткрытии",                  "Маркер_Форма_ПриОткрытии");
	СобытияФорм.Вставить("ПриПовторномОткрытии",         "Маркер_Форма_ПриПовторномОткрытии");
	СобытияФорм.Вставить("ОбработкаВыбора",              "Маркер_Форма_ОбработкаВыбора");
	СобытияФорм.Вставить("ОбработкаОповещения",          "Маркер_Форма_ОбработкаОповещения");
	СобытияФорм.Вставить("ОбработкаПроверкиЗаполнения",  "Маркер_Форма_ОбработкаПроверкиЗаполнения");
	СобытияФорм.Вставить("ОбновлениеОтображения",        "Маркер_Форма_ОбновлениеОтображения");
	СобытияФорм.Вставить("ОбработкаАктивизацииОбъекта",  "Маркер_Форма_ОбработкаАктивизацииОбъекта");
	СобытияФорм.Вставить("ПриСменеСтраницы",             "Маркер_Форма_ПриСменеСтраницы");
	СобытияФорм.Вставить("ПриИзмененииДанных",           "Маркер_Форма_ПриИзмененииДанных");
	СобытияФорм.Вставить("ОбработкаЗаписиНовогоОбъекта", "Маркер_Форма_ОбработкаЗаписиНовогоОбъекта");
	СобытияФорм.Вставить("ПередЗаписью",                 "Маркер_Форма_ПередЗаписью");
	СобытияФорм.Вставить("ПриЗаписи",                    "Маркер_Форма_ПриЗаписи");
	СобытияФорм.Вставить("ПослеЗаписи",                  "Маркер_Форма_ПослеЗаписи");
	СобытияФорм.Вставить("ПередЗакрытием",               "Маркер_Форма_ПередЗакрытием");
	СобытияФорм.Вставить("ПриЗакрытии",                  "Маркер_Форма_ПриЗакрытии");
	
	// Собираем список событий формы
	Для Каждого Событие Из СобытияФорм Цикл
		
		Попытка
			
			Форма.УстановитьДействие(Событие.Ключи, Неопределено);
			
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // НазначитьОбработчикиСобытийФормы()

&НаКлиенте
Функция СтруктураЭлементовФормы(ФормаИсходник)
	
	Если ТипЗнч(ФормаИсходник) = Тип("УправляемаяФорма") Тогда
		ЭлементыИнтерактивнойФормы = ФормаИсходник.Элементы;
	Иначе
		ЭлементыИнтерактивнойФормы = ФормаИсходник.ЭлементыФормы;
	КонецЕсли; 
	
	КоличествоЭлементовНаФорме = ЭлементыИнтерактивнойФормы.Количество();
	
	СтруктураЭлементовФормы = Новый ДеревоЗначений;
	
	СтруктураЭлементовФормы.Колонки.Добавить("ЭлементФормы");
	СтруктураЭлементовФормы.Колонки.Добавить("Представление");
	СтруктураЭлементовФормы.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	СтруктураЭлементовФормы.Колонки.Добавить("ПорядокОбхода");
	СтруктураЭлементовФормы.Колонки.Добавить("Доступность");
	СтруктураЭлементовФормы.Колонки.Добавить("ПолныйПутьКЭлементуФормы");
	СтруктураЭлементовФормы.Колонки.Добавить("ИндексКартинки");
	СтруктураЭлементовФормы.Колонки.Добавить("ЭлементУправляемойФормы");
	СтруктураЭлементовФормы.Колонки.Добавить("ВидГруппыФормы");

	
	Если ТипЗнч(ФормаИсходник) = Тип("УправляемаяФорма") Тогда
		ЗаполнитьСтруктуруЭлементовУправляемойФормы(ФормаИсходник, СтруктураЭлементовФормы, ЭлементыИнтерактивнойФормы);
		СтруктураЭлементовФормы.Колонки.Удалить(СтруктураЭлементовФормы.Колонки.ВидГруппыФормы);
	Иначе
		
		КоличествоОбработаныхЭлементов = 
			РаспределитьЭлементыПоПанелям(СтруктураПанелейФормы(ФормаИсходник).Строки, ФормаИсходник, СтруктураЭлементовФормы);
	
	КонецЕсли; 
	
	СтруктураЭлементовФормы.Строки.Сортировать("ПорядокОбхода", Истина);
	
	Возврат СтруктураЭлементовФормы;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтруктуруЭлементовУправляемойФормы(ФормаИсходник, СтруктураЭлементовФормы, ЭлементыИнтерактивнойФормы)
	
	Для Каждого ЭлементФормы Из ЭлементыИнтерактивнойФормы Цикл
		
		Если Не ЭлементФормы.Родитель = Неопределено Тогда
			ЭлементРодитель = ЭлементРодитель(ФормаИсходник, СтруктураЭлементовФормы, ЭлементФормы.Родитель);
		Иначе
			ЭлементРодитель = СтруктураЭлементовФормы;
		КонецЕсли;
		
		УзелЭлементаФормы = НайтиЭлементВСтруктуре(СтруктураЭлементовФормы, ЭлементФормы);
		Если УзелЭлементаФормы = Неопределено Тогда
			ДобавитьЭлементФормыВСтруктуруЭлементов(ФормаИсходник, ЭлементРодитель, ЭлементФормы);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭлементРодитель(ФормаИсходник, СтруктураЭлементовФормы, ЭлементФормыРодитель)
	
	ЭлементРодитель = НайтиЭлементВСтруктуре(СтруктураЭлементовФормы, ЭлементФормыРодитель);
	Если Не ЭлементРодитель = Неопределено Тогда
		Возврат ЭлементРодитель;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементФормыРодитель) = Тип("УправляемаяФорма") Тогда
		
		НовыйЭлементРодитель = СтруктураЭлементовФормы.Строки.Добавить();
		НовыйЭлементРодитель.ЭлементФормы  = ЭлементФормыРодитель.ИмяФормы;
		НовыйЭлементРодитель.Представление = "Управляемая форма";
		НовыйЭлементРодитель.ПорядокОбхода = 0;
		НовыйЭлементРодитель.ИндексКартинки = 0;
		НовыйЭлементРодитель.ЭлементУправляемойФормы = Истина;
		
		Возврат НовыйЭлементРодитель;
		
	КонецЕсли;
	
	Если Не ЭлементФормыРодитель.Родитель = Неопределено Тогда
		
		ЭлементРодитель = ЭлементРодитель(ФормаИсходник, СтруктураЭлементовФормы, ЭлементФормыРодитель.Родитель);
		
	КонецЕсли;
	
	НовыйЭлементРодитель = СтруктураЭлементовФормы.Строки.Добавить();
	НовыйЭлементРодитель.ЭлементФормы  = ЭлементФормыРодитель.Имя;
	НовыйЭлементРодитель.Представление = ЭлементФормыРодитель.Заголовок;
	НовыйЭлементРодитель.ПорядокОбхода = ФормаИсходник.ПодчиненныеЭлементы.Индекс(ЭлементФормыРодитель);
	НовыйЭлементРодитель.Тип = ТипЗнч(ЭлементФормыРодитель);
	НовыйЭлементРодитель.ЭлементУправляемойФормы = Истина;
	
	УстановитьИндексКартинки(НовыйЭлементРодитель);
	
	Возврат НовыйЭлементРодитель;
	
КонецФункции // ЭлементРодитель()

&НаКлиенте
Процедура ДобавитьЭлементФормыВСтруктуруЭлементов(ФормаИсходник, СтруктураЭлементовФормы, ЭлементФормы)
	
	Если Прав(ЭлементФормы.Имя, 20) = "РасширеннаяПодсказка"
		//Или Прав(ЭлементФормы.Имя, 15) = "КонтекстноеМеню" 
		Тогда
		Возврат;
	КонецЕсли;
	
	НовыйЭлемент = СтруктураЭлементовФормы.Строки.Добавить();
	НовыйЭлемент.ЭлементФормы  = ЭлементФормы.Имя;
	НовыйЭлемент.Представление = ЭлементФормы.Заголовок;
	НовыйЭлемент.ПорядокОбхода = ФормаИсходник.ПодчиненныеЭлементы.Индекс(ЭлементФормы);
	НовыйЭлемент.Тип = ТипЗнч(ЭлементФормы);
	НовыйЭлемент.ЭлементУправляемойФормы = Истина;
	
	Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
		НовыйЭлемент.ВидГруппыФормы = ЭлементФормы.Вид;
	КонецЕсли;
	
	УстановитьИндексКартинки(НовыйЭлемент);
	
КонецПроцедуры // ДобавитьЭлементФормыВСтруктуруЭлементов()

&НаКлиенте
Процедура УстановитьИндексКартинки(ЭлементФормы)
	
	Если ЭлементФормы.Тип = "Поле формы" Тогда
		ЭлементФормы.ИндексКартинки = 4;
	ИначеЕсли ЭлементФормы.Тип = "Кнопка формы" Тогда
		ЭлементФормы.ИндексКартинки = 28;
	ИначеЕсли ЭлементФормы.Тип = "Таблица формы" Тогда
		ЭлементФормы.ИндексКартинки = 3;
	ИначеЕсли ЭлементФормы.Тип = "Группа формы" Тогда
		
		ЭлементФормы.ИндексКартинки = 26;
		
		Если ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.ГруппаКнопок
			Или ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.КонтекстноеМеню
			Или ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.Подменю Тогда
			
			ЭлементФормы.ИндексКартинки = 11;
			
		ИначеЕсли ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.КоманднаяПанель Тогда
			ЭлементФормы.ИндексКартинки = 27;
		ИначеЕсли ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.Страницы 
			Или ЭлементФормы.ВидГруппыФормы = ВидГруппыФормы.Страница Тогда
			ЭлементФормы.ИндексКартинки = 12;
		КонецЕсли;
		
	ИначеЕсли ЭлементФормы.Тип = "ДополнениеЭлементаФормы" Тогда
		ЭлементФормы.ИндексКартинки = 29;
	КонецЕсли; 
	
КонецПроцедуры // УстановитьИндексКартинки()

&НаКлиенте
Функция НайтиЭлементВСтруктуре(СтруктураЭлементовФормы, ЭлементФормы)

	Если ТипЗнч(ЭлементФормы) = Тип("УправляемаяФорма") Тогда
		НайденнаяСтрока = СтруктураЭлементовФормы.Строки.Найти(ЭлементФормы.ИмяФормы, "ЭлементФормы", Истина);
	Иначе
		НайденнаяСтрока = СтруктураЭлементовФормы.Строки.Найти(ЭлементФормы.Имя, "ЭлементФормы", Истина);
	КонецЕсли; 
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		Возврат НайденнаяСтрока;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция СтруктураПанелейФормы(ФормаИсходник)
	
	// Получаем список используемых панелей на форме
	СписокПанелейФормы = Новый ТаблицаЗначений();
	СписокПанелейФормы.Колонки.Добавить("Панель");
	СписокПанелейФормы.Колонки.Добавить("Родитель");
	
	Для Каждого ЭлементФормы Из ФормаИсходник.ЭлементыФормы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("Панель") Тогда
			ПолучитьСвязиПанелейФормы(ЭлементФормы, ГраницаЭлементаУправления.Лево,  СписокПанелейФормы, ФормаИсходник.Панель);
			ПолучитьСвязиПанелейФормы(ЭлементФормы, ГраницаЭлементаУправления.Верх,  СписокПанелейФормы, ФормаИсходник.Панель);
			ПолучитьСвязиПанелейФормы(ЭлементФормы, ГраницаЭлементаУправления.Право, СписокПанелейФормы, ФормаИсходник.Панель);
			ПолучитьСвязиПанелейФормы(ЭлементФормы, ГраницаЭлементаУправления.Низ,   СписокПанелейФормы, ФормаИсходник.Панель);
			ПолучитьСвязиПанелейФормы(ЭлементФормы, ГраницаЭлементаУправления.Центр, СписокПанелейФормы, ФормаИсходник.Панель);    
			
			УстановитьОбработчикПанелиФормы(ЭлементФормы);
			
		КонецЕсли; 
	КонецЦикла;
	
	СтруктураПанелейФормы = Новый ДеревоЗначений;
	СтруктураПанелейФормы.Колонки.Добавить("Панель");
	
	ПостроитьСтруктуруПанелейФормы(СписокПанелейФормы, ФормаИсходник.Панель,, СтруктураПанелейФормы);
	
	Возврат СтруктураПанелейФормы;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСвязиПанелейФормы(ИсходныйЭлементФормы, ГраницаЭлементаУправления, СписокПанелейФормы, ПанельФормы)
	
	Перем ЭлементПривязки, ГраницаПривязки, ЭлементПропорции, ГраницаДляПропорции;
	
	Попытка
		ИсходныйЭлементФормы.ПолучитьПривязку(ГраницаЭлементаУправления, ЭлементПривязки, ГраницаПривязки,
		ЭлементПропорции, ГраницаДляПропорции);
	Исключение
		Возврат;    
	КонецПопытки;
	
	// Если элемент привязан к самому себе
	Если ЭлементПривязки = ИсходныйЭлементФормы Тогда
		Возврат;
	КонецЕсли; 
	
	// Панель уже была записана
	НайденнаяСтрокаПанели = СписокПанелейФормы.Найти(ИсходныйЭлементФормы);
	Если Не НайденнаяСтрокаПанели = Неопределено Тогда
		Если НайденнаяСтрокаПанели.Родитель = ПанельФормы Тогда
			Возврат;    
		КонецЕсли; 
	КонецЕсли; 
	
	Если (Не ЭлементПривязки = Неопределено) И ТипЗнч(ЭлементПривязки) = Тип("Панель") Тогда
		
		Если НайденнаяСтрокаПанели = Неопределено Тогда
			НоваяСтрока = СписокПанелейФормы.Добавить();
		Иначе
			НоваяСтрока = НайденнаяСтрокаПанели;
		КонецЕсли; 
		
		НоваяСтрока.Панель = ИсходныйЭлементФормы;
		НоваяСтрока.Родитель = ЭлементПривязки;
		
	ИначеЕсли (Не ЭлементПропорции = Неопределено) И ТипЗнч(ЭлементПропорции) = Тип("Панель") Тогда
		
		Если НайденнаяСтрокаПанели = Неопределено Тогда
			НоваяСтрока = СписокПанелейФормы.Добавить();
		Иначе
			НоваяСтрока = НайденнаяСтрокаПанели;
		КонецЕсли; 
		
		НоваяСтрока.Панель = ИсходныйЭлементФормы;
		НоваяСтрока.Родитель = ЭлементПропорции;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСвязиПанелейФормы()

&НаКлиенте
Процедура УстановитьОбработчикПанелиФормы(ЭлементФормы)
	
	ЭлементФормы.УстановитьДействие("ПриСменеСтраницы", Неопределено);
	
КонецПроцедуры 

// Функция распределяет элементы формы по иерархии вложения элементов в элементы контейнеры
//  возвращает количество элементов формы собранных в структуру
&НаКлиенте
Функция РаспределитьЭлементыПоПанелям(Панели, ФормаИсходник, СтруктураЭлементовФормы, ЭлементРодитель = Неопределено)
	
	КоличествоЭлементовФормы = 0;
	
	Для Каждого ЭлементПанель Из Панели Цикл
		
		Если ЭлементПанель.Панель.Имя = Неопределено Тогда
			ИмяПанели = "ПанельФормы";
		Иначе
			ИмяПанели = ЭлементПанель.Панель.Имя;    
		КонецЕсли;                  
		
		// Добавляем панель
		Если ЭлементРодитель = Неопределено Тогда
			
			СтрокаЭлементаФорм = СтруктураЭлементовФормы.Строки.Добавить();
			СтрокаЭлементаФорм.ЭлементФормы  = ИмяПанели;
			СтрокаЭлементаФорм.Представление = ИмяПанели;
			СтрокаЭлементаФорм.ПорядокОбхода = 0;
			СтрокаЭлементаФорм.ИндексКартинки = 12;

		Иначе
			
			СтрокаЭлементаФорм = ЭлементРодитель.Строки.Добавить();
			СтрокаЭлементаФорм.ЭлементФормы  = ИмяПанели;
			СтрокаЭлементаФорм.Представление = ИмяПанели;
			СтрокаЭлементаФорм.ПорядокОбхода = ЭлементПанель.Панель.ПорядокОбхода;
			
			// Считаем количество элементов
			КоличествоЭлементовФормы = КоличествоЭлементовФормы + 1;
			
		КонецЕсли; 
		
		СтрокаЭлементаФорм.Тип = ТипЗнч(ЭлементПанель.Панель);
		
		Если ЭлементПанель.Строки.Количество() Тогда
			
			КоличествоЭлементовФормы = КоличествоЭлементовФормы + 
			РаспределитьЭлементыПоПанелям(ЭлементПанель.Строки, ФормаИсходник, 
			СтруктураЭлементовФормы, СтрокаЭлементаФорм);
			
		КонецЕсли; 
		
		НомерСтраницы = 0;
		КоличествоСтраниц = ЭлементПанель.Панель.Страницы.Количество();
		
		// Удаляем страницы панели по очереди
		Пока НомерСтраницы < КоличествоСтраниц Цикл
			
			НомерСтраницы = НомерСтраницы + 1;
			Страница = ЭлементПанель.Панель.Страницы[0];
			
			Если ЭлементПанель.Панель = ФормаИсходник.Панель И КоличествоСтраниц = 1 Тогда
				СтрокаСтраницы = СтрокаЭлементаФорм;
			Иначе
				
				СтрокаСтраницы = СтрокаЭлементаФорм.Строки.Добавить();
				СтрокаСтраницы.ЭлементФормы  = Страница.Имя;
				СтрокаСтраницы.Представление = Страница.Заголовок;
				СтрокаСтраницы.Тип           = ТипЗнч(Страница);
				СтрокаСтраницы.ПорядокОбхода = НомерСтраницы;
				СтрокаСтраницы.ИндексКартинки = 12;
				
			КонецЕсли; 
			
			// Перед удалением получаем список элементов формы
			СписокЭлементовДоУдаления = СписокЭлементовФормы(ФормаИсходник);
			ЭлементПанель.Панель.Страницы.Удалить(Страница);
			
			Для Каждого ЭлементФормы Из СписокЭлементовДоУдаления Цикл
				
				НайденныйЭлемент = ФормаИсходник.ЭлементыФормы.Найти(ЭлементФормы.Имя);
				Если НайденныйЭлемент = Неопределено Тогда
					
					Если ЭлементПанель.Панель = ФормаИсходник.Панель Тогда
						СтрокаПанели = СтрокаСтраницы.Строки.Найти(ЭлементФормы.Имя, "ЭлементФормы");
					Иначе
						СтрокаПанели = СтрокаСтраницы.Родитель.Строки.Найти(ЭлементФормы.Имя, "ЭлементФормы");
					КонецЕсли;
					
					// Добавляем строку элемента
					СтрокаЭлемента = СтрокаСтраницы.Строки.Добавить();
					СтрокаЭлемента.ЭлементФормы  = ЭлементФормы.Имя;    
					СтрокаЭлемента.Тип           = ЭлементФормы.Тип;
					СтрокаЭлемента.ПорядокОбхода = ЭлементФормы.ПорядокОбхода;
					
					Если (НЕ СтрокаПанели = Неопределено) И ЭлементФормы.Тип = Строка(Тип("Панель")) Тогда
						ЗаполнитьСоставПанели(СтрокаЭлемента, СтрокаПанели);
						СтрокаПанели.Родитель.Строки.Удалить(СтрокаПанели);
					Иначе
						КоличествоЭлементовФормы = КоличествоЭлементовФормы + 1;
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Возврат КоличествоЭлементовФормы;
	
КонецФункции // РаспределитьЭлементыПоПанелям()

&НаКлиенте
Функция СписокЭлементовФормы(ФормаИсходник, СохрянатьНастройкиПривязок = Ложь)
	
	СписокЭлементовФормы = Новый ТаблицаЗначений();
	
	СписокЭлементовФормы.Колонки.Добавить("Имя");
	СписокЭлементовФормы.Колонки.Добавить("Тип");
	СписокЭлементовФормы.Колонки.Добавить("ПорядокОбхода");
	
	Для Каждого ЭлементФормы Из ФормаИсходник.ЭлементыФормы Цикл
		
		НоваяСтрока = СписокЭлементовФормы.Добавить();
		НоваяСтрока.Имя           = ЭлементФормы.Имя;
		НоваяСтрока.Тип           = ТипЗнч(ЭлементФормы);
		НоваяСтрока.ПорядокОбхода = ЭлементФормы.ПорядокОбхода;
		
	КонецЦикла;
	
	Возврат СписокЭлементовФормы;
	
КонецФункции // СписокЭлементовФормы()

&НаКлиенте
Процедура ЗаполнитьСоставПанели(Панель, Состав)
	
	Для Каждого ВложенныйЭлемент Из Состав.Строки Цикл
		
		СтрокаЭлемента = Панель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭлемента, ВложенныйЭлемент);
		//СтрокаЭлемента.ЭлементФормы = ВложенныйЭлемент.ЭлементФормы;  
		//СтрокаЭлемента.Тип          = ВложенныйЭлемент.Тип;  
		Если  ВложенныйЭлемент.Строки.Количество() Тогда
			ЗаполнитьСоставПанели(СтрокаЭлемента, ВложенныйЭлемент); 
		КонецЕсли; 
		
	КонецЦикла;  
	
КонецПроцедуры // ЗаполнитьСоставПанели()

&НаКлиенте
Процедура ПостроитьСтруктуруПанелейФормы(СписокПанелейФормы, ЭлеменФормыПанель, 
	РодительскаяПанель = Неопределено, СтруктураПанелейФормы)
	
	Если РодительскаяПанель = Неопределено Тогда
		УзелПанели        = СтруктураПанелейФормы.Строки.Добавить();
		УзелПанели.Панель = ЭлеменФормыПанель;    
	Иначе
		УзелПанлиРодителя = СтруктураПанелейФормы.Строки.Найти(РодительскаяПанель, "Панель", Истина);    
		УзелПанели        = УзелПанлиРодителя.Строки.Добавить();
		УзелПанели.Панель = ЭлеменФормыПанель;    
	КонецЕсли; 
	
	ВложенныеПанели = СписокПанелейФормы.НайтиСтроки(Новый Структура("Родитель", ЭлеменФормыПанель));
	Для Каждого ВложеннаяПанель Из ВложенныеПанели Цикл
		ПостроитьСтруктуруПанелейФормы(СписокПанелейФормы, ВложеннаяПанель.Панель, ЭлеменФормыПанель, СтруктураПанелейФормы);
	КонецЦикла;
	
КонецПроцедуры // ПостроитьСтруктуруПанелейФормы()

&НаКлиенте
Процедура ОбработатьПодчиненныеЭлементыФормы(ФормаИсточник, СтруктураЭлементовФормы)
	
	УстановитьНастройкиЭлементовФормы(ФормаИсточник, СтруктураЭлементовФормы.Строки);
	
КонецПроцедуры // ОбработатьПодчиненныеЭлементыФормы()

&НаКлиенте
Процедура УстановитьНастройкиЭлементовФормы(ФормаИсточник, СтруктураЭлементов)
	
	Для Каждого ЭлементФормы Из СтруктураЭлементов Цикл
		
		Если ЭлементФормы.Строки.Количество() Тогда
			УстановитьНастройкиЭлементовФормы(ФормаИсточник, ЭлементФормы.Строки);
		КонецЕсли;
		
		Если ЭлементФормы.Тип = Строка(Тип("КоманднаяПанель")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 11;
			ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, ЭлементФормы);
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Кнопка")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Заголовок;
			ЭлементФормы.ИндексКартинки = 1;
			
			Если ИнтерактивныйЭлементФормы.РежимМеню = ИспользованиеРежимаМеню.Использовать Тогда
				ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, ЭлементФормы, ИнтерактивныйЭлементФормы);
			КонецЕсли;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Панель")) И Не ЭлементФормы.Родитель = Неопределено Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ИнтерактивныйЭлементФормы.УстановитьДействие("ПриСменеСтраницы", Неопределено);
			
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 12;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеВвода")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ИнтерактивныйЭлементФормы.ТолькоПросмотр = Ложь;
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 4;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Надпись")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			Если ПустаяСтрока(СокрЛП(ИнтерактивныйЭлементФормы.Заголовок)) Тогда
				ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			Иначе	
				ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Заголовок;
			КонецЕсли; 
			
			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 2;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Флажок")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Заголовок;
			ИнтерактивныйЭлементФормы.Доступность = Истина;
			ЭлементФормы.Доступность = Истина;
			ЭлементФормы.ИндексКартинки = 5;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ТабличноеПоле")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 3;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеТабличногоДокумента")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 14;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеТекстовогоДокумента")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 19;

		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("ПолеHtmlДокумента")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 21;
			
		ИначеЕсли ЭлементФормы.Тип = Строка(Тип("Разделитель")) Тогда
			
			ИнтерактивныйЭлементФормы = ФормаИсточник.ЭлементыФормы.Найти(ЭлементФормы.ЭлементФормы);
			ЭлементФормы.Представление = ИнтерактивныйЭлементФормы.Имя;
			ЭлементФормы.ИндексКартинки = 13;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьНастройкиЭлементовФормы()

&НаКлиенте
Процедура ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, КоманднаяПанель, ИсходныйЭлемент = Неопределено)
	
	Если ИсходныйЭлемент = Неопределено Тогда
		ИсходныйЭлемент = ФормаИсточник.ЭлементыФормы.Найти(КоманднаяПанель.ЭлементФормы);
	КонецЕсли; 
	
	Для Каждого КнопкаПанели Из ИсходныйЭлемент.Кнопки Цикл
		
		Если КнопкаПанели.ТипКнопки = ТипКнопкиКоманднойПанели.Разделитель Тогда
			Продолжить;	
		КонецЕсли;
		
		СтрокаКнопки = КоманднаяПанель.Строки.Добавить();
		СтрокаКнопки.ЭлементФормы = КнопкаПанели.Имя;
		СтрокаКнопки.Тип = ТипЗнч(КнопкаПанели);
		СтрокаКнопки.Представление = КнопкаПанели.Текст;
		СтрокаКнопки.ИндексКартинки = 1;
		
		Если КнопкаПанели.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
			
			ДобавитьКнопкиВСтруктуруЭлементов(ФормаИсточник, СтрокаКнопки, КнопкаПанели);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьКнопкиВСтруктуруЭлементов()

&НаКлиенте
Функция ПутьРасположенияЭлементаНаФорме(ДанныеЭлементаФормы)
	
	ПутьРасположенияЭлемента = Новый Массив();
	ПутьРасположенияЭлемента.Добавить(ДанныеЭлементаФормы.ЭлементФормы);
	
	Если Не ДанныеЭлементаФормы.ЭлементУправляемойФормы Тогда
		ДанныеРодителяЭлемента = ДанныеЭлементаФормы.ПолучитьРодителя();
		Если Не ДанныеРодителяЭлемента = Неопределено Тогда
			Пока Истина Цикл
				
				Если ДанныеРодителяЭлемента.ПолучитьРодителя() = Неопределено Тогда
					Прервать	
				КонецЕсли; 
				
				ПутьРасположенияЭлемента.Вставить(0, ДанныеРодителяЭлемента.ЭлементФормы);
				ДанныеРодителяЭлемента = ДанныеРодителяЭлемента.ПолучитьРодителя();
				
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ПутьРасположенияЭлемента;
	
КонецФункции // ПутьРасположенияЭлементаНаФорме()

&НаКлиенте
Процедура ВыделитьЭлементИнтерактивнойФормы(ИнтерактивнаяФорма, ПутьРасположенияЭлементаНаФорме)

	Если ТипЗнч(ИнтерактивнаяФорма) = Тип("УправляемаяФорма") Тогда
		ВыделитьЭлементУправляемойФормы(ИнтерактивнаяФорма, ПутьРасположенияЭлементаНаФорме);
	Иначе
		ВыделитьЭлементФормы(ИнтерактивнаяФорма, ПутьРасположенияЭлементаНаФорме);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЭлементУправляемойФормы(ИнтерактивнаяФорма, ПутьРасположенияЭлементаНаФорме)
	
	Если Не ПутьРасположенияЭлементаНаФорме.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормы = ИнтерактивнаяФорма.Элементы.Найти(ПутьРасположенияЭлементаНаФорме[0]);
	
	Если Не мНастройкиТекущегоЭлемента = Неопределено Тогда
		ВосстановитьНастройкиЭлементаФормы(мНастройкиТекущегоЭлемента);
	КонецЕсли;
	
	ДобавитьГруппуУказателя(ИнтерактивнаяФорма);
			
	НастройкиТекущегоЭлемента = Новый Соответствие();
	НастройкиТекущегоЭлемента.Вставить("ИнтерактивнаяФорма", ИнтерактивнаяФорма);
		
	Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
		
		НастройкиТекущегоЭлемента.Вставить(ЭлементФормы, 
			НастройкиВизуальногоОформления(ИнтерактивнаяФорма, ЭлементФормы));
							
		Если ТипЗнч(ЭлементФормы.Родитель) = Тип("ГруппаФормы") Тогда
			
			Пока ТипЗнч(ЭлементФормы.Родитель) = Тип("ГруппаФормы") Цикл
			
				КонтейнерКнопки = ЭлементФормы.Родитель;
				Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") 
					И ЭлементФормы.Вид = ВидГруппыФормы.ГруппаКнопок Тогда

//					Не выводить картинку указатель на группу кнопок				
					ЭлементФормы = КонтейнерКнопки;
					Продолжить;
					
				КонецЕсли;
				
				Если КонтейнерКнопки.Вид = ВидГруппыФормы.ГруппаКнопок
					Или КонтейнерКнопки.Вид = ВидГруппыФормы.КоманднаяПанель
					Или КонтейнерКнопки.Вид = ВидГруппыФормы.Подменю Тогда
					 		
					 ДобавитьСлужебнуюКнопкуУкатель(ИнтерактивнаяФорма, НастройкиТекущегоЭлемента, ЭлементФормы);
					 НастройкиТекущегоЭлемента.Вставить(ЭлементФормы, 
						НастройкиВизуальногоОформления(ИнтерактивнаяФорма, ЭлементФормы));	
							
				Иначе
					Прервать;
				КонецЕсли;
				
				ЭлементФормы = КонтейнерКнопки;
				
			КонецЦикла;	
			 
		Иначе
			
			НастройкиТекущегоЭлемента.Вставить(ЭлементФормы, 
				НастройкиВизуальногоОформления(ИнтерактивнаяФорма, ЭлементФормы));
				
			ДобавитьСлужебнуюКнопкуУкатель(ИнтерактивнаяФорма, НастройкиТекущегоЭлемента, ЭлементФормы);
					
		КонецЕсли;
		
	Иначе
		
		НастройкиТекущегоЭлемента.Вставить(ЭлементФормы, 
			НастройкиВизуальногоОформления(ИнтерактивнаяФорма, ЭлементФормы));
		
		РодительЭлемента = ЭлементФормы.Родитель;
		Если Не ТипЗнч(РодительЭлемента) = Тип("ТаблицаФормы") Тогда
		
			Если ТипЗнч(РодительЭлемента) = Тип("УправляемаяФорма") Тогда
				ИнтерактивнаяФорма.иид_ПереместитьЭлементФормы("ГруппаУказательНаЭлемент", "ЭтаФорма", ЭлементФормы.Имя);
			Иначе
	
				ИнтерактивнаяФорма.иид_ПереместитьЭлементФормы("ГруппаУказательНаЭлемент", РодительЭлемента.Имя, ЭлементФормы.Имя);
			КонецЕсли;
		
		ИнтерактивнаяФорма.иид_ПереместитьЭлементФормы(ЭлементФормы.Имя, "ГруппаУказательНаЭлемент");	
		ИнтерактивнаяФорма.Элементы.ГруппаУказательНаЭлемент.Видимость = Истина;	
//		ДобавитьСлужебнуюКнопкуУкатель(ИнтерактивнаяФорма, НастройкиТекущегоЭлемента, ЭлементФормы);
		КонецЕсли;
					
	КонецЕсли;
	
	мНастройкиТекущегоЭлемента = НастройкиТекущегоЭлемента;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуУказателя(ИнтерактивнаяФорма)
	
	ДобавитьСлужебныйЭлементФормы(ИнтерактивнаяФорма, "ГруппаУказательНаЭлемент", Тип("ГруппаФормы"), "ЭтаФорма");
	ГруппаУказателя = ИнтерактивнаяФорма.Элементы["ГруппаУказательНаЭлемент"];
	ГруппаУказателя.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаУказателя.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаУказателя.Видимость = Ложь;
	ГруппаУказателя.ОтображатьЗаголовок = Ложь;
	ГруппаУказателя.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	ДобавитьСлужебныйЭлементФормы(
		ИнтерактивнаяФорма, "КартинкаУказательНаЭлемент", Тип("ДекорацияФормы"), "ГруппаУказательНаЭлемент");
	КартинкаУказатель = ИнтерактивнаяФорма.Элементы["КартинкаУказательНаЭлемент"];
	КартинкаУказатель.Вид = ВидДекорацииФормы.Картинка;
	КартинкаУказатель.Картинка = БиблиотекаКартинок.иид_Указатель;
	КартинкаУказатель.Высота = 1;
	КартинкаУказатель.Ширина = 2;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСлужебнуюКнопкуУкатель(ИнтерактивнаяФорма, НастройкиТекущегоЭлемента, ЭлементФормы)

	КонтейнерРодитель = ЭлементФормы.Родитель;
	
	мНумерацияСлужебныхКнопок = мНумерацияСлужебныхКнопок + 1;
	ИмяКнопкиУказателя = "СлужебнаяКнопка_" + мНумерацияСлужебныхКнопок;
	Если ТипЗнч(КонтейнерРодитель) = Тип("УправляемаяФорма") Тогда
		ИмяКонтейнера = "ЭтаФорма";
	Иначе
		ИмяКонтейнера = КонтейнерРодитель.Имя;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = ЭлементФормы.Имя; 
	
	ДобавитьСлужебныйЭлементФормы(
		ИнтерактивнаяФорма, ИмяКнопкиУказателя, Тип("КнопкаФормы"), ИмяКонтейнера, ИмяТекущегоЭлемента);
		
	НастройкиТекущегоЭлемента.Вставить(ИнтерактивнаяФорма.Элементы[ИмяКнопкиУказателя], 
		НастройкиВизуальногоОформления(ИнтерактивнаяФорма, 
			ИнтерактивнаяФорма.Элементы[ИмяКнопкиУказателя], КонтейнерРодитель));
			
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСлужебныйЭлементФормы(ИнтерактивнаяФорма, ИмяЭлемента, ТипЭлемента, ИмяКонтейнера, ИмяСоседнегоЭлемента = "")
	
	Если (Не ИнтерактивнаяФорма.Элементы.Найти(ИмяЭлемента) = Неопределено) Тогда
		Возврат;	
	КонецЕсли;
	
	ИнтерактивнаяФорма.иид_ДобавитьСлужебныйЭлемент(
		ИмяЭлемента, ТипЭлемента, ИмяКонтейнера, ИмяСоседнегоЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЭлементФормы(ИнтерактивнаяФорма, ПутьРасположенияЭлементаНаФорме)
	
	ВсеЭлементыФормы = ИнтерактивнаяФорма.ЭлементыФормы;
	ЭлементФормы = Неопределено;
	
	Если Не мНастройкиТекущегоЭлемента = Неопределено Тогда
		ВосстановитьНастройкиЭлементаФормы(мНастройкиТекущегоЭлемента);
	КонецЕсли; 
	
	ВыделятьЭлементИнтерактивно = Ложь;
	НастройкиТекущегоЭлемента = Новый Соответствие();
	
	Если ПутьРасположенияЭлементаНаФорме.Количество() Тогда
		Для Каждого НаименованиеЭлемента Из ПутьРасположенияЭлементаНаФорме Цикл
			
			Если ЭлементФормы = Неопределено Тогда
				
				ЭлементФормы = ВсеЭлементыФормы.Найти(НаименованиеЭлемента);
				НастройкиТекущегоЭлемента.Вставить(ЭлементФормы, НастройкиВизуальногоОформления(ИнтерактивнаяФорма, ЭлементФормы));
				
			Иначе
				Если ТипЗнч(ЭлементФормы) = Тип("Панель") Тогда
					
					СтраницаПанели = ЭлементФормы.Страницы.Найти(НаименованиеЭлемента);
					Если Не СтраницаПанели = Неопределено Тогда
						
						ЭлементФормы.ТекущаяСтраница = СтраницаПанели;
						НастройкиТекущегоЭлемента.Вставить(СтраницаПанели, 
							НастройкиВизуальногоОформления(ИнтерактивнаяФорма, СтраницаПанели));
							
						ЭлементФормы = СтраницаПанели;
							
					Иначе
						ЭлементФормы = ВсеЭлементыФормы.Найти(НаименованиеЭлемента);
						НастройкиТекущегоЭлемента.Вставить(ЭлементФормы, 
							НастройкиВизуальногоОформления(ИнтерактивнаяФорма, ЭлементФормы));
					КонецЕсли; 
						
				ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("СтраницаПанели") Тогда 
					
					ЭлементФормы = ВсеЭлементыФормы.Найти(НаименованиеЭлемента);
					НастройкиТекущегоЭлемента.Вставить(ЭлементФормы, 
						НастройкиВизуальногоОформления(ИнтерактивнаяФорма, ЭлементФормы));
					
				ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КоманднаяПанель") 
					Или (ТипЗнч(ЭлементФормы) = Тип("КнопкаКоманднойПанели")
					И ЭлементФормы.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю) 
					Или (ТипЗнч(ЭлементФормы) = Тип("Кнопка")
					И ЭлементФормы.РежимМеню = ИспользованиеРежимаМеню.Использовать)Тогда
					
					КонтейнерКнопок = ЭлементФормы;
					ЭлементФормы = КонтейнерКнопок.Кнопки.Найти(НаименованиеЭлемента);
					Если Не ЭлементФормы = Неопределено Тогда
						
						ИндексВыбраннойКноки = КонтейнерКнопок.Кнопки.Индекс(ЭлементФормы);
						мНумерацияСлужебныхКнопок = мНумерацияСлужебныхКнопок + 1;
						ИмяКнопки = "СлужебнаяКнопкаУказатель_" + мНумерацияСлужебныхКнопок;
						
						СлужебныйЭлементФормы = КонтейнерКнопок.Кнопки
							.Добавить(ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "", Новый Действие("ОбработчикКнопкиУказателя"));
						
						Индекс = КонтейнерКнопок.Кнопки.Индекс(СлужебныйЭлементФормы);	
						КонтейнерКнопок.Кнопки.Сдвинуть(Индекс, ИндексВыбраннойКноки - Индекс);
						
						НастройкиТекущегоЭлемента.Вставить(СлужебныйЭлементФормы, 
							НастройкиВизуальногоОформления(ИнтерактивнаяФорма, СлужебныйЭлементФормы, КонтейнерКнопок));	
						
					КонецЕсли; 
					
				ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КнопкаКоманднойПанели")
					И ЭлементФормы.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
					
					КоманднаяПанель = ЭлементФормы;
					ЭлементФормы = ЭлементФормы.Кнопки.Найти(НаименованиеЭлемента);
					Если Не ЭлементФормы = Неопределено Тогда
						
						ИндексВыбраннойКноки = КоманднаяПанель.Кнопки.Индекс(ЭлементФормы);
						мНумерацияСлужебныхКнопок = мНумерацияСлужебныхКнопок + 1;
						ИмяКнопки = "СлужебнаяКнопкаУказатель_" + мНумерацияСлужебныхКнопок;
						
						СлужебныйЭлементФормы = КоманднаяПанель.Кнопки
						.Добавить(ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "", Новый Действие("ОбработчикКнопкиУказателя"));
						
						Индекс = КоманднаяПанель.Кнопки.Индекс(СлужебныйЭлементФормы);
						КоманднаяПанель.Кнопки.Сдвинуть(Индекс, ИндексВыбраннойКноки - Индекс);
						
						НастройкиТекущегоЭлемента.Вставить(СлужебныйЭлементФормы, 
							НастройкиВизуальногоОформления(ИнтерактивнаяФорма, СлужебныйЭлементФормы, КоманднаяПанель));
						
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("Кнопка")
					И ЭлементФормы.РежимМеню = ИспользованиеРежимаМеню.Использовать Тогда
					
					ЭлементФормы = ЭлементФормы.Кнопки.Найти(НаименованиеЭлемента);
					Если Не ЭлементФормы = Неопределено Тогда
						НастройкиТекущегоЭлемента.Вставить(ЭлементФормы, 
							НастройкиВизуальногоОформления(ИнтерактивнаяФорма, ИнтерактивнаяФорма, ЭлементФормы));
					КонецЕсли;
					
				КонецЕсли; 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	мНастройкиТекущегоЭлемента = НастройкиТекущегоЭлемента;
	
КонецПроцедуры // ВыделитьЭлементФормы()

&НаКлиенте
Процедура ВосстановитьНастройкиЭлементаФормы(НастройкиЭлементовФормы)
	
	ИнтерактивнаяФорма = НастройкиЭлементовФормы.Получить("ИнтерактивнаяФорма");
	Если Не ИнтерактивнаяФорма = Неопределено Тогда
		НастройкиЭлементовФормы.Удалить("ИнтерактивнаяФорма");
	КонецЕсли;
	
	Для Каждого ЭлементИнтерактивнойФормы Из НастройкиЭлементовФормы Цикл
		
		ЭлементФормы = ЭлементИнтерактивнойФормы.Ключ;
		НастройкиЭлемента = ЭлементИнтерактивнойФормы.Значение;
		
		Если НастройкиЭлемента.Свойство("ЭлементВладелец") Тогда
			Если ТипЗнч(НастройкиЭлемента.ЭлементВладелец) = Тип("КоманднаяПанель")
				Или ТипЗнч(НастройкиЭлемента.ЭлементВладелец) = Тип("КнопкаКоманднойПанели")
				Или ТипЗнч(НастройкиЭлемента.ЭлементВладелец) = Тип("Кнопка") Тогда
				
				ИндексЭлемента = НастройкиЭлемента.ЭлементВладелец.Кнопки.Индекс(ЭлементФормы);
				НастройкиЭлемента.ЭлементВладелец.Кнопки.Удалить(ИндексЭлемента);
				Продолжить;
				
			КонецЕсли; 
		КонецЕсли; 
		
		Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
			Если Найти(ЭлементФормы.Имя, "СлужебнаяКнопка_") Тогда
				Если Не ИнтерактивнаяФорма = Неопределено Тогда
					ИмяСлужебнойКнопки = ЭлементФормы.Имя; 
					ИнтерактивнаяФорма.иид_УдалитьСлужебныйЭлемент(ИмяСлужебнойКнопки);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		ИначеЕсли (ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") И Не ТипЗнч(ЭлементФормы.Родитель) = Тип("ТаблицаФормы"))  
			Или ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
			
			ЭлементФормы.Родитель.Видимость = Ложь;
			Если ТипЗнч(ЭлементФормы.Родитель.Родитель) = Тип("УправляемаяФорма") Тогда
				ИнтерактивнаяФорма.иид_ПереместитьЭлементФормы(ЭлементФормы.Имя, "ЭтаФорма", ЭлементФормы.Родитель.Имя);
			Иначе
				ИнтерактивнаяФорма.иид_ПереместитьЭлементФормы(
					ЭлементФормы.Имя, ЭлементФормы.Родитель.Родитель.Имя, ЭлементФормы.Родитель.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого НастройкаЭлемента Из НастройкиЭлемента Цикл
			ЭлементФормы[НастройкаЭлемента.Ключ] = НастройкаЭлемента.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	НастройкиЭлементовФормы = Неопределено;
	
КонецПроцедуры // ВосстановитьНастройкиЭлементаФормы()

&НаКлиенте
Функция НастройкиВизуальногоОформления(ИнтерактивнаяФорма, ЭлементФормы, ЭлементВладелец = Неопределено)
	
	НастройкиЭлемента = Новый Структура();
	
	Если ТипЗнч(ЭлементФормы) = Тип("СтраницаПанели") Тогда
		
		НастройкиЭлемента.Вставить("КартинкаЗаголовка", ЭлементФормы.КартинкаЗаголовка);
		ЭлементФормы.КартинкаЗаголовка = мКартинкаУказательВПраво;
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ПолеВвода")
		Или ТипЗнч(ЭлементФормы) = Тип("Надпись") Тогда
		
		НастройкиЭлемента.Вставить("Рамка", ЭлементФормы.Рамка);
		НастройкиЭлемента.Вставить("ЦветРамки", ЭлементФормы.ЦветРамки);
		НастройкиЭлемента.Вставить("Картинка", ЭлементФормы.Картинка);
		
		ЭлементФормы.ЦветРамки = мЦветВыделенияЭлементовФормы;
		ЭлементФормы.Картинка = мКартинкаУказательВПраво;
		
		РамкаЭлемента = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, 2);
		ЭлементФормы.Рамка = РамкаЭлемента;
		
		ИнтерактивнаяФорма.ТекущийЭлемент = ЭлементФормы;
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("Флажок") Тогда
		
		НастройкиЭлемента.Вставить("ЦветРамки", ЭлементФормы.ЦветРамки);
		НастройкиЭлемента.Вставить("Рамка", ЭлементФормы.Рамка);
		
		ЭлементФормы.ЦветРамки = мЦветВыделенияЭлементовФормы;
		
		РамкаЭлемента = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, 2);
		ЭлементФормы.Рамка = РамкаЭлемента;
		
		ИнтерактивнаяФорма.ТекущийЭлемент = ЭлементФормы;
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТабличноеПоле") Тогда
		
		НастройкиЭлемента.Вставить("ЦветРамки", ЭлементФормы.ЦветРамки);
		НастройкиЭлемента.Вставить("Рамка", ЭлементФормы.Рамка);
		
		ЭлементФормы.ЦветРамки = мЦветВыделенияЭлементовФормы;
		
		РамкаЭлемента = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 2);
		ЭлементФормы.Рамка = РамкаЭлемента;
		
		ИнтерактивнаяФорма.ТекущийЭлемент = ЭлементФормы;
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КоманднаяПанель") Тогда
		
		НастройкиЭлемента.Вставить("ЦветРамки", ЭлементФормы.ЦветРамки);
		НастройкиЭлемента.Вставить("Рамка", ЭлементФормы.Рамка);
		
		ЭлементФормы.ЦветРамки = мЦветВыделенияЭлементовФормы;
		
		РамкаЭлемента = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, 2);
		ЭлементФормы.Рамка = РамкаЭлемента;
		
		Если ТипЗнч(ЭлементФормы.ИсточникДействий) = Тип("ТабличноеПоле") Тогда
			ИнтерактивнаяФорма.ТекущийЭлемент = ЭлементФормы.ИсточникДействий;
		//Иначе
		//	ИнтерактивнаяФорма.ТекущийЭлемент = ЭлементФормы;
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("Кнопка") Тогда
		
		НастройкиЭлемента.Вставить("ЦветРамки", ЭлементФормы.ЦветРамки);
		НастройкиЭлемента.Вставить("Заголовок", ЭлементФормы.Заголовок);
		НастройкиЭлемента.Вставить("Картинка", ЭлементФормы.Картинка);
		
		ЭлементФормы.ЦветРамки = мЦветВыделенияЭлементовФормы;
		ЭлементФормы.Картинка  = мКартинкаУказательВПраво;
		
		ИнтерактивнаяФорма.ТекущийЭлемент = ЭлементФормы;
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КнопкаКоманднойПанели") Тогда
		
		Если Не ЭлементВладелец = Неопределено Тогда
			НастройкиЭлемента.Вставить("ЭлементВладелец", ЭлементВладелец);	
		КонецЕсли; 
		
		НастройкиЭлемента.Вставить("Текст", ЭлементФормы.Текст);
		НастройкиЭлемента.Вставить("Отображение", ЭлементФормы.Отображение);
		НастройкиЭлемента.Вставить("Картинка", ЭлементФормы.Картинка);
		
		Если Не ЭлементФормы.Картинка = мПустаяКартинка Тогда
			Если ЭлементФормы.Отображение = ОтображениеКнопкиКоманднойПанели.Авто
				Или ЭлементФормы.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка Тогда
				
				ВыделятьЭлементИнтерактивно = Истина;
				
			КонецЕсли; 
		Иначе
			ЭлементФормы.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КонецЕсли; 
		
		Если ТипЗнч(ЭлементВладелец) = Тип("КоманднаяПанель") Тогда
			ЭлементФормы.Картинка  = мКартинкаУказательВПраво;
		ИначеЕсли ТипЗнч(ЭлементВладелец) = Тип("КнопкаКоманднойПанели") Или ТипЗнч(ЭлементВладелец) = Тип("Кнопка") Тогда
			ЭлементФормы.Картинка  = мКартинкаУказательВниз;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
		
		НастройкиЭлемента.Вставить("ЦветРамки", ЭлементФормы.ЦветРамки);
		НастройкиЭлемента.Вставить("КартинкаШапки", ЭлементФормы.КартинкаШапки);

		ЭлементФормы.ЦветРамки = мЦветВыделенияЭлементовФормы;
		Попытка
			ЭлементФормы.КартинкаШапки = БиблиотекаКартинок.иид_УказательВниз;
		Исключение
		КонецПопытки;

		ИнтерактивнаяФорма.ТекущийЭлемент = ЭлементФормы;
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
		
		НастройкиЭлемента.Вставить("ЦветРамки", ЭлементФормы.ЦветРамки);
		
		ЭлементФормы.ЦветРамки = мЦветВыделенияЭлементовФормы;
		ИнтерактивнаяФорма.ТекущийЭлемент = ЭлементФормы;
		
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
		
		Если Не ЭлементВладелец = Неопределено Тогда
			
			НастройкиЭлемента.Вставить("Картинка", ЭлементФормы.Картинка);
			Если ТипЗнч(ЭлементВладелец) = Тип("ГруппаФормы") И ЭлементВладелец.Вид = ВидГруппыФормы.Подменю Тогда
				ЭлементФормы.Картинка  = БиблиотекаКартинок.иид_УказательВниз;	
			Иначе
				ЭлементФормы.Картинка  = БиблиотекаКартинок.иид_Указатель;
			КонецЕсли;
			
			ЭлементФормы.Доступность = Ложь;
			ЭлементФормы.ТолькоВоВсехДействиях = Ложь;
			ЭлементФормы.Отображение = ОтображениеКнопки.Картинка;
			ЭлементФормы.Заголовок = " ";
			
		Иначе
			
			НастройкиЭлемента.Вставить("ЦветРамки", ЭлементФормы.ЦветРамки);
			ЭлементФормы.ЦветРамки = мЦветВыделенияЭлементовФормы;
									
		КонецЕсли; 
		
		ИнтерактивнаяФорма.ТекущийЭлемент = ЭлементФормы;
		
	КонецЕсли;
	
	Возврат НастройкиЭлемента;
	
КонецФункции // НастройкиВизуальногоОформления()

&НаКлиенте
Процедура НайтиТекущийЭлементФормыВСтруктуре()
	
	ОбъектМетаданныхФорма = ТекущийОбъектМетаданных();
	ИнтерактивнаяФорма = ИнтерактивнаяФорма(ОбъектМетаданныхФорма, Истина, Ложь, Ложь);
	Если ИнтерактивнаяФорма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АктивныйЭлемент = ИнтерактивнаяФорма.ТекущийЭлемент;
	ИдентификаторСтроки = НайтиЭлементФормыВСтруктуре(СтруктураЭлементовИнтерактивнойФормы.ПолучитьЭлементы(), 
		АктивныйЭлемент.Имя, Строка(ТипЗнч(АктивныйЭлемент)));
		
	Если Не ИдентификаторСтроки = -1 Тогда
		ВыполненаПрограммнаяАктивизацияСтроки = Истина;
		Элементы.СтруктураЭлементовИнтеративнойФормы.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли; 
	
КонецПроцедуры // НайтиТекущийЭлементФормыВСтруктуре()

&НаКлиенте
Функция НайтиЭлементФормыВСтруктуре(ЭлементыИнтерактивнойФормы, ИмяЭлемента, ТипЭлемента)
	
	ИдентификаторСтроки = -1;
	
	Для Каждого ЭлементФормы Из ЭлементыИнтерактивнойФормы Цикл
		
		Если ЭлементФормы.ЭлементФормы = ИмяЭлемента И ЭлементФормы.Тип = ТипЭлемента Тогда
			Возврат ЭлементФормы.ПолучитьИдентификатор();
		КонецЕсли;
		
		ИдентификаторСтроки = НайтиЭлементФормыВСтруктуре(ЭлементФормы.ПолучитьЭлементы(), ИмяЭлемента, ТипЭлемента);
		Если Не ИдентификаторСтроки = -1 Тогда
			Возврат ИдентификаторСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции // НайтиЭлементФормыВСтруктуре()

&НаКлиенте
Функция НеОбрабатыватьСобытие()

	Возврат ВыполненаПрограммнаяАктивизацияСтроки = Истина;
	
КонецФункции

//#КонецЕсли

#КонецОбласти // Работа_с_интерактивнойФормой

&НаСервере
Процедура ПоказатьПерепискуДокумента(ФильтрыЧата = Неопределено)
	
	Если ФильтрыЧата = Неопределено Тогда
		ФильтрыЧата = ФильтрИнформационногоЧата();
	КонецЕсли; 
	
	Если ЭтоОбработка() Тогда
		ТекстHtml = РеквизитФормыВЗначение("Объект")
			.СконвертироватьТекстПерепискиВHtml(ДокументВладелец, ФильтрыЧата, Ложь);
	Иначе
		//ТекстHtml = рдс_КонвертерТекстаВHtml.СконвертироватьТекстПерепискиВHtml(ДокументВладелец, ФильтрыЧата, Ложь);
	КонецЕсли; 
	
	СконвертируемыйТекст = ТекстHtml;
    
КонецПроцедуры // ПоказатьПерепискуДокумента()

&НаСервере
Процедура ЗаполнитьСписокФайловДокумента()
	
	Если ЭтоОбработка() Тогда
		СписокФайлов = РеквизитФормыВЗначение("Объект").СписокФайловДокумента(ДокументВладелец, Истина);
	Иначе
		//СписокФайлов = рдс_КонвертерТекстаВHtml.СписокФайловДокумента(ДокументВладелец, Истина);
	КонецЕсли;
    
    Для Каждого ДанныеФайла Из СписокФайлов Цикл
        
        ДанныеФайла = ДанныеФайла.Значение;
        
        НоваяСтрока = Файлы.Добавить();
        НоваяСтрока.ИдФайла = ДанныеФайла.Ссылка.УникальныйИдентификатор();
        НоваяСтрока.Имя     = ДанныеФайла.ПолноеНаименованиеВерсии;
        НоваяСтрока.Путь    = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
        НоваяСтрока.Файл    = ДанныеФайла.Ссылка;
        
    КонецЦикла; 
    
КонецПроцедуры // ЗаполнитьСписокФайловДокумента()

&НаКлиенте
Процедура ПоказатьТекстВФорматеHtml(ТекстСообщения, СписокИконок, Расшифровки)
	
	СписокФайлов = Новый СписокЗначений(); 
	
	Для Каждого СтрокаФайла Из Файлы Цикл
		СписокФайлов.Добавить(Строка(СтрокаФайла.ИдФайла), СтрокаФайла.Путь);
	КонецЦикла;
	
	Для Каждого Иконка Из СписокИконок Цикл
		СписокФайлов.Добавить(Строка(Иконка.Значение), Иконка.Представление);
	КонецЦикла;
	
	//Если ЗначениеЗаполнено(ИмяФайлаОбработки) Тогда
		//ТекстHtml = ВнешниеОбработки.Создать(ИмяФайлаОбработки).СконвертироватьТекстВHtml(ТекстСообщения, СписокФайлов, Расшифровки);
		ТекстHtml = СконвертируемыйТекстHtml(ТекстСообщения, СписокФайлов, Расшифровки); 
	//Иначе
	//	//ТекстHtml = рдс_КонвертерТекстаВHtml.СконвертироватьТекстВHtml(ТекстСообщения, СписокФайлов, Расшифровки);
	//КонецЕсли;
	
	СконвертируемыйТекст = ТекстHtml;
	
КонецПроцедуры // ПоказатьТекстВФорматеHtml()

&НаСервере
Функция СконвертируемыйТекстHtml(ТекстСообщения, СписокФайлов, Расшифровки)
	
	МаркерБлока = "";
	
	//Если ТипСообщения = Перечисления.рдс_ТипыСообщенийЧата.ТехническоеОписание Тогда
	//	МаркерБлока = "~~ТехническоеОписание" + Символ(10);
	//ИначеЕсли ТипСообщения = Перечисления.рдс_ТипыСообщенийЧата.Инструкция Тогда
	// 	МаркерБлока = "~~Инструкция" + Символ(10);	
	//КонецЕсли;
	
	Если Истина Тогда //Метаданные.ОбщиеМодули.Найти("иид_КонвертерТекстаВHtml") = Неопределено Тогда
		
		Обработка = РеквизитФормыВЗначение("Объект");
		Возврат Обработка.СконвертироватьТекстВHtml(МаркерБлока + ТекстСообщения, СписокФайлов, Расшифровки);
			
	КонецЕсли;
 
	
//	Если ЭтоОбработка() Тогда                     
//	РеквизитФормыВЗначение("Объект") = Неопределено Тогда
//			Возврат РеквизитФормыВЗначение("Объект")
//			.СконвертироватьТекстВHtml(МаркерБлока + ТекстСообщения, СписокФайлов, Расшифровки);
			
//	Иначе
//		Возврат иид_КонвертерТекстаВHtml
//			.СконвертироватьТекстВHtml(МаркерБлока + ТекстСообщения, СписокФайлов, Расшифровки);
//	КонецЕсли; 

КонецФункции // СконвертируемыйТекстHtml()

&НаКлиенте
Процедура УстановитьРежимРаботыСРедактором(РежимРедактора, ПоказыватьКнопкуРедактора)
	
	Если ПоказыватьКнопкуРедактора Тогда
		Элементы.КнопкаКомандаРежимРедактор.Видимость = Не РежимРедактора;
		Элементы.КнопкаКомандаРежимОбзор.Видимость = РежимРедактора;
	Иначе
		Элементы.КнопкаКомандаРежимРедактор.Видимость = Ложь;
		Элементы.КнопкаКомандаРежимОбзор.Видимость = Ложь;	
	КонецЕсли; 
	
	Элементы.ПолеТекстСообщения.Видимость = РежимРедактора;
	Элементы.ПолеТекстHtml.Видимость = Не РежимРедактора;
	
	Элементы.ГруппаКнопкиРедактирования.Видимость = РежимРедактора;
	
	Если РежимРедактора Тогда
		
		Элементы.ГруппаКартинки.Видимость = мНастройкиФормы.ВидимостьПанелиКартинок;
		Элементы.ГруппаСтруктураМетаданных.Видимость = мНастройкиФормы.ВидимостьПанелиСтруктурыМетаданных;
		
	Иначе
		
		мНастройкиФормы.ВидимостьПанелиКартинок = Элементы.ГруппаКартинки.Видимость;
		мНастройкиФормы.ВидимостьПанелиСтруктурыМетаданных = Элементы.ГруппаСтруктураМетаданных.Видимость;
		
		Элементы.ГруппаКартинки.Видимость = Ложь;
		Элементы.ГруппаСтруктураМетаданных.Видимость = Ложь;
		
	КонецЕсли; 
	
	//Элементы.КнопкаФормаСохранитьСообщение.Видимость = РежимРедактора;
	
КонецПроцедуры // УстановитьРежимРаботыСРедактором()

&НаКлиенте
Процедура ДобавитьКартинкуВТекст()
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Картинка'; en = 'Image'")
	+ "(*.png)|*.png|(*.jpg)|*.jpg|(*.bmp)|*.bmp|(*.gif)|*.gif";
	
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		ИмяФайла = МассивФайлов[0];
		
	Иначе
        
        Предупреждение(НСтр("ru = 'Файл не выбран!'; en = 'File not selected!'"));
        
        Возврат;
        
	КонецЕсли;
    
    Файл = Новый Файл(ИмяФайла);
    
	НовыйИндекс = Файлы.Количество() + 1;
	НоваяСтрока = Файлы.Добавить();
	НоваяСтрока.ИдФайла = НовыйИндекс;
	НоваяСтрока.Путь = ИмяФайла;
    НоваяСтрока.Имя  = Файл.ИмяБезРасширения; 
	
	МаркерФорматирования = Новый Структура("Маркер, Представление", "ИДРис=(%%)", НовыйИндекс);
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);	

КонецПроцедуры // ДобавитьКартинкуВТекст()

#Область Инструмент_получения_картинки_из_буфера_обмена

&НаКлиенте
Функция ПолучитьСкриншотИзБуфераОбмена()

	ПутьККомпоненте = ПроверитьНаличиеClipboard();
	ФайлСкринШота = КаталогВременныхФайлов() + "IMG_" + Формат(ТекущаяДата(), "ДФ=dd_MM_yyyy_hh_mm_ss") + ".jpg";

	Попытка
		ЗапуститьПриложение(ПутьККомпоненте + " " + ФайлСкринШота, СтрЗаменить(ПутьККомпоненте, "cbtojpeg.exe", ""), Истина);
	Исключение
		Ошибка  = ОписаниеОшибки();
	КонецПопытки;	

	ФайлСкринШота = СтрЗаменить(ФайлСкринШота, "cbtojpeg.exe ",""); //Оставляем только файл картинки

	#Если ТонкийКлиент Тогда
		Если Не ПодключитьРасширениеРаботыСФайлами() тогда
			Возврат Неопределено;
		КонецЕсли;
	#КонецЕсли 

	Если НайтиФайлы(ФайлСкринШота).Количество() > 0 тогда
		
		Возврат ФайлСкринШота;		
		
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Функция ПроверитьНаличиеClipboard() Экспорт

	СписокДоступныхПутей = Новый Массив;

	#Если НЕ ВебКлиент Тогда
	СписокДоступныхПутей.Добавить(КаталогПрограммы());
	СписокДоступныхПутей.Добавить(КаталогВременныхФайлов());
	#Иначе // веб клиент
		СписокДоступныхПутей.Добавить("C:\Windows\Temp\");
	#КонецЕсли

	#Если ТонкийКлиент Тогда
		ПодключитьРасширениеРаботыСФайлами();	
	#КонецЕсли 

	Для Каждого ЭлементМассива Из СписокДоступныхПутей Цикл
		
		ПолноеИмяФайла = ЭлементМассива + "cbtojpeg.exe";
		Файл = Новый Файл(ПолноеИмяФайла);
		ПолныйПутьClipboardDll = Файл.Путь;
		
		Если Файл.Существует() ИЛИ ИзвлечьИЗаписатьБиблиотеку(ПолноеИмяФайла, Истина) Тогда
			Прервать;
		КонецЕсли;
		
		ПолноеИмяФайла = "";
		
	КонецЦикла;

	Возврат ПолноеИмяФайла;

КонецФункции

&НаКлиенте
Функция ИзвлечьИЗаписатьБиблиотеку(ИмяФайла, СообщатьОбОшибке = Ложь)

	Попытка

		Clipboard = КомпонентаЧтенияКартинкиИзБуфера();

		#Если НЕ ВебКлиент Тогда
		Clipboard.Записать(ИмяФайла);
		#Иначе // веб клиент
			
			АдресБиблиотеки = ПоместитьВоВременноеХранилище(Clipboard);
			
			Описание = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресБиблиотеки);
			
			МассивОписаний = Новый Массив;
			МассивОписаний.Добавить(Описание);
			Если ПолучитьФайлы(МассивОписаний,, "C:\", Ложь) = Ложь Тогда
				ВызватьИсключение("Не могу сохранить файл C:\cbtojpeg.exe ");
			КонецЕсли;
			
			УдалитьИзВременногоХранилища(АдресБиблиотеки);
			
		#КонецЕсли

	Исключение
		
		Если СообщатьОбОшибке Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = '" + "Ошибка при записи файла: Файл не записан.
				|Возможно у вас отсутствуют права доступа к папке. Обратитесь к администратору.'") + "
				|" + ИмяФайла + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецЕсли; 

		Возврат Ложь;

	КонецПопытки;

	Возврат Истина;

КонецФункции

&НаСервере
Функция КомпонентаЧтенияКартинкиИзБуфера()

	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("ИнструментЧтенияКартинкиИзБуфера_Cbtojpeg");

КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ДобавитьДанныеОбъектаВРедактор(СтрокаЭлементаВыборка, ВВидеТипа)
	
	ОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(СтрокаЭлементаВыборка);
	СкопироватьДанныеОбъектаМетаданныхВБуфер(ОбъектМетаданных);
	
	ПредставлениеОбъекта = МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, ВВидеТипа);
	
	МаркерФорматирования = Новый Структура("Маркер, Представление, Объект", ПредставлениеОбъекта.Текст, 
		ПредставлениеОбъекта.ВыделяемыйФрагмент, ОбъектМетаданных);
		
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры // ДобавитьДанныеОбъектаВРедактор()

&НаКлиенте
Функция МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, ВВидеТипа, Условие = "", 
	ВыводитьБлокСкрипта = Ложь)
		
	МаркированныйТекст = Новый Структура("Текст, ВыделяемыйФрагмент");
	МаркированныйТекст.ВыделяемыйФрагмент = "";
	
	Если ОбъектМетаданных.Класс = "Форма" Тогда
		
		ОбъектВладелецФормы = ОбъектМетаданных.ПолучитьРодителя().ПолучитьРодителя();
		Если Не ОбъектВладелецФормы = Неопределено Тогда
			ПредставлениеОбъетка = ОбъектВладелецФормы.Синоним;
		Иначе
			ПредставлениеОбъетка = "";
		КонецЕсли; 
		
		Если Условие = "ПереходитьТолькоНаОткрытыеФормы" Тогда
			МаркированныйТекст.Текст = "ФормаОткрыта=[" + ОбъектМетаданных.ПолноеИмя + "; %%" 
				+ ?(ВыводитьБлокСкрипта, " {Сообщить(""Это блок для скрипат"")}", "") + "]";
		Иначе
			МаркированныйТекст.Текст = "Форма=[" + ОбъектМетаданных.ПолноеИмя + "; %%" 
				+ ?(ВыводитьБлокСкрипта, " {Сообщить(""Это блок для скрипат"")}", "") + "]";
		КонецЕсли;
		
		МаркированныйТекст.ВыделяемыйФрагмент = ПредставлениеОбъетка;
		
	Иначе
		
		МаркированныйТекст.Текст = ОбъектМетаданных.ПолноеИмя;
		Если ОбъектМетаданных.Класс = "Реквизит"
			Или ОбъектМетаданных.Класс = "Измерение"
			Или ОбъектМетаданных.Класс = "Ресурс" Тогда
			
			Если ТипЗнч(ОбъектМетаданных.Тип) = Тип("Строка") Тогда
				МаркированныйТекст.Текст = МаркированныйТекст.Текст + ":{" + ОбъектМетаданных.Тип + "}"
			ИначеЕсли ТипЗнч(ОбъектМетаданных.Тип) = Тип("СписокЗначений") Тогда
				
				КоличествоТипов = ОбъектМетаданных.Тип.Количество();
				ИндексТипа = 1;
				
				МаркированныйТекст.Текст = МаркированныйТекст.Текст + ":{";
				Для Каждого Тип Из ОбъектМетаданных.Тип Цикл
					МаркированныйТекст.Текст = МаркированныйТекст.Текст + Тип.Значение 
						+ ?(КоличествоТипов = ИндексТипа, "", "; ");
					ИндексТипа = ИндексТипа + 1;
				КонецЦикла;
				
				МаркированныйТекст.Текст = МаркированныйТекст.Текст + "}";
				
			КонецЕсли;
			
		Иначе
			
			Если ВВидеТипа Тогда
				МаркированныйТекст.Текст = ":{" + МаркированныйТекст.Текст + "}"
			КонецЕсли;
			
		КонецЕсли;
		
		МаркированныйТекст.Текст = МаркированныйТекст.Текст + "%%";
		
	КонецЕсли; 
	
	Возврат МаркированныйТекст;
	
КонецФункции // МаркированноеПредставлениеОбъектаМетаданных()

&НаКлиенте
Процедура ДобавитьИнформациюОЭлементеФормыВРедактор(ИндексЭлементаФормы, Условие = "")
	
	ОбъектМетаданных = ТекущийОбъектМетаданных();
	
	ЭлементФормы = Новый Структура("Класс, ПолноеИмя, Синоним, Тип");
	ЭлементФормы.ПолноеИмя = ОбъектМетаданных.ПолноеИмя;
	
	ДанныеЭлементаФормы = СтруктураЭлементовИнтерактивнойФормы.НайтиПоИдентификатору(ИндексЭлементаФормы);
	Если ДанныеЭлементаФормы.ПолныйПутьКЭлементуФормы = Неопределено Тогда
		ПолныйПутьКЭлементуФормы = ПутьРасположенияЭлементаНаФорме(ДанныеЭлементаФормы);
	Иначе
		ПолныйПутьКЭлементуФормы = ДанныеЭлементаФормы.ПолныйПутьКЭлементуФормы;
	КонецЕсли; 
	
	Для Каждого НаименованиеЭлемента Из ПолныйПутьКЭлементуФормы Цикл
		ЭлементФормы.ПолноеИмя = ЭлементФормы.ПолноеИмя + "." + НаименованиеЭлемента;
	КонецЦикла;
	
	ЭлементФормы.Класс = "ЭлементУправленияФормы";
	ЭлементФормы.Синоним = ДанныеЭлементаФормы.Представление;
	ЭлементФормы.Тип = ДанныеЭлементаФормы.Тип;
	
	ПредставлениеОбъекта = МаркированноеПредставлениеЭлементаФормы(ЭлементФормы, Условие);
	
	МаркерФорматирования = Новый Структура("Маркер, Представление, Объект", ПредставлениеОбъекта.Текст, 
		ПредставлениеОбъекта.ВыделяемыйФрагмент, ЭлементФормы);
		
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры // ДобавитьИнформациюОЭлементеФормыВРедактор()

&НаКлиенте
Функция МаркированноеПредставлениеЭлементаФормы(ОбъектМетаданных, Условие)
	
	МаркированныйТекст = Новый Структура("Текст, ВыделяемыйФрагмент");
	
	Если Условие = "ПереходитьТолькоНаОткрытыеФормы" Тогда
		МаркированныйТекст.Текст = "ФормаОткрыта=[" + ОбъектМетаданных.ПолноеИмя + "; %%; " + ОбъектМетаданных.Тип + "]";
	Иначе
		МаркированныйТекст.Текст = "Форма=[" + ОбъектМетаданных.ПолноеИмя + "; %%; " + ОбъектМетаданных.Тип + "]";	
	КонецЕсли;
	
	МаркированныйТекст.ВыделяемыйФрагмент = ОбъектМетаданных.Синоним;
	
	Возврат МаркированныйТекст;
	
КонецФункции // МаркированноеПредставлениеЭлементаФормы()

&НаКлиенте
Процедура ДобавитьМаркерВТекст(СтруктураМаркера, ВыделятьДобавленныйТекст)
	
	МаркерТекста = СтруктураМаркера.Маркер;
	ПредставлениеМаркера = СтруктураМаркера.Представление;
	
	Если ПредставлениеМаркера = "Объект метаданных" Тогда
		ПредставлениеМаркера = ИмяОбъектаМетаданных(СтруктураМаркера.Объект);
	КонецЕсли; 
	
	ПолеТекстаСообщения = Элементы.ПолеТекстСообщения;
	
	// Определяем выделенный кусок кода
	ВыделенныйТекст = ПолеТекстаСообщения.ВыделенныйТекст;
	
	Если ПустаяСтрока(ВыделенныйТекст) Тогда
		
		// Получаем позцию курсора
		НачалоСтроки  = 0;
		НачалоКолонки = 0;
		КонецСтроки  = 0;
		КонецКолонки = 0;
		
		ПолеТекстаСообщения.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		// Добавляем новый текст
		НачалоМаркированногоТекста = Найти(МаркерТекста, "%%"); 
		ДлинаТекстаПредставления   = СтрДлина(ПредставлениеМаркера);
		
		МаркированныйТекст = СтрЗаменить(МаркерТекста, "%%", ПредставлениеМаркера);
		ТекстСообщения 	   = ТекстСообщения + МаркированныйТекст;
		
		ЭтаФорма.ТекущийЭлемент = ПолеТекстаСообщения;
		ПолеТекстаСообщения.ВыделенныйТекст = МаркированныйТекст;
		Если ВыделятьДобавленныйТекст Тогда
			
			// Выделяем текст для быстрой замены
			НачалоВыделенияТекста = НачалоКолонки + НачалоМаркированногоТекста - 1;
			ПолеТекстаСообщения.УстановитьГраницыВыделения(НачалоСтроки, НачалоВыделенияТекста, 
				КонецСтроки, НачалоВыделенияТекста + ДлинаТекстаПредставления);
				
		КонецЕсли;
			
	Иначе
		
		ТекстОбрамленныйМаркерами = СтрЗаменить(МаркерТекста, "%%", ВыделенныйТекст);
		ПолеТекстаСообщения.ВыделенныйТекст = ТекстОбрамленныйМаркерами;
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьМаркерВТекст()

&НаКлиенте
Функция ИмяОбъектаМетаданных(ОбъектМетаданных)
	
	ИмяОбъекта = ИмяКлассаОбъекта(ОбъектМетаданных);
	
	Возврат ИмяОбъекта;
	
КонецФункции // ИмяОбъектаМетаданных()

&НаСервереБезКонтекста
Функция ИмяКлассаОбъекта(ОбъектМетаданных)
	
	КлассОбъекта = ОбъектМетаданных.Тип;
	Если Не ЗначениеЗаполнено(КлассОбъекта) Тогда
		Если ЗначениеЗаполнено(ОбъектМетаданных.Родитель.Тип) Тогда
			КлассОбъекта = ОбъектМетаданных.Родитель.Тип;
		Иначе
			Возврат "." + ОбъектМетаданных.Имя;
		КонецЕсли;		
	КонецЕсли; 
	
	ИндексЗначения = Перечисления.иид_ТипыОбъектовМетаданных.Индекс(КлассОбъекта);
	ИмяКласса = Метаданные.Перечисления.иид_ТипыОбъектовМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	
	Возврат ИмяКласса + "." + ОбъектМетаданных.Имя;
	
КонецФункции // ИмяКлассаОбъекта()

&НаКлиенте
Процедура СохранитьФайлыВБазе()
    
     Если Не ЗначениеЗаполнено(ДокументВладелец) Тогда
        // Мы можем сохранять файлы с привязкой к объекту
        Возврат;
    КонецЕсли; 
    
	Для Каждого ДанныеФайла Из Файлы Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеФайла.Файл) Тогда
            
			Если Найти(ТекстСообщения, "ИДРис=(" + ДанныеФайла.ИдФайла + ")")
				Или Найти(ТекстСообщения, "ИДРис=(" + ДанныеФайла.ИдФайла + ";") Тогда
                
                // Нужно проверить наличие файла
    			ФайлСсылка = СоздатьФайлНаОсновеФайлаНаДиске(ДокументВладелец, ДанныеФайла.Путь);
                ДанныеФайла.Файл = ФайлСсылка;
                
                ЗаменитьСсылкиНаФайлВТексте(ДанныеФайла);    
                
            КонецЕсли; 
            
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // СохранитьФайлыВБазе()

// Создает карточку Файла в БД вместе с версией
// Параметры
// Владелец - владелец файла - будет установлен в реквизит ВладелецФайла у созданного файла
// ПутьКФайлуНаДиске  - Строка - полный путь (включающий имя и расширение) к файлу на диске (файл должен находиться на сервере)
//
// Возвращаемое значение:
//    СправочникСсылка.Файлы - созданный файл
//
&НаКлиенте
Функция СоздатьФайлНаОсновеФайлаНаДиске(Владелец, ПутьКФайлуНаДиске) Экспорт
	
	//Файл = Новый Файл(ПутьКФайлуНаДиске);
	//
	//ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлуНаДиске);
	//АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	//
	//АдресВременногоХранилищаТекста = "";
	//
	//ФайлСсылка = РаботаСФайлами.СоздатьФайлСВерсией(
	//	Владелец,
	//	Файл.ИмяБезРасширения,
	//	Файл.Расширение,
	//	Файл.ПолучитьВремяИзменения(),
	//	Файл.ПолучитьУниверсальноеВремяИзменения(),
	//	Файл.Размер(),
	//	АдресВременногоХранилищаФайла,
	//	АдресВременногоХранилищаТекста,
	//	Ложь);
	//	
	//Возврат ФайлСсылка;
	
КонецФункции

&НаКлиенте
Процедура ЗаменитьСсылкиНаФайлВТексте(ДанныеФайла)	
    
    ИдФайла = Строка(ДанныеФайла.Файл.УникальныйИдентификатор());
    ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИДРис=(" + ДанныеФайла.ИдФайла, "ИДРис=(" + ИдФайла);
    ДанныеФайла.ИдФайла = ИдФайла;

КонецПроцедуры // ЗаменитьСсылкиНаФайлВТексте()

// Сохранения данных в файл

&НаКлиенте
Процедура СохранитьТекстВФайлHtml()
	
	// Настраиваем фильтр для диалога
	Фильтр = НСтр("ru = 'Файл html'; en = 'Fail html'") + "(*.html)|*.html";
	ДанныеФайла = ДанныеФайлаДляСохранения(Фильтр, Истина);
	
	Если ДанныеФайла = Неопределено Тогда
		
		Сообщить("Файл для сохранения не выбран");
	    Возврат;
		
	КонецЕсли; 
	
	// Сохраняем текст в html
	ЗаписатьТекстВФайлHtml(ДанныеФайла);
    
КонецПроцедуры // СохранитьТекстВФайлHtml()

&НаКлиенте
Процедура СохранитьТекстВФайлPdf()
	
	// Настраиваем фильтр для диалога
	Фильтр = НСтр("ru = 'Файл pdf'; en = 'Fail pdf'") + "(*.pdf)|*.pdf";
	ДанныеФайла = ДанныеФайлаДляСохранения(Фильтр, Истина);
	
	Если ДанныеФайла = Неопределено Тогда
		
		Сообщить("Файл для сохранения не выбран");
	    Возврат;
		
	КонецЕсли; 
	
	ИмяФайлаPdf = ДанныеФайла.ИмяФайла;
	
	РабочийКаталог = КаталогВременныхФайлов() + "sourceConvertToPdf";
	СоздатьКаталог(РабочийКаталог);
	ДанныеФайла.КаталогХраненияКартинок = РабочийКаталог + "\Images";
	
	ДанныеФайла.ИмяФайла = РабочийКаталог + "\sourceConvertToPdf.html";
	
	// Сохраняем текст в html
	ЗаписатьТекстВФайлHtml(ДанныеФайла);
	
	// Конвертируем файл в pdf
	Команда = """C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe"" """ + ДанныеФайла.ИмяФайла + """ """ + ИмяФайлаPdf + """";
	
	ЗапуститьПриложение(Команда,, Истина);
	
	// Удаляем файлы html
	УдалитьФайлы(РабочийКаталог);
	
КонецПроцедуры // СохранитьТекстВФайлPdf()

&НаКлиенте
Процедура СохранитьТекстВФайлTxt()
	
	// Настраиваем фильтр для диалога
	Фильтр = НСтр("ru = 'Файл txt'; en = 'Fail txt'") + "(*.txt)|*.txt";
	ДанныеФайла = ДанныеФайлаДляСохранения(Фильтр, Ложь);
	
	Если ДанныеФайла = Неопределено Тогда
		
		Сообщить("Файл для сохранения не выбран");
	    Возврат;
		
	КонецЕсли;
	
	ЗаписатьТекстВФайлTxt(ДанныеФайла);
	
КонецПроцедуры // СохранитьТекстВФайлTxt()

&НаКлиенте
Функция ДанныеФайлаДляСохранения(Фильтр, СоздаватьКаталогФалов)

	ДанныеФайла = Новый Структура("ИмяФайла, Расширение, ТекстФайла, КаталогФайла, КаталогХраненияКартинок"); 
	
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогСохраненияФайла.Фильтр = Фильтр;
	ДиалогСохраненияФайла.Заголовок = "Укажите имя файла для сохранения";
	
	Если ДиалогСохраненияФайла.Выбрать() Тогда
		
		ДанныеФайла.ИмяФайла = ДиалогСохраненияФайла.ПолноеИмяФайла;
		ДанныеФайла.КаталогФайла = ДиалогСохраненияФайла.Каталог;
		Если СоздаватьКаталогФалов Тогда
			ДанныеФайла.КаталогХраненияКартинок = ДиалогСохраненияФайла.Каталог + "Images\";	
		Иначе
			ДанныеФайла.КаталогХраненияКартинок = ДиалогСохраненияФайла.Каталог;
		КонецЕсли; 
		
		
		Возврат ДанныеФайла;
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ДанныеФайлаДляСохранения()

&НаКлиенте
Процедура ЗаписатьТекстВФайлHtml(ДанныеФайла)	
	
	Если Файлы.Количество() Тогда
		СоздатьКаталог(ДанныеФайла.КаталогХраненияКартинок);    
	КонецЕсли; 
	
	ДанныеФайла.ТекстФайла = ТекстHtmlДляСохранения(ДанныеФайла);
	
	ФайлHtml = Новый ТекстовыйДокумент();
	ФайлHtml.УстановитьТекст(ДанныеФайла.ТекстФайла);
	ФайлHtml.Записать(ДанныеФайла.ИмяФайла);
	
КонецПроцедуры // ЗаписатьТекстВФайлHtml()

&НаКлиенте
Функция ТекстHtmlДляСохранения(ДанныеФайла)
	
	СписокФайлов = ФайлыВложенияСохраненныеНаДиске(ДанныеФайла);
	
	Если ЗначениеЗаполнено(ИмяФайлаОбработки) Тогда
		СконвертируемыйТекст = ВнешниеОбработки.Создать(ИмяФайлаОбработки).СконвертироватьТекстВHtml(ТекстСообщения, СписокФайлов, Неопределено);
	Иначе
		//СконвертируемыйТекст = рдс_КонвертерТекстаВHtml.СконвертироватьТекстВHtml(ТекстСообщения, СписокФайлов, Неопределено);
	КонецЕсли;
	
	Возврат СконвертируемыйТекст;

КонецФункции // ТекстHtmlДляСохранения()

&НаКлиенте
Процедура ЗаписатьТекстВФайлTxt(ДанныеФайла)
	
	Если Файлы.Количество() Тогда
		СоздатьКаталог(ДанныеФайла.КаталогХраненияКартинок);    
	КонецЕсли; 
	
	ФайлыВложенияСохраненныеНаДиске(ДанныеФайла);
	ДанныеФайла.ТекстФайла = ТекстСообщения;
	
	ФайлHtml = Новый ТекстовыйДокумент();
	ФайлHtml.УстановитьТекст(ДанныеФайла.ТекстФайла);
	ФайлHtml.Записать(ДанныеФайла.ИмяФайла);
	
КонецПроцедуры // ЗаписатьТекстВФайлTxt()

&НаКлиенте
Функция ФайлыВложенияСохраненныеНаДиске(ДанныеФайла)
	
	СписокФайлов = Новый СписокЗначений(); 
	
	Для Каждого СтрокаФайла Из Файлы Цикл
		
		ФайлИсточник = Новый Файл(СтрокаФайла.Путь);
		Если ФайлИсточник.Существует() Тогда
			
			ИмяФайлаПриемника = ДанныеФайла.КаталогХраненияКартинок + СтрокаФайла.ИдФайла + ФайлИсточник.Расширение; 
			КопироватьФайл(СтрокаФайла.Путь, ИмяФайлаПриемника);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаФайла.Файл) Тогда
			
			// Необходимо файл сохранить из базы
			АдресФайлаВБазе = СтрокаФайла.Путь;
			ИмяФайла = СтрокаФайла.ИдФайла + "." + СтрокаФайла.Файл.ТекущаяВерсияРасширение;
			
			ПередаваемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресФайлаВБазе);
			ПередаваемыеФайлы.Добавить(Описание);
			
			ИмяФайлаПриемника = ДанныеФайла.КаталогХраненияКартинок + ИмяФайла;
			
			// Сохраним Файл из БД на диск
			Если ПолучитьФайлы(ПередаваемыеФайлы,, ДанныеФайла.КаталогХраненияКартинок, Ложь) Тогда
				Состояние(НСтр("ru = 'Файл успешно сохранен'"),, ИмяФайлаПриемника);
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЕсли; 
		
		СписокФайлов.Добавить(Строка(СтрокаФайла.ИдФайла), ИмяФайлаПриемника);
		
	КонецЦикла; 	

	Возврат СписокФайлов;
	
КонецФункции // ФайлыВложенияСохраненныеНаДиске()

&НаКлиенте
Процедура ЗагрузитьФайлTxt()
	
	// Настраиваем фильтр для диалога
	Фильтр = НСтр("ru = 'Файл txt'; en = 'Fail txt'") + "(*.txt)|*.txt";
	//ДанныеФайла = ДанныеФайлаДляСохранения(Фильтр, Ложь);
	
	//Если ДанныеФайла = Неопределено Тогда
	//	
	//	Сообщить("Файл для сохранения не выбран");
	//	Возврат;
	//	
	//КонецЕсли;

	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогЗагрузкиФайла = Новый ДиалогВыбораФайла(Режим);
	
	ДиалогЗагрузкиФайла.Фильтр = Фильтр;
	ДиалогЗагрузкиФайла.Заголовок = "Укажите имя файла для загрузки";
	
	Если ДиалогЗагрузкиФайла.Выбрать() Тогда
		ЗагрузитьСодержаниеИзФайлаTxt(ДиалогЗагрузкиФайла.ПолноеИмяФайла, ДиалогЗагрузкиФайла.Каталог);	
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьФайлTxt()

&НаКлиенте
Процедура ЗагрузитьСодержаниеИзФайлаTxt(ИмяФайла, Каталог)
	
	ТекстовыйДок = Новый ТекстовыйДокумент(); 
	ТекстовыйДок.Прочитать(ИмяФайла);
	ТекстСообщения = ТекстовыйДок.ПолучитьТекст();
	
	Файлы.Очистить();
	
	ФайлыКаталога = НайтиФайлы(Каталог, "*.*");
	Для Каждого ФайлВложения Из ФайлыКаталога Цикл
	Если ФайлВложения.Расширение = ".png" Или ФайлВложения.Расширение = ".jpg"
		Или ФайлВложения.Расширение = ".bmp" Или ФайлВложения.Расширение = ".gif" Тогда
			НоваяСтрока = Файлы.Добавить();
			НоваяСтрока.ИдФайла = ФайлВложения.ИмяБезРасширения;
			НоваяСтрока.Путь = ФайлВложения.ПолноеИмя;
			НоваяСтрока.Имя  = ФайлВложения.ИмяБезРасширения;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьСодержаниеИзФайлаTxt()

&НаКлиенте
Процедура НастроитьРежимРаботыСЭлементамиФормы(РежимПоискаЭлементаНаФорме)
	
	Если РежимПоискаЭлементаНаФорме Тогда
		
		ПоказатьЭлементНаФорме = Не ПоказатьЭлементНаФорме;
		Элементы.ВключитьПоискЭлементаНаФорме.Пометка = ПоказатьЭлементНаФорме;
		
		Если ПоказатьЭлементНаФорме Тогда
			Элементы.ВключитьПоискЭлементаФормыВСтруктуре.Пометка = Ложь;
			ОтключитьОбработчикОжидания("НайтиТекущийЭлементФормыВСтруктуре");
		КонецЕсли; 
		
	Иначе
		
		Элементы.ВключитьПоискЭлементаФормыВСтруктуре.Пометка = Не Элементы.ВключитьПоискЭлементаФормыВСтруктуре.Пометка;
		Если Элементы.ВключитьПоискЭлементаФормыВСтруктуре.Пометка Тогда
			Элементы.ВключитьПоискЭлементаНаФорме.Пометка = Ложь;
			ПодключитьОбработчикОжидания("НайтиТекущийЭлементФормыВСтруктуре", 1);
		Иначе
			ОтключитьОбработчикОжидания("НайтиТекущийЭлементФормыВСтруктуре");
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // НастроитьРежимРаботыСЭлементамиФормы()

&НаКлиенте
Процедура ОбработатьРасшифровкуСообщения(ИдРасшифровки)
	
	СтрокаРасшифровки = мРасшифровкиСсылок.Найти(Число(ИдРасшифровки), "НомерСтроки");
	
	Если СтрокаРасшифровки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Расшифровка = СтрокаРасшифровки.Расшифровка;
	ПараметрыРасшифровки = СтрокаРасшифровки.Параметры;
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") Тогда
		
		Если Расшифровка = "ПоказатьСправку" Тогда
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ОткрытьСправку(ПараметрыРасшифровки);
			#КонецЕсли
			
		ИначеЕсли Расшифровка = "ОткрытьФормуСписка" Тогда
			
			Выполнить ПараметрыРасшифровки + ".ПолучитьФормуСписка().Открыть();";
			
		ИначеЕсли Расшифровка = "ОткрытьФорму" Тогда
			
			ОткрытьИнтерактивнуюФорму(ПараметрыРасшифровки);
			
		Иначе
			
			Выполнить Расшифровка + "(ПараметрыРасшифровки);";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Форма") Тогда
		
		Расшифровка.Открыть();
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("ПеречислениеСсылка.ДействияРасшифровкиИнтерактивногоСообщения") Тогда
		
		Если Расшифровка = Перечисления.ДействияРасшифровкиИнтерактивногоСообщения.ОткрытьОтчет Тогда
			
			Если Не Метаданные.Отчеты.Найти(ПараметрыРасшифровки) = Неопределено Тогда
				ФормаОтчета = Отчеты[ПараметрыРасшифровки].ПолучитьФорму();
				ФормаОтчета.Открыть();
			КонецЕсли;
			
		ИначеЕсли Расшифровка = Перечисления.ДействияРасшифровкиИнтерактивногоСообщения.ПоказатьРеквизитНаФорме Тогда
			
#Если ТолстыйКлиентОбычноеПриложение Тогда
	
			Попытка
				ДействиеПоказатьРеквизитНаФорме(ПараметрыРасшифровки);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
#КонецЕсли

		ИначеЕсли Расшифровка = Перечисления.ДействияРасшифровкиИнтерактивногоСообщения.АктивизироватьСтрокуТабличногоПоля Тогда
			
			Попытка
				ДействиеАктивизироватьСтрокуТабличногоПоляФормы(ПараметрыРасшифровки);		
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		
		КонецЕсли;
		
	Иначе
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ОткрытьЗначение(Расшифровка);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРасшифровкуСообщения()

&НаКлиенте
Процедура ДействиеАктивизироватьСтрокуТабличногоПоляФормы(ПараметрыРасшифровки)
	
	// ПараметрыРасшифровки[0] - Объект форма которого будет открываться
	// ПараметрыРасшифровки[1] - Имя элемента формы
	// ПараметрыРасшифровки[2] - Имя формы
	// ПараметрыРасшифровки[3] - Номер строки
	
	ФормаОбъекта = ДействиеПоказатьРеквизитНаФорме(ПараметрыРасшифровки, Ложь);
	ТекущееТабличноеПоле = ФормаОбъекта.ТекущийЭлемент;
	
	Если Не ТипЗнч(ТекущееТабличноеПоле) = Тип("ТабличноеПоле") Тогда
	    Возврат;
	КонецЕсли; 
	
	ДанныеТабличногоПоля = ФормаОбъекта.ЭтотОбъект[ТекущееТабличноеПоле.Данные];
	
	НайденнаяСтрока = ДанныеТабличногоПоля.Найти(ПараметрыРасшифровки.НомерСтроки, "НомерСтроки");
	Если НайденнаяСтрока = Неопределено Тогда
	    Возврат;
	КонецЕсли; 
	
	ФормаОбъекта.ЭлементыФормы.Товары.ТекущаяСтрока = НайденнаяСтрока;
	ФормаОбъекта.Открыть();
	
КонецПроцедуры // ДействиеАктивизироватьСтрокуТабличногоПоляФормы()

&НаКлиенте
Функция ДействиеПоказатьРеквизитНаФорме(ПараметрыРасшифровки, ОткрытьФорму = Истина)
	
	// ПараметрыРасшифровки[0] - Объект форма которого будет открываться
	// ПараметрыРасшифровки[1] - Имя элемента формы
	// ПараметрыРасшифровки[2] - Имя формы
	
	ОбъектФормы 	 = ПараметрыРасшифровки.Объект;
	ИмяЭлементаФормы = ПараметрыРасшифровки.ИмяЭлементаФормы;
	СтруктураЭлементов = РазложитьСтруктуруЭлементов(ИмяЭлементаФормы);
	
	ИмяФормыОбъекта = "";
	Если ПараметрыРасшифровки.Свойство("ИмяФормы", ИмяФормыОбъекта) Тогда
		
		Если ЗначениеЗаполнено(ИмяФормыОбъекта) Тогда
			ФормаРасшифровка = ОбъектФормы.ПолучитьФорму(ИмяФормыОбъекта);    
		Иначе
			ФормаРасшифровка = ОбъектФормы.ПолучитьФорму();	
		КонецЕсли; 
		
	Иначе
		ФормаРасшифровка = ОбъектФормы.ПолучитьФорму();
	КонецЕсли; 
	
	Если ОткрытьФорму Тогда
		ФормаРасшифровка.Открыть();    
	КонецЕсли; 
	
	Если ТипЗнч(ФормаРасшифровка) = Тип("УправляемаяФорма") Тогда
		ЭлементФормыРасшифровка = ФормаРасшифровка.Элементы.Найти(СтруктураЭлементов.Элемент);
	Иначе
		ЭлементФормыРасшифровка = ФормаРасшифровка.ЭлементыФормы.Найти(СтруктураЭлементов.Элемент);
	КонецЕсли; 
	
	Если ЭлементФормыРасшифровка = Неопределено Тогда
		//Если РежимРазработки Тогда
		//	Сообщить("На форме объекта " + ОбъектФормы.Метаданные().Имя + " элемент формы с именем - " + ИмяЭлементаФормы
		//	+ " не найден.");			
		//КонецЕсли; 	
	Иначе
		ФормаРасшифровка.ТекущийЭлемент = ЭлементФормыРасшифровка;	    
	КонецЕсли; 
	
	Если СтруктураЭлементов.Свойство("ПодчиненныйЭлемент") Тогда
		Если ТипЗнч(ФормаРасшифровка.ТекущийЭлемент) = Тип("ТабличноеПоле") Тогда
			ТекущаяКолонка = ФормаРасшифровка.ТекущийЭлемент.Колонки.Найти(СтруктураЭлементов.ПодчиненныйЭлемент);
			Если ТекущаяКолонка = Неопределено Тогда
				
				//Если РежимРазработки Тогда
				//	Сообщить("На форме объекта " + ОбъектФормы.Метаданные().Имя + " элемент формы с именем - " + ИмяЭлементаФормы
				//	+ " не найден.");			
				//КонецЕсли; 	
				
			Иначе
				ФормаРасшифровка.ТекущийЭлемент.ТекущаяКолонка = ТекущаяКолонка;
			КонецЕсли; 			
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ФормаРасшифровка;
	
КонецФункции // ДействиеПоказатьРеквизитНаФорме()

&НаКлиенте
Функция РазложитьСтруктуруЭлементов(ИмяЭлемента)
	
	СтруктураЭлементов = Новый Структура("Элемент");
	
	Разделитель = Найти(ИмяЭлемента, ".");
	Если Разделитель = 0 Тогда
	    СтруктураЭлементов.Элемент = ИмяЭлемента;
	Иначе
		СтруктураЭлементов.Элемент = Лев(ИмяЭлемента, Разделитель - 1);
		СтруктураЭлементов.Вставить("ПодчиненныйЭлемент", Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - Разделитель));
	КонецЕсли; 
	
	Возврат СтруктураЭлементов;
	
КонецФункции // РазложитьСтруктуруЭлементов()

&НаКлиенте
Процедура ОткрытьИнтерактивнуюФорму(ДанныеФормы)
	
	ОбъектМетаданныхФорма = Новый Структура("Класс, ПолноеИмя, Форма");
	ОбъектМетаданныхФорма.Класс = "Форма";
	ОбъектМетаданныхФорма.ПолноеИмя = ДанныеФормы.ПолноеИмяФормы;
	ОбъектМетаданныхФорма.Форма = ДанныеФормы;
	
	ИнтерактивнаяФорма = ИнтерактивнаяФорма(ОбъектМетаданныхФорма, Истина,, Истина);
	Если (ИнтерактивнаяФорма = Неопределено) Тогда
		Сообщить("Неудалось открыть интерактивную форму");
		Возврат;
	КонецЕсли;
	
	ВыделитьЭлементИнтерактивнойФормы(ИнтерактивнаяФорма, ДанныеФормы.ПутьРасположенияЭлементаНаФорме);
	
	Если ДанныеФормы.Свойство("ТекстСкрипта") Тогда
	
		Попытка
			ИнтерактивнаяФорма.иид_ВыполнитьСкрипт(ДанныеФормы.ТекстСкрипта);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // КнопкаОткрытьНовуюИнтерактивнуюФорму()

&НаКлиентеНаСервереБезКонтекста
Функция СтрЛевДоСимвола(Строка, Разделитель, Остаток = Неопределено)
	Позиция = Найти(Строка, Разделитель);
	Если Позиция = 0 Тогда
		СтрокаДоТочки = Строка;
		Остаток = "";
	Иначе
		СтрокаДоТочки = Лев(Строка, Позиция - 1);
		Остаток = Сред(Строка, Позиция + СтрДлина(Разделитель));
	КонецЕсли;
	Возврат СтрокаДоТочки;
КонецФункции

&НаКлиенте
Процедура ПоказатьСодержаниеСтатьиСправки(СсылкаНаСправку) Экспорт

	ДанныеСправки = ДанныеСтатьиИнформационнойСправки(СсылкаНаСправку);
	ПоказатьТекстВФорматеHtml(ДанныеСправки.ТекстСправки, мСписокИконок, Неопределено);

КонецПроцедуры

// Возвращаемое значение:
// 	Структура - содержит данные спрвки
//		* ТекстСправки - Строка - текст интерактивной спрвки
//		* Картинки - СписокЗначений - картинки отображаемые в справке
&НаКлиенте
Функция ДанныеСтатьиИнформационнойСправки(СсылкаНаСправку)
	
	ВебСервис = ПодключениеКВебСервесу();
	ДанныеСправки = СериализаторXDTO.ПрочитатьXDTO(ВебСервис.GetDateInteractiveHelp(СсылкаНаСправку));
	СохранитьКартинкиСтатьиСправки(ДанныеСправки);
	
	Возврат ДанныеСправки;
	
КонецФункции // ДанныеСтатьиИнформационнойСправки()

&НаКлиенте
Функция ПодключениеКВебСервесу()
	
	URLПространстваИменСервиса = "http://www.Rds.ru/InteractiveHelp";
	ИмяПользователя = "user_InteractivHelp";
	Пароль = "123";
	//МестоположениеWSDL = "http://itil.st.ru/rds_itil/ws/InteractiveHelp.1cws?wsdl";
	МестоположениеWSDL = Константы.иид_АдресСервисаИнтерактивнойСправки.Получить() + "/ws/InteractiveHelp.1cws?wsdl";
	ИмяСервиса = "InteractiveHelp";
	ИмяТочкиПодключения = "InteractiveHelpSoap";
	
	// Создаем подключение
	WSОпределение = Новый WSОпределения(МестоположениеWSDL, ИмяПользователя, Пароль);
	WSПрокси = Новый WSПрокси(WSОпределение, URLПространстваИменСервиса, ИмяСервиса, ИмяТочкиПодключения);
	WSПрокси.Пользователь = ИмяПользователя;
	WSПрокси.Пароль = Пароль;
	
	Возврат WSПрокси;

КонецФункции // ПодключениеКВебСервесу()

&НаКлиенте
Процедура СохранитьКартинкиСтатьиСправки(ДанныеСправки)
	
	КаталогФайловСправки = КаталогВременныхФайлов();
	
	Если ДанныеСправки.Картинки.Количество() Тогда
		
		Для Каждого ДанныеКартинки Из ДанныеСправки.Картинки Цикл
			
			ИмяФайла = КаталогФайловСправки + ДанныеКартинки.Представление + ".tmp";
			ДанныеКартинки.Значение.Записать(ИмяФайла);
			
			НоваяСтрока = Файлы.Добавить();
			НоваяСтрока.ИдФайла = ДанныеКартинки.Представление;
			НоваяСтрока.Имя     = ДанныеКартинки.Представление;
			НоваяСтрока.Путь    = ИмяФайла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьКартинкиСтатьиСправки()

&НаКлиенте
Процедура ОткрытьУдаленныйФайл(СсылкаНаФайл)
	
	ИдентификаторФайла = СтрЗаменить(СсылкаНаФайл, "#ФайлДокументооборот=", "");

	ПолноеИмяФайла = СохранитьФайлВоВременнойПапке(ИдентификаторФайла);
	ЗапуститьПриложениеПоИмениФайла(ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьФайлВоВременнойПапке(ИдентификаторФайла)
	
	МестоположениеWSDL = Константы.иид_АдресВебСервиса1СДокументооборот.Получить() + "/ws/Files?wsdl";
	ИмяПользователя = "interactive_help";
	Пароль = "interactive_help4321";
	
	Определение = Новый WSОпределения(
		МестоположениеWSDL, 
		ИмяПользователя,
		Пароль);
	
	Прокси = Новый WSПрокси(
		Определение,
		"http://www.1c.ru/docmng",
		"Files",
		"FilesSoap");
		
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	ДанныеФайла = Прокси.GetFile(ИдентификаторФайла);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ДанныеФайла.Extension);
	ДанныеФайла.BinaryData.Записать(ИмяВременногоФайла);
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПриложениеПоИмениФайла(ИмяОткрываемогоФайла) Экспорт     
	
	Если Не ЗначениеЗаполнено(ИмяОткрываемогоФайла) Тогда
		Возврат;
	КонецЕсли;      
	
	СистемнаяИнфо = Новый СистемнаяИнформация;

	Если (СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86
			Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда

			// Проверить, является ли файл шаблоном.
		ИмяФайлаИнфо = РазложитьПолноеИмяФайла(ИмяОткрываемогоФайла);
		Расширение = ИмяФайлаИнфо.Расширение;

		ФайлыРасширениеШаблонов = "dot dotx pot potx xlt xltx ott stw ots stc otp sti";

		Если РасширениеФайлаВСписке(ФайлыРасширениеШаблонов, Расширение) Тогда
			Shell = Новый COMОбъект("Shell.Application");
			Shell.ShellExecute(ИмяОткрываемогоФайла, "", "", "open", 1);

			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ЗапуститьПриложение(ИмяОткрываемогоФайла);
	
КонецПроцедуры // ЗапуститьПриложениеПоИмениФайла

// Возвращает структуру
// Результат (Структура)
// - Каталог (Строка) - без последнего слеша
// - ИмяФайла (Строка) - имя файла с расширением
// - Имя (Строка)
// - Расширение (Строка) - без точки
//
// Параметры:
// - ПолноеИмяФайла (Строка)
//
&НаКлиенте
Функция РазложитьПолноеИмяФайла(ПолноеИмяФайла) Экспорт
	
	ИмяФайла = ПолноеИмяФайла;
	Каталог = "";
	
	Пока Истина Цикл
		Поз = Макс(Найти(ИмяФайла, "\"), Найти(ИмяФайла, "/"));
		Если Поз = 0 Тогда
			Прервать;
		КонецЕсли;
		Каталог = Каталог + Лев(ИмяФайла, Поз);
		ИмяФайла = Сред(ИмяФайла, Поз+1);
	КонецЦикла;
	ПоследнийСимволКаталога = Прав(Каталог, 1);
	Если (ПоследнийСимволКаталога = "\") Или (ПоследнийСимволКаталога = "/") Тогда
		Каталог = Лев(Каталог, СтрДлина(Каталог) - 1);
	КонецЕсли;
	
	ИмяФайлаИнфо = РазложитьИмяФайла(ИмяФайла);
	ИмяФайлаИнфо.Вставить("ИмяФайла", ИмяФайла);
	ИмяФайлаИнфо.Вставить("Каталог", Каталог);
	
	Возврат ИмяФайлаИнфо;
	
КонецФункции

// Возвращает структуру
// Результат (Структура)
// - Имя (Строка)
// - Расширение (Строка)
//
// Параметры:
// - ИмяФайла (Строка)
//
&НаКлиенте
Функция РазложитьИмяФайла(ИмяФайла) Экспорт
	
	Расширение = ИмяФайла;
	Поз = Найти(Расширение, ".");
	Если Поз = 0 Тогда
		Возврат Новый Структура("Имя, Расширение", СокрЛП(ИмяФайла), "");
	КонецЕсли;
	Пока Поз > 0 Цикл
		Расширение = Сред(Расширение, Поз + 1);
		Поз = Найти(Расширение, ".");
	КонецЦикла;
	Имя = Лев(ИмяФайла, СтрДлина(ИмяФайла) - СтрДлина(Расширение) - 1);
	Возврат Новый Структура("Имя, Расширение", СокрЛП(Имя), СокрЛП(Расширение));
	
КонецФункции

// Возвращает Истина, если файл с таким расширением находится в списке расширений
&НаКлиенте
Функция РасширениеФайлаВСписке(СписокРасширений, РасширениеФайла) Экспорт
	
	РасширениеФайлаБезТочки = РасширениеФайла;
	
	Если Лев(РасширениеФайлаБезТочки, 1) = "." Тогда
		РасширениеФайлаБезТочки = Сред(РасширениеФайлаБезТочки, 2);
	КонецЕсли;
	
	Расширение = НРег(РасширениеФайлаБезТочки);
	СписокРасширенийНижнийРегистр = НРег(СписокРасширений);
	
	МассивРасширений = РазложитьСтрокуВМассивПодстрок(
		СписокРасширенийНижнийРегистр, " ");
	
	Если МассивРасширений.Найти(Расширение) <> Неопределено Тогда // Нашли в массиве
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые
//  строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
// Примечание:
//  В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
//  рекомендуется использовать функцию платформы СтрРазделить.
&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

#Область Код_тестирования

&НаКлиенте
Процедура КомандаСоздатьФайл(Команда)
  
	СохранитьФайлыВБазе()	
    
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучитьДанныеДокумента(Команда)
    
    УстановитьРежимРаботыСРедактором(Ложь, Истина);
    ПоказатьПерепискуДокумента();
    ЗаполнитьСписокФайловДокумента();
    
КонецПроцедуры

&НаКлиенте
Процедура КонвертироватьФайлHtmlВPdf(ИмяФайла, РабочийКаталог)	
	
	ФайлHtml = Новый Файл(ИмяФайла);
	
	КоманднаяСтрока = """""%ProgramFiles(x86)%\wkhtmltopdf\bin\wkhtmltopdf.exe"""""
		+ " " + ФайлHtml.ПолноеИмя 
		+ " " + ФайлHtml.Путь + ФайлHtml.ИмяБезРасширения + ".pdf";

	КомандаСистемы(КоманднаяСтрока);
	
КонецПроцедуры // КонвертироватьФайлHtmlВPdf()

&НаСервере
Функция ЭтоОбработка()
	
	Если ТипЗнч(Объект) = Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Обработка = РеквизитФормыВЗначение("Объект");
//	Если Найти(ТипЗнч(Обработка), "Обработка") Тогда
//		Возврат Истина;
//	КонецЕсли; 
	
	Попытка
		ИмяФайлаОбработки = Обработка.ИспользуемоеИмяФайла;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ЭтоОбработка()

&НаСервере
Функция ФильтрИнформационногоЧата()
	
	ФильтрыЧата = Новый СписокЗначений(); 
	
		ФильтрыЧата.Добавить(Перечисления.рдс_ТипыСообщенийЧата.Комментарий);
	
		ФильтрыЧата.Добавить(Перечисления.рдс_ТипыСообщенийЧата.ТехническоеОписание);
	
		ФильтрыЧата.Добавить(Перечисления.рдс_ТипыСообщенийЧата.СообщениеПользователю);
	
		ФильтрыЧата.Добавить(Перечисления.рдс_ТипыСообщенийЧата.СписокЗадач);
	
		//ФильтрыЧата.Добавить(Перечисления.рдс_ТипыСообщенийЧата.ХронологияСобытий);
	
	Возврат ФильтрыЧата;
	
КонецФункции // ФильтрИнформационногоЧата()


&НаСервере
Процедура КомандаПроверитьОрфографиюНаСервере()

	РеквизитФормыВЗначение("Объект").YandexSpeller(ТекстСообщения);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаПроверитьОрфографию(Команда)
	КомандаПроверитьОрфографиюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьСтруктуру(Команда)
	
	//Структура = ДанныеФормыВЗначение(СтруктураМетаданных, Тип("ДеревоЗначений"));
	//
	//Запись = Новый ЗаписьJSON;
	//ПараметрыЗ = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	//Запись.ОткрытьФайл("D:\Temp\cache\strucrura",,, ПараметрыЗ);
	//
	//СериализаторXDTO.ЗаписатьJSON(Запись, Структура, НазначениеТипаXML.Явное);
	//
	//Запись.Закрыть();

	////СтруктураМетаданных.ПолучитьЭлементы().Очистить();
	
	СохранитьСтруктуруМетаданныхВКэш()
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВосстановить(Команда)
	
	//ЧтениеJ = Новый ЧтениеJSON();
	//ЧтениеJ.ОткрытьФайл("D:\Temp\cache\strucrura");
	//
	//Дерево2 = СериализаторXDTO.ПрочитатьJSON(ЧтениеJ);
	//
	////ЗначениеВДанныеФормы(Дерево2, СтруктураМетаданных);
	
	ВосстановитьСтруктуруМетаданныхИзКэша();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСсылкуНаОткрытуюФорму(Команда)
	
	ОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(Элементы.СтруктураМетаданных.ТекущаяСтрока);
	СкопироватьДанныеОбъектаМетаданныхВБуфер(ОбъектМетаданных);
	
	ПредставлениеОбъекта = МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, 
		Ложь, "ПереходитьТолькоНаОткрытыеФормы");
	
	МаркерФорматирования = Новый Структура("Маркер, Представление, Объект", ПредставлениеОбъекта.Текст, 
		ПредставлениеОбъекта.ВыделяемыйФрагмент, ОбъектМетаданных);
		
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСсылкуНаЭлементОткрытойФормы(Команда)

	ДобавитьИнформациюОЭлементеФормыВРедактор(
		Элементы.СтруктураЭлементовИнтеративнойФормы.ТекущаяСтрока, "ПереходитьТолькоНаОткрытыеФормы");	

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьИнтерактивнуюФормуСоСкриптом(Команда)
	
	ОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(Элементы.СтруктураМетаданных.ТекущаяСтрока);
	СкопироватьДанныеОбъектаМетаданныхВБуфер(ОбъектМетаданных);
	
	ПредставлениеОбъекта = МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, 
		Ложь,, Истина);
	
	МаркерФорматирования = Новый Структура("Маркер, Представление, Объект", ПредставлениеОбъекта.Текст, 
		ПредставлениеОбъекта.ВыделяемыйФрагмент, ОбъектМетаданных);
		
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
		
КонецПроцедуры

#КонецОбласти // Код_тестирования

&НаКлиенте
Процедура КомандаДобавитьНовыйОбъект(Команда)
	
	ДобавитьНовыйОбъектВМенеджерОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактораОбъекта(ПараметрыФормы)
	
	//Помещаем обработку во временном хранилище
    АдресХранилища = "";
    Результат = ПоместитьФайл(АдресХранилища, 
    	"G:\WorkSpace_edt_test\ИИД_Подсистема_Расширение\bin\иид_РедакторИнтерактивнойСправки.epf", , Ложь);           
    ИмяОбработки = ПодключитьВнешнююОбработку(АдресХранилища);
    
    // Откроем форму подключенной внешней обработки
    ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма.РедакторОбъектов", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработку(АдресХранилища)

    Возврат ВнешниеОбработки.Подключить(АдресХранилища);

КонецФункции  

&НаКлиенте
Процедура ДобавитьНовыйОбъектВСтруктуруМетаданных(ДанныеНовогоОбъекта)
		
	ОбъектМетаданных = СтруктураМетаданных.НайтиПоИдентификатору(ДанныеНовогоОбъекта.ИдентификаторВладельца);
	НовыйОбъект = ОбъектМетаданных.ПолучитьЭлементы().Добавить();
	НовыйОбъект.Класс = ДанныеНовогоОбъекта.Класс;
	НовыйОбъект.Имя = ДанныеНовогоОбъекта.Имя;
	НовыйОбъект.Синоним = ДанныеНовогоОбъекта.Имя;
	НовыйОбъект.ПолноеИмя = ДанныеНовогоОбъекта.ПолноеИмя;
	НовыйОбъект.Новый = Истина;
			
	НастроитьСвойстваНовогоОбъекта(НовыйОбъект, ДанныеНовогоОбъекта);			
			
	ПереместитьВИзбранное(НовыйОбъект);			
			
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСвойстваНовогоОбъекта(НовыйОбъект, ДанныеНовогоОбъекта)
	
	Если (НовыйОбъект.Класс = "ПараметрСеанса" 
		Или НовыйОбъект.Класс = "ОбщийРеквизит"
		Или НовыйОбъект.Класс = "Реквизит") 
		Или (НовыйОбъект.Класс = "Константа") Тогда
		
		НовыйОбъект.Тип = ДанныеНовогоОбъекта.Типы;
		
	ИначеЕсли (НовыйОбъект.Класс = "Справочник" 
		Или НовыйОбъект.Класс = "Документ"
		Или НовыйОбъект.Класс = "Отчет"
		Или НовыйОбъект.Класс = "Обработка"
		Или НовыйОбъект.Класс = "ПланВидовХарактеристик"
		Или НовыйОбъект.Класс = "ПланСчетов"
		Или НовыйОбъект.Класс = "ПланВидовРасчета"
		Или НовыйОбъект.Класс = "БизнесПроцесс"
		Или НовыйОбъект.Класс = "Задача") Тогда
		
		Если (НовыйОбъект.Класс = "Задача") Тогда
			ДобавитьМенеджерРеквизитовАдресации(НовыйОбъект);
		КонецЕсли;
			
		ДобавитьМенеджерРеквизитов(НовыйОбъект);
		ДобавитьМенеджерТабличныхЧастей(НовыйОбъект);
		ДобавитьМенеджерФорм(НовыйОбъект);
		ДобавитьМенеджерКоманд(НовыйОбъект);
		ДобавитьМенеджерМакетов(НовыйОбъект);
		
	ИначеЕсли (НовыйОбъект.Класс = "Перечисление") Тогда
		
		ДобавитьМенеджерЗначений(НовыйОбъект);
		ДобавитьМенеджерФорм(НовыйОбъект);
		ДобавитьМенеджерКоманд(НовыйОбъект);
		ДобавитьМенеджерМакетов(НовыйОбъект);
		
	ИначеЕсли (НовыйОбъект.Класс = "РегистрСведений"
		Или НовыйОбъект.Класс = "РегистрНакопления"
		Или НовыйОбъект.Класс = "РегистрБухгалтерии"
		Или НовыйОбъект.Класс = "РегистрРасчета") Тогда
		
		ДобавитьМенеджерИзмерений(НовыйОбъект);
		ДобавитьМенеджерРесурсов(НовыйОбъект);
		ДобавитьМенеджерРеквизитов(НовыйОбъект);
		ДобавитьМенеджерФорм(НовыйОбъект);
		ДобавитьМенеджерКоманд(НовыйОбъект);
		ДобавитьМенеджерМакетов(НовыйОбъект);
		
	ИначеЕсли НовыйОбъект.Класс = "Реквизит" Тогда
		НовыйОбъект.Тип = ДанныеНовогоОбъекта.Типы;
	КонецЕсли;
	
	УстановитьИконкуОбъектаМетаданных(НовыйОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИконкуОбъектаМетаданных(ЭлементОбъектаМетаданных)
	
	Если (ЭлементОбъектаМетаданных.Класс = "Конфигурация") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 0;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "МодульОбычногоПриложения"
		Или ЭлементОбъектаМетаданных.Класс = "МодульУправляемогоПриложения"
		Или ЭлементОбъектаМетаданных.Класс = "МодульВнешнегоСоединения"
		Или ЭлементОбъектаМетаданных.Класс = "МодульСеанса") Тогда
	
		ЭлементОбъектаМетаданных.ИндексКартинки = 1;
		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Общие") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 5;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Буфер") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 58;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Расширения") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 59;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Подсистема") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 6;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийМодуль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 7;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПараметрСеанса") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 8;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Роль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 9;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийРеквизит") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 10;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланОбмена") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 11;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "КритерийОтбора") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 12;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПодпискаНаСобытие") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 13;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегламентноеЗадание") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 14;			
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ФункциональнаяОпция") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 15;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПараметрФункциональнойОпции") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 16;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОпределяемыйТип") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 17;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ХранилищеНастроек") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 18;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяФорма" 
		Или ЭлементОбъектаМетаданных.Класс = "Форма") Тогда	
		
		ЭлементОбъектаМетаданных.ИндексКартинки = 19;
		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяКоманда" 
		Или ЭлементОбъектаМетаданных.Класс = "Команда") Тогда

		ЭлементОбъектаМетаданных.ИндексКартинки = 20;
			
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ГруппаКоманд") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 21;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Интерфейс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 22;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщийМакет" 
		Или ЭлементОбъектаМетаданных.Класс = "Макет") Тогда
		
		ЭлементОбъектаМетаданных.ИндексКартинки = 23;
		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ОбщаяКартинка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 24;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПакетXDTO") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 25;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "WebСервис") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 26;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "HTTPСервис") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 27;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "WSСсылка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 28;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ЭлементСтиля") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 29;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Стиль") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 30;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Язык") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 31;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Константа") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 32;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Справочник") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 33;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "НумераторДокументов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 34;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Последовательность") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 35;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Документ") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 36;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ЖурналДокументов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 37;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Перечисление") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 38;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Отчет") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 39;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Обработка") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 41;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланВидовХарактеристик") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 43;		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланСчетов") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 44;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ПланВидовРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 45;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрСведений") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 46;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрНакопления") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 47;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрБухгалтерии") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 48;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 49;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "БизнесПроцесс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 50;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Задача") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 51;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ВнешнийИсточникДанных") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 52;
	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Реквизит"
	Или ЭлементОбъектаМетаданных.Класс = "Значение") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 53;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ТабличнаяЧасть") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 54;
		
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Измерение") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 55;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Ресурс"
		Или ЭлементОбъектаМетаданных.Класс = "РеквизитАдресации") Тогда
			
		ЭлементОбъектаМетаданных.ИндексКартинки = 56;
	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрНакопления") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 47;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрБухгалтерии") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 48;	
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "РегистрРасчета") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 49;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "БизнесПроцесс") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 50;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "Задача") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 51;
	ИначеЕсли (ЭлементОбъектаМетаданных.Класс = "ВнешнийИсточникДанных") Тогда
		ЭлементОбъектаМетаданных.ИндексКартинки = 52;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВИзбранное(НовыйОбъект)
	
	СкопироватьДанныеОбъектаМетаданныхВБуфер(НовыйОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТипыМетаданных(ФормаРедактор)
	
	ФормаРедактор.ЗаполнитьТипыДанных(СтруктураМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйОбъектВМенеджерОбъектов()
	
	ОбъектМетаданных = ТекущийОбъектМетаданных();
	КонтейнерНовогоОбъекта = КонтейнерДляНовогоОбъекта(ОбъектМетаданных);
		
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторВладельца", КонтейнерНовогоОбъекта.ПолучитьИдентификатор());
	Если Не ПустаяСтрока(ОбъектМетаданных.ПолноеИмя) Тогда
		ПараметрыФормы.Вставить("ПолноеИмяВладельца", ОбъектМетаданных.ПолноеИмя);
	Иначе
		ПараметрыФормы.Вставить("ПолноеИмяВладельца", ОбъектМетаданных.Класс);
	КонецЕсли;	
	ПараметрыФормы.Вставить("Класс", ОбъектМетаданных.Класс);
	ПараметрыФормы.Вставить("УстановитьТип", ТребудетсяУстановитьТип(ОбъектМетаданных));
	
	ОткрытьФормуРедактораОбъекта(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Функция ТребудетсяУстановитьТип(ОбъектМетаданных)
	
	ТипизированныеОбъекты = Новый СписокЗначений();
	ТипизированныеОбъекты.Добавить("ПараметрСеанса");
	ТипизированныеОбъекты.Добавить("ОбщийРеквизит");
	ТипизированныеОбъекты.Добавить("Константа");
	ТипизированныеОбъекты.Добавить("Реквизит");
	ТипизированныеОбъекты.Добавить("РеквизитАдресации");
	ТипизированныеОбъекты.Добавить("Измерение");
	ТипизированныеОбъекты.Добавить("Ресурс");
	
	ТипизированныйОбъект = ТипизированныеОбъекты.НайтиПоЗначению(ОбъектМетаданных.Класс);
	Если ТипизированныйОбъект = Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	  
КонецФункции

&НаКлиенте
Функция КонтейнерДляНовогоОбъекта(ОбъектМетаданных)
	
	Если ОбъектМетаданных.Класс = "Подсистема" Тогда
		Возврат ОбъектМетаданных;
	КонецЕсли;
	
	РодительОбъекта = ОбъектМетаданных.ПолучитьРодителя();
	Если ОбъектМетаданных.МенеджерОбъектов Тогда
		Возврат ОбъектМетаданных;
	ИначеЕсли РодительОбъекта.МенеджерОбъектов Тогда
		Возврат РодительОбъекта;	
	ИначеЕсли ОбъектМетаданных.МенеджерПодчиненныхЭлементов Тогда
		Возврат ОбъектМетаданных;
	ИначеЕсли РодительОбъекта.МенеджерПодчиненныхЭлементов Тогда
		Возврат РодительОбъекта;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КомандаДобавитьРеквизит(Команда)

	ОбъектМетаданных = ТекущийОбъектМетаданных();
			
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторВладельца", ОбъектМетаданных.ПолучитьИдентификатор());
	ПараметрыФормы.Вставить("ПолноеИмяВладельца", ОбъектМетаданных.ПолноеИмя);
	ПараметрыФормы.Вставить("Класс", "Реквизит");
	ПараметрыФормы.Вставить("УстановитьТип", Истина);
	
	ОткрытьФормуРедактораОбъекта(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьОписаниеОтчета(Команда)
	
	Конструктор = Новый КонструкторСхемыКомпоновкиДанных();
	Конструктор.Редактировать(ЭтаФорма);
    
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьОписаниеОбъекта(Команда)

	ДобавитьОписаниеОбъекта();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеОбъекта()
	
	ДобавитьОписаниеОбъектаПоШаблону();
	Возврат;
	
	ОбъектМетаданных = ТекущийОбъектМетаданных();
	
	ПредставлениеОбъекта = МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, Ложь);
	МаркерФорматирования = Новый Структура("Маркер, Представление, Объект", ПредставлениеОбъекта.Текст, 
		ПредставлениеОбъекта.ВыделяемыйФрагмент, ОбъектМетаданных);
		
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
	Для Каждого ПодчиненныйЭлемент Из ОбъектМетаданных.ПолучитьЭлементы() Цикл
		Если ПодчиненныйЭлемент.Класс = "Измерение" Тогда
			
			ТекстСообщения = ТекстСообщения + "	" + Символ(10);
			ТекстСообщения = ТекстСообщения + "**Измерения:**	" + Символ(10) + Символ(10);
			ТекстСообщения = ТекстСообщения + "!hИмя!hТип!hОписание!" + Символ(10);
		
			Для Каждого Реквизит Из ПодчиненныйЭлемент.ПолучитьЭлементы() Цикл
				
				Если ТипЗнч(Реквизит.Тип) = Тип("Строка") Тогда
					ПредставлениеТипа = "{" + Реквизит.Тип + "}"
				ИначеЕсли ТипЗнч(Реквизит.Тип) = Тип("СписокЗначений") Тогда
					
					КоличествоТипов = Реквизит.Тип.Количество();
					ИндексТипа = 1;
					
					ПредставлениеТипа = "{";
					Для Каждого Тип Из Реквизит.Тип Цикл
						ПредставлениеТипа = ПредставлениеТипа + Тип.Значение 
							+ ?(КоличествоТипов = ИндексТипа, "", "; ");
						ИндексТипа = ИндексТипа + 1;
					КонецЦикла;
					
					ПредставлениеТипа = ПредставлениеТипа + "}";
					
				КонецЕсли;
				
				ТекстСообщения = ТекстСообщения + "!" + Реквизит.Имя + "!" + ПредставлениеТипа + "!" 
					+ ?(Реквизит.Новый, "Новое измерение", "") + "!" + Символ(10);
				
			КонецЦикла;
		КонецЕсли;
		
		Если ПодчиненныйЭлемент.Класс = "Ресурс" Тогда
			
			ТекстСообщения = ТекстСообщения + "	" + Символ(10);
			ТекстСообщения = ТекстСообщения + "**Ресурсы:**	" + Символ(10) + Символ(10);
			ТекстСообщения = ТекстСообщения + "!hИмя!hТип!hОписание!" + Символ(10);
		
			Для Каждого Реквизит Из ПодчиненныйЭлемент.ПолучитьЭлементы() Цикл
				
				Если ТипЗнч(Реквизит.Тип) = Тип("Строка") Тогда
					ПредставлениеТипа = "{" + Реквизит.Тип + "}"
				ИначеЕсли ТипЗнч(Реквизит.Тип) = Тип("СписокЗначений") Тогда
					
					КоличествоТипов = Реквизит.Тип.Количество();
					ИндексТипа = 1;
					
					ПредставлениеТипа = "{";
					Для Каждого Тип Из Реквизит.Тип Цикл
						ПредставлениеТипа = ПредставлениеТипа + Тип.Значение 
							+ ?(КоличествоТипов = ИндексТипа, "", "; ");
						ИндексТипа = ИндексТипа + 1;
					КонецЦикла;
					
					ПредставлениеТипа = ПредставлениеТипа + "}";
					
				КонецЕсли;
				
				ТекстСообщения = ТекстСообщения + "!" + Реквизит.Имя + "!" + ПредставлениеТипа + "!" 
					+ ?(Реквизит.Новый, "Новый ресурс", "") + "!" + Символ(10);
				
			КонецЦикла;
		КонецЕсли;
		
		Если ПодчиненныйЭлемент.Класс = "Реквизит" Тогда
			
			ТекстСообщения = ТекстСообщения + "	" + Символ(10);
			ТекстСообщения = ТекстСообщения + "**Реквизиты:**	" + Символ(10) + Символ(10);
			ТекстСообщения = ТекстСообщения + "!hИмя!hТип!hОписание!" + Символ(10);
	
			Для Каждого Реквизит Из ПодчиненныйЭлемент.ПолучитьЭлементы() Цикл
				
				Если ТипЗнч(Реквизит.Тип) = Тип("Строка") Тогда
					ПредставлениеТипа = "{" + Реквизит.Тип + "}"
				ИначеЕсли ТипЗнч(Реквизит.Тип) = Тип("СписокЗначений") Тогда
					
					КоличествоТипов = Реквизит.Тип.Количество();
					ИндексТипа = 1;
					
					ПредставлениеТипа = "{";
					Для Каждого Тип Из Реквизит.Тип Цикл
						ПредставлениеТипа = ПредставлениеТипа + Тип.Значение 
							+ ?(КоличествоТипов = ИндексТипа, "", "; ");
						ИндексТипа = ИндексТипа + 1;
					КонецЦикла;
					
					ПредставлениеТипа = ПредставлениеТипа + "}";
					
				КонецЕсли;
				
				ТекстСообщения = ТекстСообщения + "!" + Реквизит.Имя + "!" + ПредставлениеТипа + "!" 
					+ ?(Реквизит.Новый, "Новый реквизит", "") + "!" + Символ(10);
				
			КонецЦикла;
		КонецЕсли;
		
		Если ПодчиненныйЭлемент.Класс = "ТабличнаяЧасть" И ПодчиненныйЭлемент.МенеджерПодчиненныхЭлементов Тогда
			Для Каждого ТабличнаяЧастьОбъекта Из ПодчиненныйЭлемент.ПолучитьЭлементы() Цикл
				
				ТекстСообщения = ТекстСообщения + "	" + Символ(10);
				ТекстСообщения = ТекстСообщения + "**Табличная часть:**	" + ТабличнаяЧастьОбъекта.Имя + Символ(10) + Символ(10);
				ТекстСообщения = ТекстСообщения + "!hИмя!hТип!hОписание!" + Символ(10);
				
				Для Каждого Реквизит Из ТабличнаяЧастьОбъекта.ПолучитьЭлементы() Цикл
				
					Если ТипЗнч(Реквизит.Тип) = Тип("Строка") Тогда
						ПредставлениеТипа = "{" + Реквизит.Тип + "}"
					ИначеЕсли ТипЗнч(Реквизит.Тип) = Тип("СписокЗначений") Тогда
						
						КоличествоТипов = Реквизит.Тип.Количество();
						ИндексТипа = 1;
						
						ПредставлениеТипа = "{";
						Для Каждого Тип Из Реквизит.Тип Цикл
							ПредставлениеТипа = ПредставлениеТипа + Тип.Значение 
								+ ?(КоличествоТипов = ИндексТипа, "", "; ");
							ИндексТипа = ИндексТипа + 1;
						КонецЦикла;
						
						ПредставлениеТипа = ПредставлениеТипа + "}";
						
					КонецЕсли;
				
				ТекстСообщения = ТекстСообщения + "!" + Реквизит.Имя + "!" + ПредставлениеТипа + "!" 
					+ ?(Реквизит.Новый, "Новый реквизит", "") + "!" + Символ(10);
				
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеОбъектаПоШаблону()
	
	БлокОписанияОбъекта = Новый ТекстовыйДокумент();
	ШаблонДокументации = МакетОписанияОбъекта();
	
	ОбъектМетаданных = ТекущийОбъектМетаданных();
	
	ПредставлениеОбъекта = МаркированноеПредставлениеОбъектаМетаданных(ОбъектМетаданных, Ложь);
	
	ВидРазработки = "";
	Если (ОбъектМетаданных.Новый) Тогда
		ВидРазработки = "##### Разработать ";
	Иначе
		ВидРазработки = "##### Доработать ";
	КонецЕсли;
	
	МаркерФорматирования = Новый Структура("Маркер, Представление, Объект", 
		ВидРазработки + ПредставлениеОбъекта.Текст, 
		ПредставлениеОбъекта.ВыделяемыйФрагмент, ОбъектМетаданных);
		
	ДобавитьМаркерВТекст(МаркерФорматирования, Истина);
	
	ДобавитьОписаниеПодчиненныхОбъектов(ОбъектМетаданных, ШаблонДокументации, БлокОписанияОбъекта);

	ТекстСообщения = ТекстСообщения + Символ(10) + БлокОписанияОбъекта.ПолучитьТекст();

КонецПроцедуры

// Параметры:
// 	ОбъектМетаданных - ДанныеФормыЭлементДерева - подчиненный элемент СтруктураМетаданных описывающий объект 
// 	Макет - ТекстовыйДокумент - шаблон для описания объектов
// 	БлокОписанияОбъекта - ТекстовыйДокумент - документ содержащий описание по объекту
&НаКлиенте
Процедура ДобавитьОписаниеПодчиненныхОбъектов(ОбъектМетаданных, ШаблонДокументации, БлокОписанияОбъекта)
	
	ОбластьМенеджера = ШаблонДокументации.ПолучитьОбласть("МенеджерПолей");
	
	Для Каждого ПодчиненныйЭлемент Из ОбъектМетаданных.ПолучитьЭлементы() Цикл
			
		Если ПодчиненныйЭлемент.Класс = "Измерение" 
			Или ПодчиненныйЭлемент.Класс = "Ресурс" 
			Или ПодчиненныйЭлемент.Класс = "Реквизит"
			Или ПодчиненныйЭлемент.Класс = "Значение" Тогда
			
			Если ПодчиненныйЭлемент.Класс = "Измерение" Тогда 
				ОбластьМенеджера.Параметры.ИмяМенеджера = "** __Измерения:__ **";
			ИначеЕсли ПодчиненныйЭлемент.Класс = "Ресурс" Тогда 
				ОбластьМенеджера.Параметры.ИмяМенеджера = "** __Ресурсы:__ **";
			ИначеЕсли ПодчиненныйЭлемент.Класс = "Реквизит" Тогда
				ОбластьМенеджера.Параметры.ИмяМенеджера = "** __Реквизиты:__ **";
			ИначеЕсли ПодчиненныйЭлемент.Класс = "Значение" Тогда
				ОбластьМенеджера.Параметры.ИмяМенеджера = "** __Значения:__ **";
			КонецЕсли;
			
			БлокОписанияОбъекта.Вывести(ОбластьМенеджера);
			ДобавитьОписаниеПолейОбъекта(ПодчиненныйЭлемент, ШаблонДокументации, БлокОписанияОбъекта);

		ИначеЕсли (ПодчиненныйЭлемент.Класс = "ТабличнаяЧасть" 
			И ПодчиненныйЭлемент.МенеджерПодчиненныхЭлементов) Тогда	 
			
			Для Каждого ТабличнаяЧастьОбъекта Из ПодчиненныйЭлемент.ПолучитьЭлементы() Цикл

				ОбластьМенеджера.Параметры.ИмяМенеджера = "** __Табличная часть:__ ** " 
					+ ТабличнаяЧастьОбъекта.Имя;
				БлокОписанияОбъекта.Вывести(ОбластьМенеджера);

				ДобавитьОписаниеПолейОбъекта(ТабличнаяЧастьОбъекта, ШаблонДокументации, БлокОписанияОбъекта);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеПолейОбъекта(МенеджерПолей, ШаблонДокументации, БлокОписанияОбъекта)
	
	ОбластьПоля = ШаблонДокументации.ПолучитьОбласть("Поле");
	Для Каждого Поле Из МенеджерПолей.ПолучитьЭлементы() Цикл

		Если ТипЗнч(Поле.Тип) = Тип("Строка") Тогда
			ПредставлениеТипа = Поле.Тип;
		ИначеЕсли ТипЗнч(Поле.Тип) = Тип("СписокЗначений") Тогда

			КоличествоТипов = Поле.Тип.Количество();
			ИндексТипа = 1;

			ПредставлениеТипа = "";
			Для Каждого Тип Из Поле.Тип Цикл
				ПредставлениеТипа = ПредставлениеТипа + Тип.Значение + ?(КоличествоТипов = ИндексТипа, "", "; ");
				ИндексТипа = ИндексТипа + 1;
			КонецЦикла;

		КонецЕсли;

		ОбластьПоля.Параметры.ИмяРеквизита = Поле.Имя;
		ОбластьПоля.Параметры.ТипРеквизита = ПредставлениеТипа;
		ОбластьПоля.Параметры.ОписаниеРеквизита = ?(Поле.Новый, "Новое поле", "");

		БлокОписанияОбъекта.Вывести(ОбластьПоля);

	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОписаниеОтчета(СхемаОтчета)

//	СхемаОтчета = Новый СхемаКомпоновкиДанных();
	
	ТекстСообщения = ТекстСообщения + "**Поля:**	" + Символ(10) + Символ(10);
	ТекстСообщения = ТекстСообщения + "!hПоле!hТип!hЗаголовок!hОписание!" + Символ(10);
	ВычисляемыеПоля = СхемаОтчета.ВычисляемыеПоля;
	
	Для Каждого Поле Из СхемаОтчета.НастройкиПоУмолчанию.Выбор.Элементы Цикл
		
		ВычисляемоеПоле = ВычисляемыеПоля.Найти(Поле.Поле);
		Заголовок = Поле.Заголовок;
		ПредставлениеТипа = "";
		
		Если Не ВычисляемоеПоле = Неопределено Тогда
			
			Заголовок = ВычисляемоеПоле.Заголовок;
			ТипыПоля = ТипыОбъектов(ВычисляемоеПоле.ТипЗначения.Типы());
			
			Если ТипЗнч(ТипыПоля) = Тип("Строка") Тогда
				ПредставлениеТипа = "{" + ТипыПоля + "}";
			ИначеЕсли ТипЗнч(ТипыПоля) = Тип("СписокЗначений") Тогда

				КоличествоТипов = ТипыПоля.Количество();
				ИндексТипа = 1;

				ПредставлениеТипа = "{";
				Для Каждого Тип Из ТипыПоля.Тип Цикл
					ПредставлениеТипа = ПредставлениеТипа + Тип.Значение
						+ ?(КоличествоТипов = ИндексТипа, "", "; ");
					ИндексТипа = ИндексТипа + 1;
				КонецЦикла;

				ПредставлениеТипа = ПредставлениеТипа + "}";

			КонецЕсли;
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + "!"+Поле.Поле+"!"+ПредставлениеТипа+"!"+Заголовок+"!!";
		
	КонецЦикла;
	
	ТекстСообщения = ТекстСообщения + "**Отбор:**	" + Символ(10) + Символ(10);
	ТекстСообщения = ТекстСообщения + "!hПоле!hТип!hЗаголовок!hОписание!" + Символ(10);
	ВычисляемыеПоля = СхемаОтчета.ВычисляемыеПоля;
	
	Для Каждого Отбор Из СхемаОтчета.НастройкиПоУмолчанию.Отбор.Элементы Цикл
		
		Поле = Отбор.ЛевоеЗначение;
		ТекстСообщения = ТекстСообщения + "!"+Поле.Поле+"!!!!";
		
	КонецЦикла;
	
	ТекстСообщения = ТекстСообщения + "**Структура:**	" + Символ(10) + Символ(10);
	ТекстСообщения = ТекстСообщения + "!hПоле!hТип!hЗаголовок!hОписание!" + Символ(10);
	ВычисляемыеПоля = СхемаОтчета.ВычисляемыеПоля;
	
	Для Каждого Группа Из СхемаОтчета.НастройкиПоУмолчанию.Структура Цикл
		ИмяПолей = "";
		Для Каждого Поле Из Группа.ПоляГруппировки.Элементы Цикл
			ИмяПолей = ИмяПолей + Поле.Поле + ";"; 
		КонецЦикла;
		
		ТекстСообщения = ТекстСообщения + "!"+ИмяПолей+"!!!!";
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыКонтекстногоМеню(ОбъектМетаданных)
	
	Меню = Элементы.СтруктураМетаданных.КонтекстноеМеню;
	УстановитьВидимостьКнопокКонтекстногоМеню(Меню);
	
	Если Не (ОбъектМетаданных.Класс = "Буфер"
		Или ОбъектМетаданных.Класс = "Расширения"
		Или ОбъектМетаданных.Класс = "Конфигурация"
		Или ОбъектМетаданных.Класс = "МодульОбычногоПриложения"
		Или ОбъектМетаданных.Класс = "МодульУправляемогоПриложения"
		Или ОбъектМетаданных.Класс = "МодульВнешнегоСоединения"
		Или ОбъектМетаданных.Класс = "МодульСеанса"
		Или ОбъектМетаданных.Класс = "Общие") Тогда
	
		Элементы.КомандаДобавитьНовыйОбъект.Видимость = Истина;
		
	КонецЕсли;
	
	Если ОбъектМетаданных.ТабличнаяЧасть Тогда
		Элементы.КомандаДобавитьРеквизит.Видимость = Истина;
	КонецЕсли;
		
	Если ОбъектМетаданных.МенеджерОбъектов = Ложь 
		И (ОбъектМетаданных.Класс = "ПланОбмена"
		Или ОбъектМетаданных.Класс = "КритерийОтбора"
		Или ОбъектМетаданных.Класс = "ПакетXDTO"
		Или ОбъектМетаданных.Класс = "WebСервис"
		Или ОбъектМетаданных.Класс = "HTTPСервис"
		Или ОбъектМетаданных.Класс = "Константа"
		Или ОбъектМетаданных.Класс = "Справочник"
		Или ОбъектМетаданных.Класс = "Документ"
		Или ОбъектМетаданных.Класс = "ЖурналДокументов"
		Или ОбъектМетаданных.Класс = "Перечисление"
		Или ОбъектМетаданных.Класс = "Отчет"
		Или ОбъектМетаданных.Класс = "Обработка"
		Или ОбъектМетаданных.Класс = "ПланВидовХарактеристик"
		Или ОбъектМетаданных.Класс = "ПланСчетов"
		Или ОбъектМетаданных.Класс = "ПланВидовРасчета"
		Или ОбъектМетаданных.Класс = "РегистрСведений"
		Или ОбъектМетаданных.Класс = "РегистрНакопления"
		Или ОбъектМетаданных.Класс = "РегистрБухгалтерии"
		Или ОбъектМетаданных.Класс = "РегистрРасчета"
		Или ОбъектМетаданных.Класс = "БизнесПроцесс"
		Или ОбъектМетаданных.Класс = "Задача"
		Или ОбъектМетаданных.Класс = "ВнешнийИсточникДанных") Тогда
		
		Если Не (ОбъектМетаданных.Класс = "КритерийОтбора"
		Или ОбъектМетаданных.Класс = "ПакетXDTO"
		Или ОбъектМетаданных.Класс = "WebСервис"
		Или ОбъектМетаданных.Класс = "HTTPСервис"
		Или ОбъектМетаданных.Класс = "РегистрСведений"
		Или ОбъектМетаданных.Класс = "РегистрНакопления"
		Или ОбъектМетаданных.Класс = "РегистрБухгалтерии"
		Или ОбъектМетаданных.Класс = "РегистрРасчета") Тогда
			
			Элементы.КнопкаДобавитьОбъектВВидеТипа.Видимость = Истина;
			
		КонецЕсли;
						
		Если Не ОбъектМетаданных.Класс = "Константа" Тогда						
			Элементы.КнопкаПоказатьСвойстваОбъекта.Видимость = Истина;
		КонецЕсли;
				
	КонецЕсли;

	Если (ОбъектМетаданных.Класс = "Справочник"
		Или ОбъектМетаданных.Класс = "Документ"
		Или ОбъектМетаданных.Класс = "ЖурналДокументов"
		Или ОбъектМетаданных.Класс = "Перечисление"
		Или ОбъектМетаданных.Класс = "Отчет"
		Или ОбъектМетаданных.Класс = "Обработка"
		Или ОбъектМетаданных.Класс = "ПланВидовХарактеристик"
		Или ОбъектМетаданных.Класс = "ПланСчетов"
		Или ОбъектМетаданных.Класс = "ПланВидовРасчета"
		Или ОбъектМетаданных.Класс = "РегистрСведений"
		Или ОбъектМетаданных.Класс = "РегистрНакопления"
		Или ОбъектМетаданных.Класс = "РегистрБухгалтерии"
		Или ОбъектМетаданных.Класс = "РегистрРасчета"
		Или ОбъектМетаданных.Класс = "БизнесПроцесс"
		Или ОбъектМетаданных.Класс = "Задача"
		Или ОбъектМетаданных.Класс = "ВнешнийИсточникДанных") Тогда
	
		Элементы.КнопкаДобавитьОписаниеОбъекта.Видимость = Истина;
		
	КонецЕсли;
	
	Если Не (ОбъектМетаданных.МенеджерОбъектов
		Или  ОбъектМетаданных.Класс = "Буфер"
		Или  ОбъектМетаданных.Класс = "Расширения") Тогда
			
		Элементы.КнопкаДобавитьВИзбранные.Видимость = Истина;
		
	КонецЕсли;
	
	Если (ОбъектМетаданных.Класс = "ОбщаяКартинка" И ОбъектМетаданных.МенеджерОбъектов) Тогда
		Элементы.КнопкаПоказатьСвойстваОбъекта.Видимость = Истина;
	КонецЕсли;
	
	Если ОбъектМетаданных.Класс = "Форма" И Не ПустаяСтрока(ОбъектМетаданных.ПолноеИмя) Тогда
		
		Элементы.КнопкаПолучитьСтруктуруФормы.Видимость = Истина;
		Элементы.КнопкаОткрытьНовуюИнтерактивнуюФорму.Видимость = Истина;
		Элементы.КнопкаОткрытьФормуЗаписанногоОбъекта.Видимость = Истина;
		Элементы.КнопкаДобавитьСсылкуНаОткрытуюФорму.Видимость = Истина;
		Элементы.КнопкаОткрытьИнтерактивнуюФормуСоСкриптом.Видимость = Истина;
		
	КонецЕсли;
		
	
	
КонецПроцедуры // НастроитьКомандыКонтекстногоМеню()

&НаКлиенте
Процедура УстановитьВидимостьКнопокКонтекстногоМеню(Меню)
	
	Для Каждого КнопкаМеню Из Меню.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(КнопкаМеню) = Тип("КнопкаФормы") Тогда
			КнопкаМеню.Видимость = Ложь;
		Иначе
			УстановитьВидимостьКнопокКонтекстногоМеню(КнопкаМеню);
				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_ОписаниеОбъектов(Команда)

	ТекстовыйДокумент = Новый ТекстовыйДокумент();

	Макет = МакетОписанияОбъекта();
	ОбластьОбъекта = Макет.ПолучитьОбласть("ЗаголовокОбъектаНовый"); 	
	ОбластьОбъекта.Параметры.ПолноеИмяОбъекта = "Имя объекта для вывода";
	
	ТекстовыйДокумент.Вывести(ОбластьОбъекта);
	
	ТекстовыйДокумент.Показать();
	
КонецПроцедуры

&НаСервере
Функция МакетОписанияОбъекта()
	
	ОбработкаРедактор = РеквизитФормыВЗначение("Объект");
   МакетОписанияОбъекта = ОбработкаРедактор.ПолучитьМакет("ОписаниеОбъекта");
   
   Возврат МакетОписанияОбъекта;
    
КонецФункции